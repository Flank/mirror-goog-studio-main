/*
 * Copyright 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
package layoutinspector.view.inspection;
option java_package = "layoutinspector.view.inspection";
option java_outer_classname = "LayoutInspectorViewProtocol";
option optimize_for = LITE_RUNTIME;

// ======= MESSAGES =======

// A mapping of |string| to |int32|, so strings can be efficiently reused across nodes
// Any time a text value in any of these messages has an |int32| type, it means it will do a
// lookup in a string table on the client.
message StringEntry {
    int32 id = 1;
    string str = 2;
}

message Point {
    int32 x = 1;
    int32 y = 2;
}

message Rect {
    int32 x = 1;
    int32 y = 2;
    int32 w = 3;
    int32 h = 4;
}

// A Quad will be the result of a Rect after applying some affine or perspective transformations.
// While the transformed points can be skewed in a complex manner, the untransformed Rect source of
// the coordinates will always be consistent:
// 0 = top left, 1 = top right, 2 = bot left, 3 = bot right
message Quad {
    sint32 x0 = 1;
    sint32 y0 = 2;
    sint32 x1 = 3;
    sint32 y1 = 4;
    sint32 x2 = 5;
    sint32 y2 = 6;
    sint32 x3 = 7;
    sint32 y3 = 8;
}

message Bounds {
    // The bounds of some element in the layout tree
    Rect layout = 1;
    // Bounds transformed in preparation for final rendering
    Quad render = 2;
}

message ViewNode {
    // General node properties
    int64 id = 1;
    repeated ViewNode children = 2;

    // Resource reference associated with the view itself inside a layout
    Resource resource = 3;
    int32 package_name = 4;
    int32 class_name = 5;

    Bounds bounds = 6;

    // Resource reference associated with view's layout
    Resource layout_resource = 7;
    int32 layout_flags = 8;

    // Type-specific node properties
    int32 text_value = 101; // For TextView, etc.
}

message Screenshot {
    enum Type {
        UNKNOWN = 0;
        NONE = 1;
        SKP = 2;
    }
    Type type = 1;
    bytes bytes = 2;
}

// In Android, a resource id is a simple integer. This class holds the namespace, type, and name
// of such a resource id.
// For example, with "@android:id/textView":
//   type: id
//   namespace: android
//   name: textView
message Resource {
    int32 type = 1;
    int32 namespace = 2;
    int32 name = 3;
}

// Locale information, corresponds to java.util.Locale
message Locale {
    int32 language = 1;
    int32 country = 2;
    int32 variant = 3;
    int32 script = 4;
}

// Device configuration, corresponds to android.content.res.Configuration
message Configuration {
    float font_scale = 1;
    int32 country_code = 2;
    int32 network_code = 3;
    Locale locale = 4;
    int32 screen_layout = 5;
    int32 color_mode = 6;
    int32 touch_screen = 7;
    int32 keyboard = 8;
    int32 keyboard_hidden = 9;
    int32 hard_keyboard_hidden = 10;
    int32 navigation = 11;
    int32 navigation_hidden = 12;
    int32 ui_mode = 13;
    int32 smallest_screen_width = 14;
    int32 density = 15;
    int32 orientation = 16;
    int32 screen_width = 17;
    int32 screen_height = 18;
}

// Various data about the current app, which can be used to resolve resource references for the
// device's Configuration.
message AppContext {
    int32 api_level = 1;
    int32 api_code_name = 2;
    int32 app_package_name = 3;
    Resource theme = 4;
    Configuration configuration = 5;
}

// Handles properties whose values are bit flags, e.g. "top|left"
message FlagValue {
    repeated int32 flag = 1;
}

// An attribute property, e.g. "text", "
message Property {
    // Note: Enums kept in sync with tools/adt/idea/layout-inspector's PropertyType
    enum Type {
        STRING = 0;
        BOOLEAN = 1;
        BYTE = 2;
        CHAR = 3;
        DOUBLE = 4;
        FLOAT = 5;
        INT16 = 6;
        INT32 = 7;
        INT64 = 8;
        OBJECT = 9;
        COLOR = 10;
        GRAVITY = 11;
        INT_ENUM = 12;
        INT_FLAG = 13;
        RESOURCE = 14;
        DRAWABLE = 15;
        ANIM = 16;
        ANIMATOR = 17;
        INTERPOLATOR = 18;
        DIMENSION = 19;
    }

    Type type = 1;
    int32 name = 2;
    Resource source = 3;
    repeated Resource resolution_stack = 4;
    bool is_layout = 5;

    oneof value {
        int32 int32_value = 101;
        int64 int64_value = 102;
        double double_value = 103;
        float float_value = 104;
        Resource resource_value = 105;
        FlagValue flag_value = 106;
    }
}

// A collection of all properties associated with a single view
message PropertyGroup {
    int64 view_id = 1;
    Resource layout = 2;
    repeated Property property = 3;
}

// ======= COMMANDS, RESPONSES, AND EVENTS =======

// Tells the inspector to start sending |LayoutEvent|s asynchronously
message StartFetchCommand {
    // If continuous, layout events will keep coming until a |StopFetchCommand| is sent.
    // Otherwise, only a single |LayoutEvent| will be sent.
    bool continuous = 1;
    // If true, only show view nodes created by the user's own app
    bool skip_system_views = 2;
}
message StartFetchResponse {}

// Command to fire to stop |LayoutEvent|s from being returned.
// If |FetchCommand| was never called, this will be a no-op.
message StopFetchCommand {}
message StopFetchResponse {}

// Make a request to fetch properties associated with the specified View
message GetPropertiesCommand {
    int64 root_view_id = 1; // Used for filtering out views from unrelated layout trees
    int64 view_id = 2;
}
// Data sent in response to |GetPropertiesCommand|.
message GetPropertiesResponse {
    repeated StringEntry strings = 1;
    PropertyGroup property_group = 2;
}

// An event containing complete layout information about a single node tree
message LayoutEvent {
    // A collection of all text referenced by other fields in this message
    repeated StringEntry strings = 1;
    AppContext app_context = 2;
    ViewNode root_view = 3;
    // The offset of the root view from the origin of the surface. Will always be 0,0 for
    // the main window, but can be positive for floating windows (e.g. dialogs).
    Point root_offset = 4;
    Screenshot screenshot = 5;
}

// An event fired whenever a new root is added or an old root is removed.
// Host is guaranteed to receive this at least once before the first |LayoutEvent|
message WindowRootsEvent {
    repeated int64 ids = 1;
}

// An event fired which contains ALL properties under a single layout tree.
// Host will receive this right after a |LayoutEvent| when taking a layout snapshot (that is,
// fetching once, with continuous = false).
message PropertiesEvent {
    int64 root_id = 1;
    repeated StringEntry strings = 2;
    repeated PropertyGroup property_groups = 3;
}

// An event for reporting an error message, particularly for crashes that happen off the inspector
// thread.
// TODO(b/176993981): The inspector framework handles crashes that happen on the inspector thread,
//  but no support for non-inspector threads at this point. We can stop using this custom message
//  when such support is added, however.
message ErrorEvent {
    string message = 1;
}

message Command {
    oneof specialized {
        StartFetchCommand start_fetch_command = 1;
        StopFetchCommand stop_fetch_command = 2;
        GetPropertiesCommand get_properties_command = 3;
    }
}
message Response {
    oneof specialized {
        StartFetchResponse start_fetch_response = 1;
        StopFetchResponse stop_fetch_response = 2;
        GetPropertiesResponse get_properties_response = 3;
    }
}
message Event {
    oneof specialized {
        ErrorEvent error_event = 1;
        WindowRootsEvent roots_event = 2;
        LayoutEvent layout_event = 3;
        PropertiesEvent properties_event = 4;
    }
}
