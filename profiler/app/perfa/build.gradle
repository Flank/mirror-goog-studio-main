/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'

archivesBaseName = 'perfa'

File androidJar = file('../../../../../prebuilts/sdk/25/android.jar');
if (!androidJar.exists()) {
    // If not there, we're in one of the AOSP release branches where the
    // repo configuration does not include the whole prebuilts repository.
    // Fetch the SDK via $ANDROID_HOME instead.
    File jar = file(System.env.ANDROID_HOME + '/platforms/android-25/android.jar');
    if (jar.exists()) {
        androidJar = jar
    } else {
        throw new RuntimeException("android-25 android.jar not found at " + androidJar.absolutePath)
    }
}

compileJava {
    sourceCompatibility = 1.6
    targetCompatibility = 1.6
}

dependencies {
    compileOnly files(androidJar)
    testCompile 'junit:junit:4.12'
}

sourceSets {
    main {
        java { srcDir "${rootProject.projectDir}/app/common/src/main/java" }
    }
}

// dx the output jar which will be used by the agent to load in at runtime.
task jarToDex(type: JavaExec, dependsOn: jar) {
    main = "-jar"
    args = [
      "../../../../../prebuilts/sdk/tools/lib/dx.jar",
      "--dex",
      "--output=" + libsDir.absolutePath + "/perfa.jar",
      libsDir.absolutePath + "/" + archivesBaseName + ".jar"
    ]
}
build.dependsOn(jarToDex)
