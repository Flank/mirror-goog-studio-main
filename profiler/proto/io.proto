/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package profiler.proto;
option java_package = "com.android.tools.profiler.proto";
option java_outer_classname = "IoProfiler";

import "profiler.proto";

enum IoType {
  UNSPECIFIED_TYPE = 0;
  READ = 1;
  WRITE = 2;
}

enum TimestampPosition {
  // has already happened at the serving time but the timestamp
  // is not known to the I/O profiler
  UNKNOWN = 0;

  // hasn't happened yet at the serving time
  FUTURE = -1;
}

service IoService {
  // Starts collecting I/O data of a running app.
  // Does nothing if the app is already being monitored.
  rpc StartMonitoringApp(IoStartRequest) returns (IoStartResponse) {
  }

  // Stops monitoring a running app. Does nothing if the app is not being
  // monitored, or is not running.
  rpc StopMonitoringApp(IoStopRequest) returns (IoStopResponse) {
  }

  // Get file sessions data for an app.
  rpc GetFileData(FileDataRequest) returns (FileDataResponse) {
  }

  // Get I/O speed data fot an app.
  rpc GetSpeedData(SpeedDataRequest) returns (SpeedDataResponse) {
  }
}

message IoStartRequest {
  int32 process_id = 1;
  Session session = 2;
}

message IoStartResponse {
  enum Status {
    UNSPECIFIED = 0;
    SUCCESS = 1;
    FAILURE_APP_NOT_RUNNING = 2;
    FAILURE = 3;
  }
  Status status = 1;
}

message IoStopRequest {
  int32 process_id = 1;
  Session session = 2;
}

message IoStopResponse {
  enum Status {
    UNSPECIFIED = 0;
    SUCCESS = 1;
    FAILURE = 2;
  }
  Status status = 1;
}

message FileDataRequest {
  int32 process_id = 1;
  Session session = 2;
  int64 start_timestamp = 3;  // exclusive
  int64 end_timestamp = 4;    // inclusive
}

// Corresponds to a single write/read call
message IoCall {
  // Timestamp when the call started
  int64 start_timestamp = 1;
  // Timestamp when the call ended
  int64 end_timestamp = 2;
  // Amount of bytes read or written
  int32 bytes_count = 3;
  // Either a read or write call
  IoType type = 4;
}

// A FileSession represents a session of operating on a file from
// when it was opened until it is closed.
// e.g. {open, read, read, close} or {open, write, read, write, close}
message FileSession {
  // A unique id for the session
  int64 io_session_id = 1;
  // Timestamp of opening the file
  int64 start_timestamp = 2;
  // Timestamp of closing the file or FUTURE if it's not closed yet
  int64 end_timestamp = 3;
  // The path of the file
  string file_path = 4;
  repeated IoCall io_calls = 5;
}

// Contains for each file operated on in this period, when it was
// opened, closed, written to or read from.
message FileDataResponse {
  enum Status {
    UNSPECIFIED_STATUS = 0;
    SUCCESS = 1;
    FAILURE = 2;
  }

  Status status = 1;
  repeated FileSession file_sessions = 2;
}

message SpeedDataRequest {
  enum Type {
    UNSPECIFIED_TYPE = 0;
    READ_SPEED_DATA = 1;
    WRITE_SPEED_DATA = 2;
    ALL_SPEED_DATA = 3;
  }
  int32 process_id = 1;
  Session session = 2;
  Type type = 3;
  int64 start_timestamp = 4;  // exclusive
  int64 end_timestamp = 5;    // inclusive
}

// Contains the current overall speed of writing/reading
message IoSpeedData {
  IoType type = 1;
  // The speed of writing/reading in bytes/second
  int64 speed = 2;
  CommonData basic_info = 3;
}

message SpeedDataResponse {
  enum Status {
    UNSPECIFIED_STATUS = 0;
    SUCCESS = 1;
    FAILURE = 2;
  }

  Status status = 1;
  repeated IoSpeedData io_speed_data = 2;
}
