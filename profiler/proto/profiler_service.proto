/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package profiler.proto;
option java_package = "com.android.tools.profiler.proto";
option java_outer_classname = "Profiler";

service ProfilerService {
  // Gets current timestamp that used in the device's profiling data.
  // A client may use this API to relate profiling data' timestamps to other
  // clocks such as the desktop's calendar time.
  // TODO(b/29223899): Add device's calendar time.
  rpc GetTimes(TimesRequest) returns (TimesResponse) {
  }

  // Gets version.
  rpc GetVersion(VersionRequest) returns (VersionResponse) {
  }

  // Gets the currently connected devices.
  // TODO: expand with timing information for historical requests.
  rpc GetDevices(GetDevicesRequest) returns (GetDevicesResponse) {
  }

  // Gets the running processes of a given device
  // TODO expand with timing information for historical requests.
  rpc GetProcesses(GetProcessesRequest) returns (GetProcessesResponse) {
  }

  // Connect to remote profiler service
  rpc Connect(ConnectRequest) returns (ConnectResponse) {
  }

  // Disconnect from remote profiler service
  rpc Disconnect(DisconnectRequest) returns (DisconnectResponse) {
  }

  // TODO: Workaround until perfd supports answering device information
  // Will be removed once perfd is updated.
  rpc SetProcesses(SetProcessesRequest) returns (SetProcessesResponse) {
  }
}

message TimesRequest {
}

message TimesResponse {

  // What's used as timestamps in all profiler data (unless otherwise specified).
  // (a.k.a: Timestamp from clock_gettime(CLOCK_MONOTONIC, ...), ns precision.)
  int64 timestamp_ns = 1;

  // The number of microseconds since the Epoch.
  // (a.k.a: Timestamp from gettimeofday, us precision.)
  int64 epoch_timestamp_us = 2;
}

message VersionRequest {
}

message VersionResponse {
  string version = 1;
}

message GetDevicesRequest {
}

message GetDevicesResponse {
  repeated Device device = 1;
}

message GetProcessesRequest {
  string serial = 1;
}

message GetProcessesResponse {
  repeated Process process = 2;
}

message ConnectRequest {
  int32 port = 1;
}

message ConnectResponse {
}

message DisconnectRequest {
  int32 port = 1;
}

message DisconnectResponse {
}

message DeviceProcesses {
  Device device = 1;
  repeated Process process = 2;
}

message SetProcessesRequest {
  repeated DeviceProcesses device_processes = 1;
}

message SetProcessesResponse {
}

message Device {
  string manufacturer = 1;
  string model = 2;
  string serial = 3;
  string version = 4;
  string api = 5;  
}

message Process {
  string name = 1;
  int32 pid = 2;
}