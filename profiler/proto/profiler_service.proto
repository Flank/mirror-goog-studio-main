/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package profiler.proto;
option java_package = "com.android.tools.profiler.proto";
option java_outer_classname = "ProfilerService";

import "profiler.proto";

service DeviceService {
  // Gets current timestamp that used in the device's profiling data.
  // A client may use this API to relate profiling data' timestamps to other
  // clocks such as the desktop's calendar time.
  // TODO(b/29223899): Add device's calendar time.
  rpc GetTimes(TimesRequest) returns (TimesResponse) {
  }

  // Gets version.
  rpc GetVersion(VersionRequest) returns (VersionResponse) {
  }
}

message TimesRequest {
}

message TimesResponse {

  // What's used as timestamps in all profiler data (unless otherwise specified).
  // (a.k.a: Timestamp from clock_gettime(CLOCK_MONOTONIC, ...), ns precision.)
  int64 timestamp_ns = 1;

  // The number of microseconds since the Epoch.
  // (a.k.a: Timestamp from gettimeofday, us precision.)
  int64 epoch_timestamp_us = 2;
}

message VersionRequest {
}

message VersionResponse {
  string version = 1;
}
