/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package profiler.proto;
option java_package = "com.android.tools.profiler.proto";
option java_outer_classname = "EnergyProfiler";

import "common.proto";

service EnergyService {

  // Requests energy data from app with given |process_id|, in the time range
  // from |start_timestamp| (exclusive) to |end_timestamp| (inclusive), or
  // mathematically written as in interval (start_timestamp, end_timestamp].
  rpc GetData(EnergyRequest) returns (EnergyDataResponse) {
  }

  // Requests energy event data such as WakeLock, Alarm with given time range.
  // Request data range is same as #GetData (start_timestamp, end_timestamp].
  // Response data includes repeated data in time order.
  rpc GetEvents(EnergyRequest) returns (EnergyEventsResponse) {
  }
}

message EnergyRequest {
  Session session = 1;
  int64 start_timestamp = 2;
  int64 end_timestamp = 3;
}

message EnergySample {
  // Time when the energy sample usages occured.
  int64 timestamp = 1;
  // Sample usage data by cpu in mAh.
  int32 cpu_usage = 2;
  // Sample usage data by network in mAh.
  int32 network_usage = 3;
}

message EnergyDataResponse {
  // List of Energy usage sample data.
  repeated EnergySample sample_data = 1;
}

message EnergyEventsResponse {
  // Energy event details information in time order.
  repeated EnergyEvent event = 1;
}

// Energy event data or state change for WakeLock, Alarm, etc.
message EnergyEvent {
  // Timestamp of the event in nanoseconds.
  int64 timestamp = 1;
  // Application Id this event is associated with.
  int32 pid = 2;
  // Optional ID. If set, use to correlate two related events together. Will be
  // unique only to an app.
  int32 event_id = 3;

  // Metadata for this specific event. Additionally, use
  // |EnergyEvent.metadata_case()| as a way to see what this event's type is.
  oneof metadata {
    // Note: metadata IDs start at 101, so EnergyEvent fields can be added later
    // without any concern for numbers overlapping.

    // A wake lock was acquired, forcing the device to stay awake.
    WakeLockAcquired wake_lock_acquired = 101;
    // A wake lock was released, indicating it's not needed anymore.
    WakeLockReleased wake_lock_released = 102;
  }
}

message WakeLockAcquired {
  // Level and optional flags for the wake lock instance initialization.
  // https://developer.android.com/reference/android/os/PowerManager.html#newWakeLock(int, java.lang.String)
  int32 level_and_flags = 1;
  // Tag of the wake lock (which users may have set for debugging purposes).
  string tag = 2;
  // An optional timeout in milliseconds given to the acquire call. The lock
  // will be released after the given timeout expires.
  int64 timeout = 3;
}

message WakeLockReleased {
  // Optional flags that modify the release behavior.
  // https://developer.android.com/reference/android/os/PowerManager.WakeLock.html#release(int)
  int32 flags = 1;
}
