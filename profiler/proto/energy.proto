/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package profiler.proto;
option java_package = "com.android.tools.profiler.proto";
option java_outer_classname = "EnergyProfiler";

import "common.proto";

service EnergyService {
  // Starts collecting execution metrics of a running app, such as energy
  // samples and events. Does nothing if the app is already being monitored.
  rpc StartMonitoringApp(EnergyStartRequest) returns (EnergyStartResponse) {
  }

  // Stops monitoring a running app. Does nothing if the app is not being
  // monitored, or is not running.
  rpc StopMonitoringApp(EnergyStopRequest) returns (EnergyStopResponse) {
  }

  // Requests energy samples from app with given |process_id|, in the time range
  // from |start_timestamp| (exclusive) to |end_timestamp| (inclusive), or
  // mathematically written as in interval (start_timestamp, end_timestamp].
  rpc GetSamples(EnergyRequest) returns (EnergySamplesResponse) {
  }

  // Requests energy event data such as WakeLock, Alarm with given time range.
  // Request data range is same as |GetSamples(start_timestamp, end_timestamp]|.
  // Response data includes repeated data in time order.
  rpc GetEvents(EnergyRequest) returns (EnergyEventsResponse) {
  }
}

message EnergyStartRequest {
  Session session = 1;
}

message EnergyStartResponse {
}

message EnergyStopRequest {
  Session session = 1;
}

message EnergyStopResponse {
}

message EnergyRequest {
  Session session = 1;
  int64 start_timestamp = 2;
  int64 end_timestamp = 3;
}

message EnergySample {
  // Time when the energy sample usages occured.
  int64 timestamp = 1;
  // Sample usage data by cpu in mAh.
  int32 cpu_usage = 2;
  // Sample usage data by network in mAh.
  int32 network_usage = 3;
}

message EnergySamplesResponse {
  // List of Energy usage sample data.
  repeated EnergySample samples = 1;
}

message EnergyEventsResponse {
  // Energy event details information in time order.
  repeated EnergyEvent events = 1;
}

// Energy event data or state change for WakeLock, Alarm, etc.
message EnergyEvent {
  // Timestamp of the event in nanoseconds.
  int64 timestamp = 1;
  // Application Id this event is associated with.
  int32 pid = 2;
  // Optional ID. If set, use to correlate two related events together. Will be
  // unique only to an app.
  int32 event_id = 3;
  // ID to fetch a code stack trace for where this event was generated
  // Use with |ProfilerService.GetBytes|
  string trace_id = 4;

  // Metadata for this specific event. Additionally, use
  // |EnergyEvent.metadata_case()| as a way to see what this event's type is.
  oneof metadata {
    // Note: metadata IDs start at 101, so EnergyEvent fields can be added later
    // without any concern for numbers overlapping.

    // A wake lock was acquired, forcing the device to stay awake.
    WakeLockAcquired wake_lock_acquired = 101;
    // A wake lock was released, indicating it's not needed anymore.
    WakeLockReleased wake_lock_released = 102;
    // An alarm was set.
    AlarmSet alarm_set = 103;
    // An alarm was cancelled.
    AlarmCancelled alarm_cancelled = 104;
  }
}

message WakeLockAcquired {
  enum Level {
    UNDEFINED_WAKE_LOCK_LEVEL = 0;
    PARTIAL_WAKE_LOCK = 1;
    SCREEN_DIM_WAKE_LOCK = 2;
    SCREEN_BRIGHT_WAKE_LOCK = 3;
    FULL_WAKE_LOCK = 4;
    PROXIMITY_SCREEN_OFF_WAKE_LOCK = 5;
  }

  enum CreationFlag {
    UNDEFINED_WAKE_LOCK_CREATION_FLAG = 0;
    ACQUIRE_CAUSES_WAKEUP = 1;
    ON_AFTER_RELEASE = 2;
  }

  // Level for the wake lock instance initialization.
  // https://developer.android.com/reference/android/os/PowerManager.html#newWakeLock(int, java.lang.String)
  Level level = 1;
  // Optional flags for the wake lock instance initialization, empty if no flag
  // is set.
  repeated CreationFlag flags = 2;
  // Tag of the wake lock (which users may have set for debugging purposes).
  string tag = 3;
  // An optional timeout in milliseconds given to the acquire call. The lock
  // will be released after the given timeout expires.
  int64 timeout = 4;
}

message WakeLockReleased {
  enum ReleaseFlag {
    UNDEFINED_WAKE_LOCK_RELEASE_FLAG = 0;
    RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY = 1;
  }

  // Optional flags that modify the release behavior, empty if no flag is set.
  // https://developer.android.com/reference/android/os/PowerManager.WakeLock.html#release(int)
  repeated ReleaseFlag flags = 1;
  // True if the wake lock is still held after the release. This may happen if
  // the wake lock is reference counted and has been acquired multiple times.
  bool is_held = 2;
}

message AlarmSet {
  enum Type {
    UNDEFINED_ALARM_TYPE = 0;
    RTC = 1;
    RTC_WAKEUP = 2;
    ELAPSED_REALTIME = 3;
    ELAPSED_REALTIME_WAKEUP = 4;
  }

  // Type of alarm.
  Type type = 1;
  // Time in milliseconds that the alarm should go off, using the appropriate
  // clock (depending on the alarm type). Used by all AlarmManager.set*()
  // methods.
  int64 trigger_ms = 2;
  // The length of the requested delivery window, in milliseconds. The alarm
  // will be delivered no later than this many milliseconds after trigger_ms.
  // Used by AlarmManager.setWindow().
  int64 window_ms = 3;
  // Interval in milliseconds between subsequent repeats of the alarm. Used by
  // AlarmManager.setRepeating() and AlarmManager.setInexactRepeating().
  int64 interval_ms = 4;
  oneof action {
    // Metadata of the action to perform when the alarm goes off.
    PendingIntent operation = 5;
    // Metadata of the alarm listener whose onAlarm() method will be called when
    // the alarm goes off.
    AlarmListener listener = 6;
  }
}

message AlarmCancelled {
  oneof action {
    // A previously set operation.
    PendingIntent operation = 1;
    // A previously set listener.
    AlarmListener listener = 2;
  }
}

message PendingIntent {
  // The package name of the PendingIntent, or empty if there is none
  // associated with it.
  string creator_package = 1;
  // The uid of the PendingIntent, or -1 if there is none associated with it.
  int32 creator_uid = 2;
}

message AlarmListener {
  // String describing the alarm listener, used for logging and battery-use
  // attribution.
  string listener_tag = 1;
}
