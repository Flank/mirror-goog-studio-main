/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package profiler.proto;
option java_package = "com.android.tools.profiler.proto";
option java_outer_classname = "MemoryProfiler";

import "profiler.proto";

service MemoryService {
  rpc StartMonitoringApp(MemoryStartRequest) returns (MemoryStartResponse) {
  }
  rpc StopMonitoringApp(MemoryStopRequest) returns (MemoryStopResponse) {
  }
  rpc GetData(MemoryRequest) returns (MemoryData) {
  }
  rpc TriggerHeapDump(TriggerHeapDumpRequest) returns (TriggerHeapDumpResponse) {
  }
  rpc GetHeapDump(DumpDataRequest) returns (DumpDataResponse) {
  }
  rpc ListHeapDumpInfos(ListDumpInfosRequest) returns (ListHeapDumpInfosResponse) {
  }
  rpc TrackAllocations(TrackAllocationsRequest)
      returns (TrackAllocationsResponse) {}

  // Returns all allocation data associated with a allocation tracking session.
  // e.g. alloc events, class + stack pool
  // TODO implement streaming version for jvmti.
  rpc GetAllocationEvents(AllocationEventsRequest)
      returns (AllocationEventsResponse) {}

  rpc ListAllocationContexts(AllocationContextsRequest)
      returns (AllocationContextsResponse) {}

  // Used by perfd-host only for exporting legacy tracking data.
  rpc GetAllocationDump(DumpDataRequest) returns (DumpDataResponse) {}
}

message MemoryStartRequest {
  int32 process_id = 1;
  Session session = 2;
}

message MemoryStartResponse {
  enum Status {
    UNSPECIFICED = 0;
    SUCCESS = 1;
    FAILURE_UNKNOWN = 2;
  }
  Status status = 1;
}

message MemoryStopRequest {
  int32 process_id = 1;
  Session session = 2;
}

message MemoryStopResponse {
  enum Status {
    UNSPECIFICED = 0;
    SUCCESS = 1;
    FAILURE_UNKNOWN = 2;
  }
  Status status = 1;
}

message MemoryRequest {
  int32 process_id = 1;
  Session session = 2;
  int64 start_time = 3;  // exclusive
  int64 end_time = 4;    // inclusive
}

// A HeapDumpInfo is returned if either the start_time or end_time falls
// within the MemoryRequest time window.
// e.g. An info can be returned across multiple requests:
// 1. When a heap dump is first triggered with start_time specified.
// 2. When the heap dump completes/fails with end_time specified.
//
// It is the responsibility of the requester to dedupe a completed info if
// there was an unfinished info that was previously sent.
message HeapDumpInfo {
  int64 start_time = 1;
  int64 end_time = 2;
  string file_path = 3;
  bool success = 4;
}

message MemoryData {
  message MemorySample {
    int64 timestamp = 1;
    int64 java_mem = 2;
    int64 native_mem = 3;
    int64 stack_mem = 4;
    int64 graphics_mem = 5;
    int64 code_mem = 6;
    int64 others_mem = 7;
    int64 total_mem = 8;
  }

  message VmStatsSample {
    int64 timestamp = 1;
    int32 java_allocation_count = 2;
    int32 java_free_count = 3;
    int32 gc_count = 4;
  }

  // end timestamp after which values are yet to be queried for
  int64 end_timestamp = 1;
  repeated MemorySample mem_samples = 2;
  repeated VmStatsSample vm_stats_samples = 3;
  repeated HeapDumpInfo heap_dump_infos = 4;
  repeated AllocationsInfo allocations_info = 5;
}

message ListDumpInfosRequest {
  int32 process_id = 1;
  Session session = 2;
  int64 start_time = 3;  // exclusive
  int64 end_time = 4;    // inclusive
}

message DumpDataRequest {
  int32 process_id = 1;
  Session session = 2;
  int64 dump_time = 3;
}

message DumpDataResponse {
  enum Status {
    UNSPECIFIED = 0;
    SUCCESS = 1;
    NOT_READY = 2;
    NOT_FOUND = 3;
    FAILURE_UNKNOWN = 4;
  }
  Status status = 1;
  bytes data = 2;
}

message TriggerHeapDumpRequest {
  int32 process_id = 1;
  Session session = 2;
  int64 request_time = 3;
}

message TriggerHeapDumpResponse {
  enum Status {
    UNSPECIFIED = 0;
    SUCCESS = 1;
    IN_PROGRESS = 2;
    FAILURE_UNKNOWN = 3;
  }
  Status status = 1;
  // Returns the HeapDumpInfo immediately so the caller can
  // optionally track its completion
  HeapDumpInfo info = 2;
}

message ListHeapDumpInfosResponse {
  repeated HeapDumpInfo infos = 1;
}

message AllocationsInfo {
  enum Status {
    UNSPECIFIED = 0;
    IN_PROGRESS = 1;
    COMPLETED = 2;
    FAILURE_UNKNOWN = 3;
  }

  Status status = 1;
  int64 start_time = 2;
  int64 end_time = 3;
  bool legacy = 4;
}

message TrackAllocationsResponse {
  enum Status {
    UNSPECIFIED = 0;
    SUCCESS = 1;
    IN_PROGRESS = 2;
    NOT_ENABLED = 3;
    FAILURE_UNKNOWN = 4;
  }
  Status status = 1;
  AllocationsInfo info = 2;
}

message TrackAllocationsRequest {
  int32 process_id = 1;
  Session session = 2;
  int64 request_time = 3;
  // Requests whether an allocation tracking session is
  // to be enabled/disabled. If a session is already in
  // progress, re-enabling it does nothing, this is also
  // true for disabling a session when no tracking is in
  // progress.
  bool enabled = 4;
  // A flag to indicate whether the request is initiated
  // via the legacy allocation tracking path. On pre-O
  // setups, legacy tracking would simply mark the start
  // and end times of a session. On O+ setups, perfd +
  // perfa would perform allocation tracking.
  bool legacy = 5;
}

message AllocationEventsRequest {
  int32 process_id = 1;
  Session session = 2;
  int64 start_time = 3; // exclusive
  int64 end_time = 4;   // inclusive
}

message AllocationEventsResponse {
  enum Status {
    UNSPECIFIED = 0;
    SUCCESS = 1;
    NOT_READY = 2;
    NOT_FOUND = 3;
    FAILURE_UNKNOWN = 4;
  }
  Status status = 1;
  repeated AllocationEvent events = 2;
}

message AllocationEvent {
  // tracking_start_time associates an event with a
  // particular tracking session.
  // TODO: include endTime for de-allocation tracking
  int64 tracking_start_time = 1;
  int64 timestamp = 2;
  int32 size = 3;
  int32 threadId = 4;
  int32 allocatedClassId = 5;
  bytes allocationStackId = 6;
}

message AllocationContextsRequest {
  int32 process_id = 1;
  Session session = 2;
  repeated int32 classIds = 3;
  repeated bytes stackIds = 4;
}

message AllocationContextsResponse {
  repeated AllocatedClass allocated_classes = 1;
  repeated AllocationStack allocation_stacks = 2;
}

message AllocatedClass {
  int32 classId = 1;
  string className = 2;
}

message AllocationStack {
  message StackFrame {
    string className = 1;
    string methodName = 2;
    string fileName = 3;
    int32 lineNumber = 4;
  }

  bytes stackId = 1;
  repeated StackFrame stackFrames = 2;
}
