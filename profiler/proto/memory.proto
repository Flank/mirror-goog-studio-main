/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package profiler.proto;
option java_package = "com.android.tools.profiler.proto";
option java_outer_classname = "MemoryProfiler";

service MemoryService {
  rpc StartMonitoringApp(MemoryStartRequest) returns (MemoryStartResponse) {
  }
  rpc StopMonitoringApp(MemoryStopRequest) returns (MemoryStopResponse) {
  }
  rpc SetMemoryConfig(MemoryConfig) returns (MemoryStatus) {
  }
  rpc GetData(MemoryRequest) returns (MemoryData) {
  }
  rpc TriggerHeapDump(HeapDumpRequest) returns (HeapDumpResponse) {
  }
  rpc GetHeapDump(HeapDumpDataRequest) returns (HeapDumpDataResponse) {
  }
}

message MemoryStartRequest {
  int32 app_id = 1;
}

message MemoryStartResponse {
  enum Status {
    UNSPECIFICED = 0;
    SUCCESS = 1;
    FAILURE_UNKNOWN = 2;
  }
  Status status = 1;
}

message MemoryStopRequest {
  int32 app_id = 1;
}

message MemoryStopResponse {
  enum Status {
    UNSPECIFICED = 0;
    SUCCESS = 1;
    FAILURE_UNKNOWN = 2;
  }
  Status status = 1;
}

enum MemoryFeature {
  UNSPECIFIED = 0;
  MEMORY_LEVELS = 1;
}

message MemoryConfig {
  message Option {
    MemoryFeature feature = 1;
    bool enabled = 2;
  }

  int32 app_id = 1;
  repeated Option options = 2;
}

message MemoryStatus {
  int64 status_timestamp = 2;
}

message MemoryRequest {
  int32 app_id = 1;
  int64 start_time = 2;  // exclusive
  int64 end_time = 3;    // inclusive
}

message MemoryData {
  message MemorySample {
    int64 timestamp = 1;
    int64 java_mem = 2;
    int64 native_mem = 3;
    int64 stack_mem = 4;
    int64 graphics_mem = 5;
    int64 code_mem = 6;
    int64 others_mem = 7;
    int64 total_mem = 8;
  }

  message VmStatsSample {
    int64 timestamp = 1;
    int32 java_allocation_count = 2;
    int32 java_free_count = 3;
    int32 gc_count = 4;
  }

  // A HeapDumpSample is returned if either the start_time or end_time falls
  // within the MemoryRequest time window.
  // e.g. A sample can be returned across multiple requests:
  // 1. When a heap dump is first triggered with start_time specified.
  // 2. When the heap dump completes/fails with end_time specified.
  //
  // It is the responsibility of the requester to dedupe a completed sample if
  // there was an unfinished sample that was previously sent.
  message HeapDumpSample {
    int64 start_time = 1;
    int64 end_time = 2;
    int32 dump_id = 3;
    string file_path = 4;
    bool success = 5;
  }

  // end timestamp after which values are yet to be queried for
  int64 end_timestamp = 1;
  repeated MemorySample mem_samples = 2;
  repeated VmStatsSample vm_stats_samples = 3;
  repeated HeapDumpSample heap_dump_samples = 4;
}

message HeapDumpRequest {
  int32 app_id = 1;
  int64 request_time = 2;
}

message HeapDumpResponse {
  enum Status {
    UNSPECIFIED = 0;
    SUCCESS = 1;
    IN_PROGRESS = 2;
    FAILURE_UNKNOWN = 3;
  }
  Status status = 1;
}

message HeapDumpDataRequest {
  int32 app_id = 1;
  int32 dump_id = 2;
}

message HeapDumpDataResponse {
  enum Status {
    UNSPECIFIED = 0;
    SUCCESS = 1;
    NOT_READY = 2;
    NOT_FOUND = 3;
    FAILURE_UNKNOWN = 4;
  }
  Status status = 1;
  bytes data = 2;
}