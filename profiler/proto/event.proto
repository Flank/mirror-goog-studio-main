/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package profiler.proto;
option java_package = "com.android.tools.profiler.proto";
option java_outer_classname = "EventProfiler";

import "profiler.proto";

service EventService {
  // Requests profiler data from the app with ID being |app_id|, in the time range
  // from |start_timestamp| (exclusive) to |end_timestamp| (inclusive), or
  // mathematically written as in interval (start_timestamp, end_timestamp].
  rpc GetData(EventDataRequest) returns (EventDataResponse) {
  }
}

message EventProfilerData {
  CommonData basic_info = 1;
  oneof data {
    SystemEventData system_data = 2;
    FragmentEventData fragment_data = 3;
    ActivityEventData activity_data = 4;
  }
}

// TODO: Add support for KeyEvents, and ButtonEvents. The current setup allows
// for only touch.
message SystemEventData {
  // Each system event message is associated with one event type.
  enum SystemEventType {
    UNSPECIFIED = 0;
    TOUCH = 1;
    KEY = 2;
    ROTATION = 3;
  }

  SystemEventType type = 1;
  // This field stores actions triggered by an event. Actions are
  // defined in MotionEvent.java.
  // https://developer.android.com/reference/android/view/MotionEvent.html
  int32 action_id = 2;
}

message ActivityEventData {
  enum ActivityState {
    UNSPECIFIED = 0;
    // State when an activity gets created
    CREATED = 1;
    STARTED = 2;
    RESUMED = 3;
    PAUSED = 4;
    STOPPED = 5;
    SAVED = 6;
    // Event to fire when an activity gets destroyed
    DESTROYED = 7;
    RESTARTED = 8;
    // TODO: Flush this out to map the activity lifecycle.
  }

  string name = 1;
  ActivityState activity_state = 2;

  // Hash code to uniquely identify this activity.
  int32 activity_hash = 3;
}

message FragmentEventData {
  // The current state of a fragment.
  enum FragmentState {
    UNSPECIFIED = 0;
    ADDED = 1;
    REMOVED = 2;
    ATTACHED = 3;
    CREATED= 4;
    CREATEDVIEW = 5;
    ACTIVITYCREATED = 6;
    STARTED = 7;
    RESUMED = 8;
    PAUSED = 9;
    STOPPED = 10;
    DESTROYEDVIEW = 11;
    DESTROYED = 12;
    DETACHED = 13;
  }
  string name = 1;
  FragmentState fragment_state = 2;

  // Hash code to uniquely identify this fragment.
  int32 fragment_hash = 3;
}

message EventDataRequest {
  enum EventType {
    UNSPECIFIED = 0;
    // All types of data are requested.
    ALL = 1;
    // All system level events, touch, rotate, button presses ect...
    SYSTEM_EVENTS = 2;
    // All activity level events, created, activated, resumed, suspended ect...
    ACTIVITY_EVENTS = 3;
    // All fragment events
    FRAGMENT_EVENTS = 4;
  }
  int32 app_id = 1;
  int64 start_timestamp = 2;
  int64 end_timestamp = 3;
  EventType data_type = 4;
}

message EventDataResponse {
  repeated EventProfilerData data = 1;
}
