/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package profiler.proto;
option java_package = "com.android.tools.profiler.proto";
option java_outer_classname = "Profiler";

import "common.proto";

service ProfilerService {
  // Gets current timestamp that used in the device's profiling data.
  // A client may use this API to relate profiling data' timestamps to other
  // clocks such as the desktop's calendar time.
  // TODO(b/29223899): Add device's calendar time.
  rpc GetCurrentTime(TimeRequest) returns (TimeResponse) {
  }

  // Gets version.
  rpc GetVersion(VersionRequest) returns (VersionResponse) {
  }

  // Gets the currently connected devices.
  // TODO: expand with timing information for historical requests.
  rpc GetDevices(GetDevicesRequest) returns (GetDevicesResponse) {
  }

  // Gets the running processes of a given device
  // TODO expand with timing information for historical requests.
  rpc GetProcesses(GetProcessesRequest) returns (GetProcessesResponse) {
  }

  // Query for cached byte data associated with some ID. Other services may
  // return an ID which can be used to fetch data using this central cache.
  rpc GetBytes(BytesRequest) returns (BytesResponse) {
  }

  // Query for whether the agent is alive.
  rpc GetAgentStatus(AgentStatusRequest) returns (AgentStatusResponse) {
  }

  // Makes all necessary configurations needed for attaching agent on startup.
  // Returns |agent_args| to be used with the application launch command,
  // e.g "am start --attach-agent |agent_args|".
  rpc ConfigureStartupAgent(ConfigureStartupAgentRequest) returns (ConfigureStartupAgentResponse) {
  }

  // Start a new session. As a side effect, this also starts all profilers for
  // the PID being targeted by this session.
  // If a session with the same PID is already running, this method will
  // essentially be a no-op (except it will move the session to the top of the
  // sorted-by-recency list).
  rpc BeginSession(BeginSessionRequest) returns (BeginSessionResponse) {
  }

  // Stop a target session (if currently running). As a side effect,
  // this also stops all profilers for the PID being targeted by this session.
  rpc EndSession(EndSessionRequest) returns (EndSessionResponse) {
  }

  // Request a session by ID.
  rpc GetSession(GetSessionRequest) returns (GetSessionResponse) {
  }

  // Request a session's meta data by ID.
  // Metadatas are only used on Studio-side to retrieve display-related info.
  rpc GetSessionMetaData(GetSessionMetaDataRequest)
    returns (GetSessionMetaDataResponse) {}

  // Requests all sessions in the time range from |start_timestamp| (exclusive)
  // to |end_timestamp| (inclusive), or mathematically written as the interval
  // (start_timestamp, end_timestamp]. Results will be returned ordered by
  // recency (most recent first).
  rpc GetSessions(GetSessionsRequest) returns (GetSessionsResponse) {
  }

  // Delete a session by ID. If it is currently running, |EndSession| will
  // automatically be called on it.
  rpc DeleteSession(DeleteSessionRequest) returns (DeleteSessionResponse) {
  }
}

message TimeRequest {
  int64 device_id = 1;
}

message TimeResponse {
  // What's used as timestamps in all profiler data (unless otherwise specified).
  // (a.k.a: Timestamp from clock_gettime(CLOCK_MONOTONIC, ...), ns precision.)
  int64 timestamp_ns = 1;

  // The number of microseconds since the Epoch.
  // (a.k.a: Timestamp from gettimeofday, us precision.)
  int64 epoch_timestamp_us = 2;
}

message VersionRequest {
  int64 device_id = 1;
}

message VersionResponse {
  string version = 1;
}

message GetDevicesRequest {
}

message GetDevicesResponse {
  repeated Device device = 1;
}

message GetProcessesRequest {
  int64 device_id = 1;
}

message GetProcessesResponse {
  repeated Process process = 2;
}

message ConfigureStartupAgentRequest {
  string app_package_name = 1;
  string agent_lib_file_name = 2;
  int64 device_id = 3;
}

message ConfigureStartupAgentResponse {
  string agent_args = 1;
}

message BeginSessionRequest {
  message JvmtiConfig {
    // True if an jvmti agent should be attached, false otherwise.
    bool attach_agent = 1;
    // TODO(b/65458869): Remove when moving process discovery to perfd.
    string agent_lib_file_name = 2;
  }

  int64 device_id = 1;
  int32 pid = 2;
  JvmtiConfig jvmti_config = 3;
  int64 request_time_epoch_ms = 4;
  string session_name = 5;
}

message BeginSessionResponse {
  Session session = 1;
}

message EndSessionRequest {
  int64 session_id = 1;
  // TODO remove when device_id can be queried from
  // session_id on Studio-side.
  int64 device_id = 2;
}

message EndSessionResponse {
  Session session = 1;
}

message GetSessionRequest {
  int64 session_id = 1;
}

message GetSessionResponse {
  // Will not be set if no session with a matching ID was found.
  Session session = 1;
}

message GetSessionMetaDataRequest {
  // This is expected to be a valid session's id, otherwise a
  // a default GetSessionMetaDataResponse instance will be returned.
  int64 session_id = 1;
}

message GetSessionMetaDataResponse {
  SessionMetaData data = 1;
}

message GetSessionsRequest {
  int64 start_timestamp = 1;
  int64 end_timestamp = 2;
}

message GetSessionsResponse {
  repeated Session sessions = 1;
}

message DeleteSessionRequest {
  int64 session_id = 1;
}

message DeleteSessionResponse {
}


message BytesRequest {
  // ID for fetching contents from a cache. The value will always be safe to use
  // as a filename, if you want to cache the contents locally to disk for
  // example.
  string id = 1;
  Session session = 2;
}

message BytesResponse {
  // Byte contents from a cache, or "" if no data was found associated with the
  // cache key used to fetch it, or if the data was removed after some timeout.
  bytes contents = 1;
}

message AgentStatusRequest {
  int64 device_id = 1;
  int32 pid = 2;
}

message AgentStatusResponse {
  enum Status {
    UNSPECIFIED = 0;
    ATTACHED = 1;
    DETACHED = 2;
  }
  Status status = 1;
  // The last time a heartbeat was received from the requested agent.
  // If no heartbeat was ever detected, this returns INT64_MIN.
  int64 last_timestamp = 2;
}