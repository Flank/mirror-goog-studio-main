subprojects {
  buildDir = "$rootDir/../../../out/studio/$project.name"
  repositories {
    maven { url = "$rootDir/../../../prebuilts/tools/common/m2/repository" }
  }
}

class CMakeClosureDelegate {
    String[] abis = [];
    String name;
    String projectDir;
    String[] flags = []

    def abis(String[] value) { abis = value; }
    def name(String value) { name = value; }
    def projectDir(String value) { projectDir = value; }
    def flags(String[] value) { flags = value}
}


def cmake(cl) {
    CMakeClosureDelegate data = new CMakeClosureDelegate();
    cl.delegate = data;
    cl.call();
    def os = System.getProperty("os.name").toLowerCase();
    if (os.startsWith("windows")) {
      // TODO Add windows compilation support.
      throw new GradleException('Windwows CMake invokation is not yet supported.')
    }
    def host = os.startsWith("linux") ? "linux" : "darwin"
    def jdkHost = os.startsWith("linux") ? "linux" : "mac"

    if (data.abis.size() == 0) {
        // Building for the host
        // TODO: Use a toolchain file to set up the compilers and flags
        def jdk = "$rootDir/../../../prebuilts/studio/jdk/$jdkHost/Contents/Home"
        def flags = [
            "-DCMAKE_CXX_FLAGS=-I$jdk/include -I$jdk/include/$host",
            "-DCMAKE_C_FLAGS=-I$jdk/include -I$jdk/include/$host"
        ]
        createTasks(data, "Host", "host", cl.owner, flags, host);
    } else {
        // Building multiple abis for android
        def configure = cl.owner.tasks.create(name: "configure" + data.name.capitalize(), group: "Native build", type: DefaultTask) {}
        def precompile = cl.owner.tasks.create(name: "precompile" + data.name.capitalize(), group: "Native build", type: DefaultTask) {}
        def compile = cl.owner.tasks.create(name: "compile" + data.name.capitalize(), group: "Native build", type: DefaultTask) {}
        def check = cl.owner.tasks.create(name: "check" + data.name.capitalize(), group: "Native build", type: DefaultTask) {}

        data.abis.each { abi ->
            // ABI names contain "-" which do not work well as task names.
            // Remove them and capitalize instead.
            def normAbi = abi.split("-").collect { it.capitalize() }.join()
            def name = data.name.capitalize() + normAbi;
            def flags = [
                "-DCMAKE_TOOLCHAIN_FILE=$rootDir/native/cmake/Android.cmake",
                "-DABI=$abi"
            ]
            createTasks(data, name, abi, cl.owner, flags, host); 
            configure.dependsOn cl.owner.tasks.("configure" + name)
            compile.dependsOn cl.owner.tasks.("compile" + name)
            check.dependsOn cl.owner.tasks.("check" + name)

            cl.owner.tasks.("compile" + name).dependsOn precompile
        }
    }
}

def createTasks(data, name, dir, project, flags, host) {
  def cmakeBuildDir = "$rootDir/../../../out/studio/${project.name}"
  def gen = "$cmakeBuildDir/gen/$dir";
  def out = "$cmakeBuildDir/out/$dir";

  // TODO: Define different tasks for debug and release and specify
  // -DCMAKE_BUILD_TYPE=[Debug|Release|MinSizeRel]
  def configureAbi = project.tasks.create(name: "configure" + name, type: Exec) {
      doFirst {
          file(gen).deleteDir();
          file(gen).mkdirs();
      }
      workingDir gen
      executable "$rootDir/../../../prebuilts/cmake/$host-x86/bin/cmake"
      args = ["-G", "Ninja", data.projectDir,
          "-DCMAKE_MAKE_PROGRAM=$rootDir/../../../prebuilts/ninja/$host-x86/ninja",
          "-DCMAKE_RUNTIME_OUTPUT_DIRECTORY=$out",
          "-DGO_EXECUTABLE=$rootDir/../../../prebuilts/go/$host-x86/bin/go",
          "-DPREBUILTS=$rootDir/../../../prebuilts",
          "-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"] + flags + Arrays.asList(data.flags)
      environment GOROOT: "$rootDir/../../../prebuilts/go/$host-x86"
      inputs.file "../cmake/Android.cmake"
      outputs.dir gen
  }

  def compileAbi = project.tasks.create(name: "compile" + name, group: "Native build", type: Exec) {
      workingDir gen
      args = ["--build", "$gen"]
      executable "$rootDir/../../../prebuilts/cmake/$host-x86/bin/cmake"
      environment GOROOT: "$rootDir/../../../prebuilts/go/$host-x86"
      inputs.dir data.projectDir
      inputs.dir gen
      outputs.dir out
  }
  compileAbi.dependsOn configureAbi

  def checkAbi = project.tasks.create(name: "check" + name, group: "Native build", type: Exec) {
      workingDir gen
      args = ["--build", "$gen", "--target", "check"]
      executable "$rootDir/../../../prebuilts/cmake/$host-x86/bin/cmake"
      environment GOROOT: "$rootDir/../../../prebuilts/go/$host-x86"
      inputs.dir data.projectDir
      inputs.dir gen
  }
  checkAbi.dependsOn configureAbi
}