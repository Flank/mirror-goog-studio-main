/*
 * Copyright (C) 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package profiler.perfetto.proto;
option java_package = "com.android.tools.profiler.perfetto.proto";
option java_outer_classname = "TraceProcessor";

import "memory_data.proto";

service TraceProcessorService {

  // Request to load a trace into the daemon.
  rpc LoadTrace(LoadTraceRequest) returns (LoadTraceResponse) {}

  // Send one or more batched queries to the service.
  rpc QueryBatch(QueryBatchRequest) returns (QueryBatchResponse) {}
}

message LoadTraceRequest {
  // Unique Identifier for the trace being loaded.
  int64 trace_id = 1;

  // Absolute file path for the .trace file to be loaded and parsed.
  string trace_path = 2;
}

message LoadTraceResponse {
  // If the trace was successfully loaded.
  bool ok = 1;

  // In case the trace was not loaded correctly, this field contains
  // a string explaining the reason.
  string error = 2;

  // Available processes and threads in the trace.
  ProcessMetadataResult process_metadata = 3;
}

message QueryBatchRequest {
  // Each query request can batch multiple queries in order to avoid excesive
  // RPC overhead.
  repeated QueryParameters query = 1;
}

message QueryBatchResponse {
  // There will be one result for each QueryRequest.query received on the
  // QueryRequest msg.
  repeated QueryResult result = 1;
}

message QueryParameters {
  // Fields 1 to 100 reserved to future metadata passed on the request.

  oneof query {
    ProcessMetadataParameters process_metadata = 101;
    TraceEventsParameters trace_events_request = 102;
    SchedulingEventsParameters sched_request = 103;
    AllocationDataRequest memory_request = 104;
    CountersParameters counters_request = 105;
  }

  // Returns metadata information for a set of processes.
  // See ResultProcessMetadata for the data returned from this.
  message ProcessMetadataParameters {
    repeated int64 process_id = 1;
  }

  // Returns all the trace events for all threads part of the process_id
  // identified by process_id or for a single thread identified by thread_id.
  // See TraceEventsResult for the data returned from this.
  message TraceEventsParameters {
    oneof criteria {
      int64 process_id = 1;
      int64 thread_id = 2;
    }
  }

  // Returns all CPU scheduling events for all threads part of the process
  // identified by process_id or for a single thread identified by thread_id.
  // See SchedulingEventsResults for the data returned from this.
  message SchedulingEventsParameters {
    oneof criteria {
      int64 process_id = 1;
      int64 thread_id = 2;
    }
  }

  // Returns all process counters for the process identified by process_id.
  message CountersParameters {
    int64 process_id = 1;
  }
}

message QueryResult {
  // Fields 1 to 100 reserved to metadata returned by the query.
  string error = 1;

  // Can be set to none if the received query was invalid. In this case,
  // check the error field.
  oneof result {
    ProcessMetadataResult process_metadata = 101;
    TraceEventsResult trace_events_result = 102;
    SchedulingEventsResult sched_result = 103;
    NativeAllocationContext memory_events = 104;
    CountersResult counters_result = 105;
  }

}

message ProcessMetadataResult {
  repeated ProcessMetadata process = 1;

  message ProcessMetadata {
    int64 id = 1;
    int64 internal_id = 2;
    string name = 3;

    repeated ThreadMetadata thread = 4;
  }

  message ThreadMetadata {
    int64 id = 1;
    int64 internal_id = 2;
    string name = 3;
  }
}

message TraceEventsResult {
  repeated ThreadTraceEvents thread = 1;

  message ThreadTraceEvents {
    int64 thread_id = 1;

    // Trace Events keyed by their id, useful to reconstruct the event tree.
    // See TraceEvent.parent_id.
    repeated TraceEvent trace_event = 2;
  }

  message TraceEvent {
    // Id of this particular event.
    int64 id = 1;

    int64 timestamp_nanoseconds = 2;
    int64 duration_nanoseconds = 3;
    string name = 4;

    // The parent event of this. Will be 0 if depth = 0.
    int64 parent_id = 5;

    // The depth of this event on its event tree.
    int32 depth = 6;
  }
}

message SchedulingEventsResult {
  // List of scheduling events, ordered by thread_id and increasing timestamp.
  repeated SchedulingEvent sched_event = 1;

  // How many cores the device has.
  int32 num_cores = 2;

  message SchedulingEvent {
    int64 thread_id = 1;
    // In which cpu core the event happened.
    // Will be in [0, num_cores).
    int32 cpu = 2;

    // The timestamp in nanoseconds of when this event happened.
    int64 timestamp_nanoseconds = 3;
    // For how long the thread stayed in this state.
    int64 duration_nanoseconds = 4;

    SchedulingState state = 5;
    int32 priority = 6;

    enum SchedulingState {
      UNKNOWN = 0;
      RUNNING = 1;
      RUNNING_FOREGROUND = 2;
      SLEEPING = 3;
      SLEEPING_UNINTERRUPTIBLE = 4;
      DEAD = 5;
    }
  }

}

message CountersResult {
  // The id of the process from which these counters belongs to.
  int64 process_id = 1;

  // List of counters.
  repeated Counter counter = 2;

  message Counter {
    // The counter name.
    string name = 1;

    // All entries of this counter, with associated timestamps.
    repeated CounterValue value = 2;
  }

  message CounterValue {
    int64 timestamp_nanoseconds = 1;
    double value = 2;
  }
}
