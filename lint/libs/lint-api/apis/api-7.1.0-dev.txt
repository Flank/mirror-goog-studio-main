// Signature format: 4.0
package com.android.tools.lint.client.api {

  public final class AndroidPlatformAnnotations implements org.jetbrains.uast.UAnnotation {
    ctor public AndroidPlatformAnnotations(String qualifiedName, org.jetbrains.uast.UAnnotation delegate);
    method public String getQualifiedName();
    method public static boolean isPlatformAnnotation(String qualifiedName);
    method public static String toAndroidxAnnotation(String qualifiedName);
    method public static String toPlatformAnnotation(String qualifiedName);
    property public String qualifiedName;
    field public static final String ANDROIDX_ANNOTATIONS_PREFIX = "androidx.annotation.";
    field public static final com.android.tools.lint.client.api.AndroidPlatformAnnotations.Companion Companion;
    field public static final String PLATFORM_ANNOTATIONS_PREFIX = "android.annotation.";
  }

  public static final class AndroidPlatformAnnotations.Companion {
    method public org.jetbrains.uast.UAnnotation fromPlatformAnnotation(org.jetbrains.uast.UAnnotation, optional String? signature);
    method public org.jetbrains.uast.UAnnotation fromPlatformAnnotation(com.intellij.psi.PsiAnnotation, optional String? signature);
    method public boolean isPlatformAnnotation(String qualifiedName);
    method public String toAndroidxAnnotation(String qualifiedName);
    method public String toPlatformAnnotation(String qualifiedName);
  }

  public final class AnnotationLookup {
    ctor public AnnotationLookup();
    method public org.jetbrains.uast.UAnnotation findRealAnnotation(com.intellij.psi.PsiAnnotation annotation, com.intellij.psi.PsiClass resolved, optional org.jetbrains.uast.UElement? context);
  }

  public final class BlameFile {
    method public com.android.utils.Pair<java.io.File,? extends org.w3c.dom.Node>? findSourceAttribute(com.android.tools.lint.client.api.LintClient client, org.w3c.dom.Attr attr);
    method public com.android.utils.Pair<java.io.File,org.w3c.dom.Node>? findSourceElement(com.android.tools.lint.client.api.LintClient client, org.w3c.dom.Element element);
    method public com.android.utils.Pair<java.io.File,? extends org.w3c.dom.Node>? findSourceNode(com.android.tools.lint.client.api.LintClient client, org.w3c.dom.Node node);
    field public static final com.android.tools.lint.client.api.BlameFile.Companion Companion;
  }

  public static final class BlameFile.Companion {
    method public com.android.tools.lint.client.api.BlameFile getNONE();
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public com.android.tools.lint.client.api.BlameFile parse(java.io.File file) throws java.io.IOException;
    method public com.android.tools.lint.client.api.BlameFile parse(com.android.manifmerger.Actions mergerActions);
    method public com.android.tools.lint.client.api.BlameFile parse(java.util.List<java.lang.String> lines);
    property public final com.android.tools.lint.client.api.BlameFile NONE;
  }

  public abstract static class BlameFile.XmlVisitor {
    ctor public BlameFile.XmlVisitor();
    method public boolean visitAttribute(org.w3c.dom.Attr attribute);
    method public boolean visitTag(org.w3c.dom.Element element, String tag);
    field public static final com.android.tools.lint.client.api.BlameFile.XmlVisitor.Companion Companion;
  }

  public static final class BlameFile.XmlVisitor.Companion {
    method public void accept(org.w3c.dom.Node node, com.android.tools.lint.client.api.BlameFile.XmlVisitor visitor);
  }

  @com.google.common.annotations.Beta public class CircularDependencyException extends java.lang.RuntimeException {
    ctor public CircularDependencyException(String);
    method public com.android.tools.lint.detector.api.Location? getLocation();
    method public com.android.tools.lint.detector.api.Project? getProject();
    method public void setLocation(com.android.tools.lint.detector.api.Location?);
    method public void setProject(com.android.tools.lint.detector.api.Project?);
  }

  public class CompositeIssueRegistry extends com.android.tools.lint.client.api.IssueRegistry {
    ctor public CompositeIssueRegistry(java.util.List<? extends com.android.tools.lint.client.api.IssueRegistry> registries);
    method public java.util.List<com.android.tools.lint.detector.api.Issue> getIssues();
    property public int api;
    property public java.util.List<java.lang.String> deletedIssues;
    property public boolean isUpToDate;
    property public java.util.List<com.android.tools.lint.detector.api.Issue> issues;
  }

  @com.google.common.annotations.Beta public abstract class Configuration {
    ctor public Configuration(com.android.tools.lint.client.api.ConfigurationHierarchy configurations);
    method public abstract void addConfiguredIssues(java.util.Map<java.lang.String,com.android.tools.lint.detector.api.Severity> targetMap, com.android.tools.lint.client.api.IssueRegistry registry, boolean specificOnly);
    method public void finishBulkEditing();
    method public abstract java.io.File? getBaselineFile();
    method public final com.android.tools.lint.client.api.LintClient getClient();
    method public final com.android.tools.lint.client.api.ConfigurationHierarchy getConfigurations();
    method public final java.util.Map<java.lang.String,com.android.tools.lint.detector.api.Severity> getConfiguredIssues(com.android.tools.lint.client.api.IssueRegistry registry, boolean specificOnly);
    method protected com.android.tools.lint.detector.api.Severity getDefaultSeverity(com.android.tools.lint.detector.api.Issue issue, optional com.android.tools.lint.detector.api.Severity visibleDefault);
    method public com.android.tools.lint.detector.api.Severity? getDefinedSeverity(com.android.tools.lint.detector.api.Issue issue, optional com.android.tools.lint.client.api.Configuration source, optional com.android.tools.lint.detector.api.Severity visibleDefault);
    method public final java.io.File? getDir();
    method public boolean getFileLevel();
    method public final com.android.tools.lint.detector.api.Location? getIssueConfigLocation(String issue, optional boolean specificOnly, optional boolean severityOnly);
    method public java.util.List<java.io.File> getLintJars();
    method public com.android.tools.lint.detector.api.Location? getLocalIssueConfigLocation(String issue, optional boolean specificOnly, optional boolean severityOnly, optional com.android.tools.lint.client.api.Configuration source);
    method public String? getOption(com.android.tools.lint.detector.api.Issue issue, String name, optional String? default);
    method public final boolean getOptionAsBoolean(com.android.tools.lint.detector.api.Issue issue, String name, boolean default);
    method public java.io.File? getOptionAsFile(com.android.tools.lint.detector.api.Issue issue, String name, optional java.io.File? default);
    method public final int getOptionAsInt(com.android.tools.lint.detector.api.Issue issue, String name, int default);
    method protected final com.android.tools.lint.client.api.Configuration? getOverrides();
    method public final com.android.tools.lint.client.api.Configuration? getParent();
    method public final com.android.tools.lint.detector.api.Severity getSeverity(com.android.tools.lint.detector.api.Issue issue);
    method public abstract void ignore(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Location? location, String message);
    method public abstract void ignore(com.android.tools.lint.detector.api.Issue issue, java.io.File file);
    method public abstract void ignore(String issueId, java.io.File file);
    method public boolean isEnabled(com.android.tools.lint.detector.api.Issue issue);
    method @Deprecated public final boolean isIgnored(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Location? location, String message);
    method public boolean isIgnored(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Incident incident);
    method public final boolean isOverriding();
    method protected final void reportNonExistingIssueId(com.android.tools.lint.client.api.LintClient client, com.android.tools.lint.client.api.LintDriver? driver, com.android.tools.lint.client.api.IssueRegistry issueRegistry, com.android.tools.lint.detector.api.Project? project, String id);
    method public abstract void setBaselineFile(java.io.File? baselineFile);
    method public final void setDir(java.io.File? dir);
    method public void setFileLevel(boolean fileLevel);
    method public final void setOverriding(boolean isOverriding);
    method public final void setParent(com.android.tools.lint.client.api.Configuration parent);
    method public abstract void setSeverity(com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Severity? severity);
    method public void startBulkEditing();
    method public void validateIssueIds(com.android.tools.lint.client.api.LintClient client, com.android.tools.lint.client.api.LintDriver driver, com.android.tools.lint.detector.api.Project? project, com.android.tools.lint.client.api.IssueRegistry registry);
    property public abstract java.io.File? baselineFile;
    property public final com.android.tools.lint.client.api.LintClient client;
    property public final com.android.tools.lint.client.api.ConfigurationHierarchy configurations;
    property public final java.io.File? dir;
    property public boolean fileLevel;
    property public final boolean isOverriding;
    property protected final com.android.tools.lint.client.api.Configuration? overrides;
    property public final com.android.tools.lint.client.api.Configuration? parent;
    field public static final com.android.tools.lint.client.api.Configuration.Companion Companion;
  }

  public static final class Configuration.Companion {
    method public String getUnknownIssueIdErrorMessage(String id, com.android.tools.lint.client.api.IssueRegistry issueRegistry);
  }

  public class ConfigurationHierarchy {
    ctor public ConfigurationHierarchy(com.android.tools.lint.client.api.LintClient client, optional java.io.File? rootDir);
    method public final void addGlobalConfigurationFromFile(optional java.io.File? fallback, optional com.android.tools.lint.client.api.Configuration? override);
    method public final void addGlobalConfigurations(optional com.android.tools.lint.client.api.Configuration? fallback, optional com.android.tools.lint.client.api.Configuration? override);
    method public final com.android.tools.lint.client.api.Configuration createChainedConfigurations(com.android.tools.lint.detector.api.Project project, com.android.tools.lint.client.api.Configuration? middle, kotlin.jvm.functions.Function0<? extends com.android.tools.lint.client.api.Configuration> createFirst, optional kotlin.jvm.functions.Function0<? extends com.android.tools.lint.client.api.Configuration> createLast);
    method public final com.android.tools.lint.client.api.Configuration createLintOptionsConfiguration(com.android.tools.lint.detector.api.Project project, com.android.tools.lint.model.LintModelLintOptions lintOptions, boolean fatalOnly, com.android.tools.lint.client.api.Configuration? default, optional kotlin.jvm.functions.Function0<? extends com.android.tools.lint.client.api.LintOptionsConfiguration> configFactory);
    method public final com.android.tools.lint.client.api.LintClient getClient();
    method public final com.android.tools.lint.client.api.Configuration getConfigurationForFile(java.io.File xmlFile);
    method public final com.android.tools.lint.client.api.Configuration? getConfigurationForFolder(java.io.File? dir, optional com.android.tools.lint.client.api.Configuration? default);
    method public final com.android.tools.lint.client.api.Configuration getConfigurationForProject(com.android.tools.lint.detector.api.Project project, optional kotlin.jvm.functions.Function2<? super java.io.File,? super com.android.tools.lint.client.api.Configuration,? extends com.android.tools.lint.client.api.Configuration> create);
    method public final com.android.tools.lint.detector.api.Severity? getDefinedSeverityWithoutOverride(com.android.tools.lint.client.api.Configuration source, com.android.tools.lint.detector.api.Issue issue, optional com.android.tools.lint.detector.api.Severity visibleDefault);
    method public final com.android.tools.lint.client.api.Configuration? getFallback();
    method public final com.android.tools.lint.client.api.Configuration? getOverrides();
    method public final com.android.tools.lint.client.api.Configuration? getParentConfiguration(com.android.tools.lint.client.api.Configuration configuration);
    method public java.io.File? getParentFolder(java.io.File folder);
    method public final java.io.File? getRootDir();
    method public final com.android.tools.lint.client.api.Configuration getScopeLeaf(com.android.tools.lint.client.api.Configuration child);
    method public final void setFallback(com.android.tools.lint.client.api.Configuration? fallback);
    method public final void setOverrides(com.android.tools.lint.client.api.Configuration? overrides);
    method public final void setParent(com.android.tools.lint.client.api.Configuration child, com.android.tools.lint.client.api.Configuration? parent);
    method public final void setRootDir(java.io.File? rootDir);
    property public final com.android.tools.lint.client.api.LintClient client;
    property public final com.android.tools.lint.client.api.Configuration? fallback;
    property public final com.android.tools.lint.client.api.Configuration? overrides;
    property public final java.io.File? rootDir;
    field public static final com.android.tools.lint.client.api.ConfigurationHierarchy.Companion Companion;
  }

  public static final class ConfigurationHierarchy.Companion {
    method public java.io.File getDefaultRootDir();
    method public java.io.File getLintXmlFile(java.io.File);
    method public void setDefaultRootDir(java.io.File defaultRootDir);
    property public final java.io.File defaultRootDir;
  }

  public class FlagConfiguration extends com.android.tools.lint.client.api.Configuration {
    ctor public FlagConfiguration(com.android.tools.lint.client.api.ConfigurationHierarchy configurations);
    method public void addConfiguredIssues(java.util.Map<java.lang.String,com.android.tools.lint.detector.api.Severity> targetMap, com.android.tools.lint.client.api.IssueRegistry registry, boolean specificOnly);
    method public boolean allowSuppress();
    method public java.util.Set<com.android.tools.lint.detector.api.Category>? disabledCategories();
    method public java.util.Set<java.lang.String> disabledIds();
    method public java.util.Set<com.android.tools.lint.detector.api.Category>? enabledCategories();
    method public java.util.Set<java.lang.String> enabledIds();
    method public java.util.Set<com.android.tools.lint.detector.api.Category>? exactCategories();
    method public java.util.Set<java.lang.String>? exactCheckedIds();
    method public boolean fatalOnly();
    method public final com.android.tools.lint.detector.api.Location? getAssociatedLocation();
    method public java.io.File? getBaselineFile();
    method public void ignore(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Location? location, String message);
    method public void ignore(com.android.tools.lint.detector.api.Issue issue, java.io.File file);
    method public void ignore(String issueId, java.io.File file);
    method public boolean isCheckAllWarnings();
    method public boolean isIgnoreWarnings();
    method public boolean isWarningsAsErrors();
    method public final void setAssociatedLocation(com.android.tools.lint.detector.api.Location? associatedLocation);
    method public void setBaselineFile(java.io.File? baselineFile);
    method public void setSeverity(com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Severity? severity);
    method public com.android.tools.lint.detector.api.Severity? severityOverride(com.android.tools.lint.detector.api.Issue issue);
    method public java.util.Set<java.lang.String> severityOverrides();
    method protected final void validateIssueIds(com.android.tools.lint.client.api.LintClient client, com.android.tools.lint.client.api.LintDriver driver, com.android.tools.lint.detector.api.Project? project, com.android.tools.lint.client.api.IssueRegistry registry, java.util.Collection<java.lang.String> ids);
    property public final com.android.tools.lint.detector.api.Location? associatedLocation;
    property public java.io.File? baselineFile;
  }

  public class GradleVisitor {
    ctor public GradleVisitor();
    method public com.android.tools.lint.detector.api.Location createLocation(com.android.tools.lint.detector.api.GradleContext context, Object cookie);
    method @Deprecated public Object getPropertyKeyCookie(Object cookie);
    method @Deprecated public Object getPropertyPairCookie(Object cookie);
    method public int getStartOffset(com.android.tools.lint.detector.api.GradleContext context, Object cookie);
    method public void visitBuildScript(com.android.tools.lint.detector.api.GradleContext context, java.util.List<? extends com.android.tools.lint.detector.api.GradleScanner> detectors);
  }

  @com.google.common.annotations.Beta public abstract class IssueRegistry {
    ctor protected IssueRegistry();
    method protected boolean cacheable();
    method public int getApi();
    method public final java.util.List<com.android.tools.lint.detector.api.Category> getCategories();
    method public java.util.List<java.lang.String> getDeletedIssues();
    method public final java.util.List<java.lang.String> getIdSpellingSuggestions(String id);
    method public final com.android.tools.lint.detector.api.Issue? getIssue(String id);
    method protected int getIssueCapacity(java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scope);
    method public abstract java.util.List<com.android.tools.lint.detector.api.Issue> getIssues();
    method protected java.util.List<com.android.tools.lint.detector.api.Issue> getIssuesForScope(java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scope);
    method public int getMaxApi();
    method public int getMinApi();
    method public com.android.tools.lint.client.api.Vendor? getVendor();
    method public final boolean isCategoryName(String name);
    method public final boolean isIssueId(String id);
    method public boolean isUpToDate();
    property public int api;
    property public java.util.List<java.lang.String> deletedIssues;
    property public boolean isUpToDate;
    property public abstract java.util.List<com.android.tools.lint.detector.api.Issue> issues;
    property public int maxApi;
    property public int minApi;
    property public com.android.tools.lint.client.api.Vendor? vendor;
    field public static final com.android.tools.lint.detector.api.Issue BASELINE;
    field public static final com.android.tools.lint.detector.api.Issue CANNOT_ENABLE_HIDDEN;
    field public static final com.android.tools.lint.client.api.IssueRegistry.Companion Companion;
    field public static final com.android.tools.lint.detector.api.Issue LINT_ERROR;
    field public static final com.android.tools.lint.detector.api.Issue LINT_WARNING;
    field public static final com.android.tools.lint.detector.api.Issue OBSOLETE_LINT_CHECK;
    field public static final com.android.tools.lint.detector.api.Issue PARSER_ERROR;
    field public static final com.android.tools.lint.detector.api.Issue UNKNOWN_ISSUE_ID;
  }

  public static final class IssueRegistry.Companion {
    method public com.android.tools.lint.client.api.Vendor getAOSP_VENDOR();
    method public String? getNewId(String id);
    method public boolean isDeletedIssueId(String id);
    method public void reset();
    property public final com.android.tools.lint.client.api.Vendor AOSP_VENDOR;
  }

  public final class JarFileIssueRegistry extends com.android.tools.lint.client.api.IssueRegistry {
    method public java.util.List<com.android.tools.lint.detector.api.Issue> getIssues();
    method public java.io.File getJarFile();
    property public int api;
    property public boolean isUpToDate;
    property public java.util.List<com.android.tools.lint.detector.api.Issue> issues;
    property public final java.io.File jarFile;
    property public com.android.tools.lint.client.api.Vendor vendor;
    field public static final com.android.tools.lint.client.api.JarFileIssueRegistry.Factory Factory;
  }

  public static final class JarFileIssueRegistry.Factory {
    method public void clearCache();
    method public java.util.List<com.android.tools.lint.client.api.JarFileIssueRegistry> get(com.android.tools.lint.client.api.LintClient client, java.util.Collection<? extends java.io.File> jarFiles, optional com.android.tools.lint.detector.api.Project? currentProject, optional com.android.tools.lint.client.api.LintDriver? driver);
    method public com.android.tools.lint.client.api.IssueRegistry join(com.android.tools.lint.client.api.IssueRegistry... registries);
  }

  public abstract class JavaEvaluator {
    ctor public JavaEvaluator();
    method public boolean areSignaturesEqual(com.intellij.psi.PsiMethod method1, com.intellij.psi.PsiMethod method2);
    method public java.util.Map<org.jetbrains.uast.UExpression,com.intellij.psi.PsiParameter> computeArgumentMapping(org.jetbrains.uast.UCallExpression call, com.intellij.psi.PsiMethod method);
    method public String? constructMethodDescription(String method, optional boolean includeName, com.intellij.psi.PsiType![] argumentTypes, optional com.intellij.psi.PsiType? returnType, optional boolean includeReturn);
    method public com.intellij.psi.PsiType? erasure(com.intellij.psi.PsiType? type);
    method public abstract boolean extendsClass(com.intellij.psi.PsiClass? cls, String className, optional boolean strict);
    method public final java.util.List<org.jetbrains.uast.UAnnotation> filterRelevantAnnotations(com.intellij.psi.PsiAnnotation![] annotations, optional org.jetbrains.uast.UElement? context, optional java.util.Set<java.lang.String>? relevantAnnotations);
    method public abstract com.intellij.psi.PsiAnnotation? findAnnotation(com.intellij.psi.PsiModifierListOwner? listOwner, java.lang.String... annotationNames);
    method public abstract com.intellij.psi.PsiAnnotation? findAnnotationInHierarchy(com.intellij.psi.PsiModifierListOwner listOwner, java.lang.String... annotationNames);
    method public abstract com.intellij.psi.PsiClass? findClass(String qualifiedName);
    method public abstract String? findJarPath(com.intellij.psi.PsiElement element);
    method public abstract String? findJarPath(org.jetbrains.uast.UElement element);
    method public com.android.tools.lint.model.LintModelLibrary? findOwnerLibrary(String jarFile);
    method public abstract java.util.List<org.jetbrains.uast.UAnnotation> getAllAnnotations(org.jetbrains.uast.UAnnotated owner, boolean inHierarchy);
    method public abstract com.intellij.psi.PsiAnnotation![] getAllAnnotations(com.intellij.psi.PsiModifierListOwner owner, boolean inHierarchy);
    method public abstract com.intellij.psi.PsiClassType? getClassType(com.intellij.psi.PsiClass? psiClass);
    method public abstract com.android.tools.lint.model.LintModelDependencies? getDependencies();
    method @Deprecated public String? getInternalDescription(com.intellij.psi.PsiMethod method, boolean includeName, boolean includeReturn);
    method @Deprecated public String? getInternalName(com.intellij.psi.PsiClass psiClass);
    method @Deprecated public String? getInternalName(com.intellij.psi.PsiClassType psiClassType);
    method public com.android.tools.lint.model.LintModelMavenName? getLibrary(com.intellij.psi.PsiElement element);
    method public com.android.tools.lint.model.LintModelMavenName? getLibrary(org.jetbrains.uast.UElement element);
    method public com.android.tools.lint.model.LintModelMavenName? getLibrary(org.jetbrains.uast.UMethod element);
    method public final com.android.tools.lint.model.LintModelMavenName? getLibrary(java.io.File file);
    method public String? getMethodDescription(com.intellij.psi.PsiMethod method, boolean includeName, boolean includeReturn);
    method public abstract com.intellij.psi.PsiPackage? getPackage(com.intellij.psi.PsiElement node);
    method public abstract com.intellij.psi.PsiPackage? getPackage(org.jetbrains.uast.UElement node);
    method public com.intellij.psi.PsiPackage? getPackage(org.jetbrains.uast.UMethod node);
    method public int getParameterCount(com.intellij.psi.PsiMethod method);
    method public com.android.tools.lint.detector.api.Project? getProject(com.intellij.psi.PsiElement element);
    method public String? getQualifiedName(com.intellij.psi.PsiClass psiClass);
    method public String? getQualifiedName(com.intellij.psi.PsiClassType psiClassType);
    method public com.intellij.psi.PsiMethod? getSuperMethod(com.intellij.psi.PsiMethod? method);
    method public abstract com.intellij.psi.PsiClass? getTypeClass(com.intellij.psi.PsiType? psiType);
    method public boolean hasModifier(com.intellij.psi.PsiModifierListOwner? owner, org.jetbrains.kotlin.lexer.KtModifierKeywordToken keyword);
    method public abstract boolean implementsInterface(com.intellij.psi.PsiClass cls, String interfaceName, optional boolean strict);
    method public boolean inheritsFrom(com.intellij.psi.PsiClass? cls, String className, optional boolean strict);
    method public boolean isAbstract(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isActual(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isCompanion(com.intellij.psi.PsiClass? owner);
    method public boolean isConst(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isCrossInline(com.intellij.psi.PsiParameter? owner);
    method public boolean isData(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isExpect(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isExternal(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isFinal(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isInfix(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isInherited(com.intellij.psi.PsiAnnotation annotation, com.intellij.psi.PsiModifierListOwner owner);
    method public boolean isInherited(org.jetbrains.uast.UAnnotation annotation, com.intellij.psi.PsiModifierListOwner owner);
    method public boolean isInherited(org.jetbrains.uast.UAnnotation annotation, org.jetbrains.uast.UAnnotated owner);
    method public boolean isInline(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isInternal(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isLateInit(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isMemberInClass(com.intellij.psi.PsiMember? member, String className);
    method public boolean isMemberInSubClassOf(com.intellij.psi.PsiMember member, String className, optional boolean strict);
    method public boolean isNoInline(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isOpen(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isOperator(com.intellij.psi.PsiModifierListOwner? owner);
    method public final boolean isOverride(org.jetbrains.uast.UMethod method, optional boolean includeInterfaces);
    method public final boolean isOverride(com.intellij.psi.PsiMethod method, optional boolean includeInterfaces);
    method public boolean isPrivate(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isProtected(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isPublic(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isSealed(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isStatic(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isSuspend(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isTailRec(com.intellij.psi.PsiMethod? owner);
    method public boolean isVararg(com.intellij.psi.PsiParameter? owner);
    method public boolean methodMatches(com.intellij.psi.PsiMethod method, String? className, boolean allowInherit, java.lang.String... argumentTypes);
    method public boolean parameterHasType(com.intellij.psi.PsiMethod? method, int parameterIndex, String typeName);
    method public boolean parametersMatch(com.intellij.psi.PsiMethod method, java.lang.String... argumentTypes);
    method public com.intellij.psi.PsiElement? resolve(com.intellij.psi.PsiElement element);
    method public boolean typeMatches(com.intellij.psi.PsiType? type, String typeName);
    property public abstract com.android.tools.lint.model.LintModelDependencies? dependencies;
    field public static final com.android.tools.lint.client.api.JavaEvaluator.Companion Companion;
  }

  public static final class JavaEvaluator.Companion {
    method public String? getPrimitiveSignature(String typeName);
  }

  public final class JavaEvaluatorKt {
    field public static final String TYPE_BOOLEAN = "boolean";
    field public static final String TYPE_BOOLEAN_WRAPPER = "java.lang.Boolean";
    field public static final String TYPE_BYTE = "byte";
    field public static final String TYPE_BYTE_WRAPPER = "java.lang.Byte";
    field public static final String TYPE_CHAR = "char";
    field public static final String TYPE_CHARACTER_WRAPPER = "java.lang.Character";
    field public static final String TYPE_DOUBLE = "double";
    field public static final String TYPE_DOUBLE_WRAPPER = "java.lang.Double";
    field public static final String TYPE_FLOAT = "float";
    field public static final String TYPE_FLOAT_WRAPPER = "java.lang.Float";
    field public static final String TYPE_INT = "int";
    field public static final String TYPE_INTEGER_WRAPPER = "java.lang.Integer";
    field public static final String TYPE_LONG = "long";
    field public static final String TYPE_LONG_WRAPPER = "java.lang.Long";
    field public static final String TYPE_NULL = "null";
    field public static final String TYPE_OBJECT = "java.lang.Object";
    field public static final String TYPE_SHORT = "short";
    field public static final String TYPE_SHORT_WRAPPER = "java.lang.Short";
    field public static final String TYPE_STRING = "java.lang.String";
  }

  @Deprecated public final class JavaParser {
    field @Deprecated public static final com.android.tools.lint.client.api.JavaParser INSTANCE;
    field @Deprecated public static final String TYPE_BOOLEAN = "boolean";
    field @Deprecated public static final String TYPE_BOOLEAN_WRAPPER = "java.lang.Boolean";
    field @Deprecated public static final String TYPE_BYTE = "byte";
    field @Deprecated public static final String TYPE_BYTE_WRAPPER = "java.lang.Byte";
    field @Deprecated public static final String TYPE_CHAR = "char";
    field @Deprecated public static final String TYPE_CHARACTER_WRAPPER = "java.lang.Character";
    field @Deprecated public static final String TYPE_DOUBLE = "double";
    field @Deprecated public static final String TYPE_DOUBLE_WRAPPER = "java.lang.Double";
    field @Deprecated public static final String TYPE_FLOAT = "float";
    field @Deprecated public static final String TYPE_FLOAT_WRAPPER = "java.lang.Float";
    field @Deprecated public static final String TYPE_INT = "int";
    field @Deprecated public static final String TYPE_INTEGER_WRAPPER = "java.lang.Integer";
    field @Deprecated public static final String TYPE_LONG = "long";
    field @Deprecated public static final String TYPE_LONG_WRAPPER = "java.lang.Long";
    field @Deprecated public static final String TYPE_NULL = "null";
    field @Deprecated public static final String TYPE_OBJECT = "java.lang.Object";
    field @Deprecated public static final String TYPE_SHORT = "short";
    field @Deprecated public static final String TYPE_SHORT_WRAPPER = "java.lang.Short";
    field @Deprecated public static final String TYPE_STRING = "java.lang.String";
  }

  public final class LintBaseline {
    ctor public LintBaseline(com.android.tools.lint.client.api.LintClient? client, java.io.File file);
    method public void close();
    method public boolean findAndMark(com.android.tools.lint.detector.api.Incident incident);
    method public String? getAttribute(String name);
    method public java.io.File getFile();
    method public int getFixedCount();
    method public int getFoundErrorCount();
    method public int getFoundWarningCount();
    method public boolean getRemoveFixed();
    method public int getTotalCount();
    method public boolean getWriteOnClose();
    method public boolean sameMessage(com.android.tools.lint.detector.api.Issue issue, String new, String old);
    method public void setAttribute(String name, String value);
    method public void setFile(java.io.File file);
    method public void setRemoveFixed(boolean removeFixed);
    method public void setWriteOnClose(boolean writeOnClose);
    method public void write(java.io.File file);
    property public final java.io.File file;
    property public final int fixedCount;
    property public final int foundErrorCount;
    property public final int foundWarningCount;
    property public final boolean removeFixed;
    property public final int totalCount;
    property public final boolean writeOnClose;
    field public static final com.android.tools.lint.client.api.LintBaseline.Companion Companion;
    field public static final String VARIANT_ALL = "all";
    field public static final String VARIANT_FATAL = "fatal";
  }

  public static final class LintBaseline.Companion {
    method public String describeBaselineFilter(int errors, int warnings, String baselineDisplayPath);
    method public boolean isFilteredMessage(String errorMessage, com.android.tools.lint.detector.api.TextFormat format);
    method public boolean isFixedMessage(String errorMessage, com.android.tools.lint.detector.api.TextFormat format);
    method public boolean isSamePathSuffix(String path, String suffix);
    method public boolean precededBy(String, String prev, int offset);
    method public boolean stringsEquivalent(String s1, String s2, optional int start1, optional int start2);
    method public boolean stringsEquivalent(String s1, String s2, kotlin.jvm.functions.Function2<? super java.lang.String,? super java.lang.Integer,java.lang.Boolean> skipTokenAt);
  }

  @com.google.common.annotations.Beta public abstract class LintClient {
    ctor protected LintClient(String clientName);
    ctor protected LintClient();
    method public com.android.tools.lint.client.api.IssueRegistry addCustomLintRules(com.android.tools.lint.client.api.IssueRegistry registry, com.android.tools.lint.client.api.LintDriver? driver, boolean warnDeprecated);
    method public boolean checkForSuppressComments();
    method public void closeConnection(java.net.URLConnection connection);
    method protected com.android.tools.lint.detector.api.Project createProject(java.io.File dir, java.io.File referenceDir);
    method public com.android.tools.lint.detector.api.Location.ResourceItemHandle createResourceItemHandle(com.android.ide.common.resources.ResourceItem item, optional boolean nameOnly, optional boolean valueOnly);
    method public java.util.Map<java.lang.String,java.lang.String> createSuperClassMap(com.android.tools.lint.detector.api.Project project);
    method public ClassLoader createUrlClassLoader(java.net.URL![] urls, ClassLoader parent);
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public org.xmlpull.v1.XmlPullParser? createXmlPullParser(com.android.ide.common.util.PathString resourcePath) throws java.io.IOException;
    method protected void disposeProjects(java.util.Collection<? extends com.android.tools.lint.detector.api.Project> knownProjects);
    method public java.util.List<java.io.File> findGlobalRuleJars(com.android.tools.lint.client.api.LintDriver? driver, boolean warnDeprecated);
    method public com.android.tools.lint.detector.api.Location? findManifestSourceLocation(org.w3c.dom.Node mergedNode);
    method public com.android.utils.Pair<java.io.File,? extends org.w3c.dom.Node>? findManifestSourceNode(org.w3c.dom.Node mergedNode);
    method public java.io.File? findResource(String relativePath);
    method public Iterable<java.io.File> findRuleJars(com.android.tools.lint.detector.api.Project project);
    method public java.util.List<java.io.File> getAssetFolders(com.android.tools.lint.detector.api.Project project);
    method public java.io.File? getCacheDir(String? name, boolean create);
    method protected com.android.tools.lint.client.api.LintClient.ClassPathInfo getClassPath(com.android.tools.lint.detector.api.Project project);
    method public String getClientDisplayName();
    method public String? getClientDisplayRevision();
    method public static final String getClientName();
    method public String? getClientRevision();
    method public com.android.sdklib.IAndroidTarget? getCompileTarget(com.android.tools.lint.detector.api.Project project);
    method public com.android.tools.lint.client.api.Configuration getConfiguration(com.android.tools.lint.detector.api.Project project, com.android.tools.lint.client.api.LintDriver? driver);
    method public com.android.tools.lint.client.api.Configuration? getConfiguration(java.io.File file);
    method public com.android.tools.lint.client.api.ConfigurationHierarchy getConfigurations();
    method public java.util.Set<com.android.tools.lint.detector.api.Desugaring> getDesugaring(com.android.tools.lint.detector.api.Project project);
    method protected final java.util.Map<java.io.File,com.android.tools.lint.detector.api.Project> getDirToProject();
    method public String getDisplayPath(java.io.File file, optional com.android.tools.lint.detector.api.Project? project, optional com.android.tools.lint.detector.api.TextFormat format);
    method public java.util.List<java.io.File> getExternalAnnotations(java.util.Collection<? extends com.android.tools.lint.detector.api.Project> projects);
    method public java.util.List<java.io.File> getGeneratedResourceFolders(com.android.tools.lint.detector.api.Project project);
    method public java.util.List<java.io.File> getGeneratedSourceFolders(com.android.tools.lint.detector.api.Project project);
    method public static final java.util.Set<com.android.tools.lint.detector.api.Desugaring> getGradleDesugaring(com.android.ide.common.repository.GradleVersion version, com.intellij.pom.java.LanguageLevel? languageLevel, boolean coreLibraryDesugaringEnabled);
    method public abstract com.android.tools.lint.client.api.GradleVisitor getGradleVisitor();
    method public final int getHighestKnownApiLevel();
    method public com.android.ide.common.repository.GradleVersion? getHighestKnownVersion(com.android.ide.common.repository.GradleCoordinate coordinate, java.util.function.Predicate<com.android.ide.common.repository.GradleVersion>? filter);
    method public java.util.List<java.io.File> getJavaClassFolders(com.android.tools.lint.detector.api.Project project);
    method public com.intellij.pom.java.LanguageLevel getJavaLanguageLevel(com.android.tools.lint.detector.api.Project project);
    method public java.util.List<java.io.File> getJavaLibraries(com.android.tools.lint.detector.api.Project project, boolean includeProvided);
    method public java.util.List<java.io.File> getJavaSourceFolders(com.android.tools.lint.detector.api.Project project);
    method public java.io.File? getJdkHome(optional com.android.tools.lint.detector.api.Project? project);
    method public final java.util.Collection<com.android.tools.lint.detector.api.Project> getKnownProjects();
    method public org.jetbrains.kotlin.config.LanguageVersionSettings getKotlinLanguageLevel(com.android.tools.lint.detector.api.Project project);
    method public com.android.sdklib.IAndroidTarget? getLatestSdkTarget(optional int minApi, optional boolean includePreviews);
    method public org.w3c.dom.Document? getMergedManifest(com.android.tools.lint.detector.api.Project project);
    method public com.android.tools.lint.detector.api.PartialResult getPartialResults(com.android.tools.lint.detector.api.Project project, com.android.tools.lint.detector.api.Issue issue);
    method public com.android.tools.lint.model.PathVariables getPathVariables();
    method public com.android.tools.lint.client.api.PlatformLookup? getPlatformLookup();
    method public boolean getPrintInternalErrorStackTrace();
    method public com.android.tools.lint.detector.api.Project getProject(java.io.File dir, java.io.File referenceDir);
    method protected final java.util.Set<java.io.File> getProjectDirs();
    method public String getProjectName(com.android.tools.lint.detector.api.Project project);
    method public String? getRelativePath(java.io.File? baseFile, java.io.File? file);
    method protected final java.util.Map<java.lang.Object,com.android.tools.lint.client.api.BlameFile> getReportFileCache();
    method public java.util.List<java.io.File> getResourceFolders(com.android.tools.lint.detector.api.Project project);
    method @Deprecated public final com.android.ide.common.resources.ResourceRepository getResourceRepository(com.android.tools.lint.detector.api.Project project, boolean includeModuleDependencies, boolean includeLibraries);
    method public abstract com.android.ide.common.resources.ResourceRepository getResources(com.android.tools.lint.detector.api.Project project, com.android.tools.lint.client.api.ResourceRepositoryScope scope);
    method public java.io.File? getRootDir();
    method public java.io.File? getSdkHome();
    method public com.android.tools.lint.client.api.SdkInfo getSdkInfo(com.android.tools.lint.detector.api.Project project);
    method protected final java.util.Map<org.w3c.dom.Node,com.android.utils.Pair<java.io.File,? extends org.w3c.dom.Node>> getSourceNodeCache();
    method public String? getSuperClass(com.android.tools.lint.detector.api.Project project, String name);
    method public java.util.List<com.android.sdklib.IAndroidTarget> getTargets();
    method public java.util.List<java.io.File> getTestLibraries(com.android.tools.lint.detector.api.Project project);
    method public java.util.List<java.io.File> getTestSourceFolders(com.android.tools.lint.detector.api.Project project);
    method public abstract com.android.tools.lint.client.api.UastParser getUastParser(com.android.tools.lint.detector.api.Project? project);
    method public org.w3c.dom.Document? getXmlDocument(java.io.File file, optional CharSequence? contents);
    method public abstract com.android.tools.lint.client.api.XmlParser getXmlParser();
    method protected void initializeProjects(java.util.Collection<? extends com.android.tools.lint.detector.api.Project> knownProjects);
    method public static final boolean isGradle();
    method public boolean isGradleProject(com.android.tools.lint.detector.api.Project project);
    method public final boolean isKnownProjectDir(java.io.File dir);
    method public final boolean isMergeManifestNode(org.w3c.dom.Node node);
    method public boolean isProjectDirectory(java.io.File dir);
    method public static final boolean isStudio();
    method public Boolean? isSubclassOf(com.android.tools.lint.detector.api.Project project, String name, String superClassName);
    method public static final boolean isUnitTest();
    method public void log(Throwable? exception, String? format, java.lang.Object... args);
    method public abstract void log(com.android.tools.lint.detector.api.Severity severity, Throwable? exception, String? format, java.lang.Object... args);
    method public void mergeState(com.android.tools.lint.detector.api.Project root, com.android.tools.lint.client.api.LintDriver driver);
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public java.net.URLConnection? openConnection(java.net.URL url) throws java.io.IOException;
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public java.net.URLConnection? openConnection(java.net.URL url, int timeout) throws java.io.IOException;
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public byte[] readBytes(java.io.File file) throws java.io.IOException;
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public byte[] readBytes(com.android.ide.common.util.PathString resourcePath) throws java.io.IOException;
    method public abstract CharSequence readFile(java.io.File file);
    method public void registerProject(java.io.File dir, com.android.tools.lint.detector.api.Project project);
    method @Deprecated public final void report(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Severity severity, com.android.tools.lint.detector.api.Location location, String message, com.android.tools.lint.detector.api.TextFormat format, com.android.tools.lint.detector.api.LintFix? fix);
    method public abstract void report(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Incident incident, optional com.android.tools.lint.detector.api.TextFormat format);
    method public void report(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Incident incident, com.android.tools.lint.detector.api.Constraint constraint);
    method public void report(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Incident incident, com.android.tools.lint.detector.api.LintMap map);
    method public void resolveMergeManifestSources(org.w3c.dom.Document mergedManifest, Object reportFile);
    method public void runReadAction(Runnable runnable);
    method public <T> T! runReadAction(com.intellij.openapi.util.Computable<T> computable);
    method public static final void setClientName(String clientName);
    method public void storeState(com.android.tools.lint.detector.api.Project project);
    method public boolean supportsPartialAnalysis();
    method @Deprecated public final boolean supportsProjectResources();
    property public com.android.tools.lint.client.api.ConfigurationHierarchy configurations;
    property protected final java.util.Map<java.io.File,com.android.tools.lint.detector.api.Project> dirToProject;
    property public final int highestKnownApiLevel;
    property public final java.util.Collection<com.android.tools.lint.detector.api.Project> knownProjects;
    property public com.android.tools.lint.model.PathVariables pathVariables;
    property public boolean printInternalErrorStackTrace;
    property protected final java.util.Set<java.io.File> projectDirs;
    property protected final java.util.Map<java.lang.Object,com.android.tools.lint.client.api.BlameFile> reportFileCache;
    property protected final java.util.Map<org.w3c.dom.Node,com.android.utils.Pair<java.io.File,? extends org.w3c.dom.Node>> sourceNodeCache;
    property public abstract com.android.tools.lint.client.api.XmlParser xmlParser;
    field public static final String CLIENT_CLI = "cli";
    field public static final String CLIENT_GRADLE = "gradle";
    field public static final String CLIENT_STUDIO = "studio";
    field public static final String CLIENT_UNIT_TESTS = "test";
    field public static final String CLIENT_UNKNOWN = "unknown";
    field public static final com.android.tools.lint.client.api.LintClient.Companion Companion;
    field public static final String MERGED_MANIFEST = "lint-merged-manifest";
    field protected static final com.android.utils.Pair<java.io.File,org.w3c.dom.Node> NOT_FOUND;
    field public static String clientName;
  }

  public static final class LintClient.ClassPathInfo {
    ctor public LintClient.ClassPathInfo(java.util.List<? extends java.io.File> sourceFolders, java.util.List<? extends java.io.File> classFolders, java.util.List<? extends java.io.File> libraries, java.util.List<? extends java.io.File> nonProvidedLibraries, java.util.List<? extends java.io.File> testSourceFolders, java.util.List<? extends java.io.File> testLibraries, java.util.List<? extends java.io.File> generatedFolders);
    method public java.util.List<java.io.File> getClassFolders();
    method public java.util.List<java.io.File> getGeneratedFolders();
    method public java.util.List<java.io.File> getLibraries(boolean includeProvided);
    method public java.util.List<java.io.File> getSourceFolders();
    method public java.util.List<java.io.File> getTestLibraries();
    method public java.util.List<java.io.File> getTestSourceFolders();
    property public final java.util.List<java.io.File> classFolders;
    property public final java.util.List<java.io.File> generatedFolders;
    property public final java.util.List<java.io.File> sourceFolders;
    property public final java.util.List<java.io.File> testLibraries;
    property public final java.util.List<java.io.File> testSourceFolders;
  }

  public static final class LintClient.Companion {
    method public void ensureClientNameInitialized();
    method public String getClientName();
    method public java.util.Set<com.android.tools.lint.detector.api.Desugaring> getGradleDesugaring(com.android.ide.common.repository.GradleVersion version, com.intellij.pom.java.LanguageLevel? languageLevel, boolean coreLibraryDesugaringEnabled);
    method public boolean isClientNameInitialized();
    method public boolean isGradle();
    method public boolean isStudio();
    method public boolean isUnitTest();
    method public void report(com.android.tools.lint.client.api.LintClient client, com.android.tools.lint.detector.api.Issue issue, String message, optional java.io.File? file, optional com.android.tools.lint.detector.api.TextFormat format, optional com.android.tools.lint.detector.api.LintFix? fix, optional com.android.tools.lint.client.api.Configuration? configuration, optional com.android.tools.lint.detector.api.Severity? severity, optional com.android.tools.lint.detector.api.Context? context, optional com.android.tools.lint.detector.api.Project? project, optional com.android.tools.lint.detector.api.Project? mainProject, optional com.android.tools.lint.client.api.LintDriver? driver, optional com.android.tools.lint.detector.api.Location? location);
    method public void report(com.android.tools.lint.client.api.LintClient client, com.android.tools.lint.detector.api.Issue issue, String message, java.io.File file, com.android.tools.lint.detector.api.Project? project);
    method public void report(com.android.tools.lint.client.api.LintClient client, com.android.tools.lint.detector.api.Issue issue, String message, com.android.tools.lint.client.api.LintDriver driver, com.android.tools.lint.detector.api.Project project, com.android.tools.lint.detector.api.Location? location, com.android.tools.lint.detector.api.LintFix? fix);
    method public void resetClientName();
    method public void setClientName(String clientName);
    property public final String clientName;
    property public final boolean isGradle;
    property public final boolean isStudio;
    property public final boolean isUnitTest;
  }

  @com.google.common.annotations.Beta public final class LintDriver {
    ctor public LintDriver(com.android.tools.lint.client.api.IssueRegistry registry, com.android.tools.lint.client.api.LintClient client, com.android.tools.lint.client.api.LintRequest request);
    method public void addLintListener(com.android.tools.lint.client.api.LintListener listener);
    method public void analyze();
    method public void analyzeOnly();
    method @com.google.common.annotations.VisibleForTesting public static void clearCrashCount();
    method public void computeDetectors(com.android.tools.lint.detector.api.Project project);
    method public org.objectweb.asm.tree.ClassNode? findClass(com.android.tools.lint.detector.api.ClassContext context, String type, int flags);
    method public com.android.tools.lint.detector.api.Project? findProjectFor(java.io.File file);
    method public boolean getAllowSuppress();
    method public long getAnalysisStartTime();
    method public com.android.tools.lint.client.api.LintBaseline? getBaseline();
    method public boolean getCheckDependencies();
    method public boolean getCheckGeneratedSources();
    method public long getCheckProjectTimeMs();
    method public boolean getCheckTestSources();
    method public com.android.tools.lint.client.api.LintClient getClient();
    method public long getComputeDetectorsTimeMs();
    method @com.google.common.annotations.VisibleForTesting public static int getCrashCount();
    method public long getDisposeProjectsTimeMs();
    method public long getExtraPhasesTimeMs();
    method public boolean getFatalOnlyMode();
    method public int getFileCount();
    method public boolean getIgnoreTestSources();
    method public long getInitializeTimeMs();
    method public int getJavaFileCount();
    method public int getKotlinFileCount();
    method public com.android.tools.lint.client.api.LintDriver.DriverMode getMode();
    method public int getModuleCount();
    method public org.objectweb.asm.tree.ClassNode? getOuterClassNode(org.objectweb.asm.tree.ClassNode classNode);
    method public int getPhase();
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Platform> getPlatforms();
    method public java.util.Collection<com.android.tools.lint.detector.api.Project> getProjectRoots();
    method public java.util.List<com.android.tools.lint.detector.api.Project> getProjects();
    method public long getRegisterCustomDetectorsTimeMs();
    method public com.android.tools.lint.client.api.IssueRegistry getRegistry();
    method public long getReportBaselineIssuesTimeMs();
    method public long getReportGenerationTimeMs();
    method public com.android.tools.lint.client.api.LintRequest getRequest();
    method public int getResourceFileCount();
    method public int getResourceFolderVersion(java.io.File resourceFile);
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Scope> getScope();
    method public String? getSuperClass(String name);
    method public int getTestSourceCount();
    method public static void handleDetectorError(com.android.tools.lint.detector.api.Context? context, com.android.tools.lint.client.api.LintDriver driver, Throwable throwable);
    method public boolean hasParserErrors();
    method public boolean isAbbreviating();
    method public static boolean isAnnotatedWithSuppress(com.android.tools.lint.detector.api.JavaContext? context, com.android.tools.lint.detector.api.Issue issue, com.intellij.psi.PsiModifierListOwner? modifierListOwner);
    method public boolean isGlobalAnalysis();
    method public boolean isIsolated();
    method public boolean isSubclassOf(org.objectweb.asm.tree.ClassNode classNode, String superClassName);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.Issue? issue, org.objectweb.asm.tree.ClassNode classNode, org.objectweb.asm.tree.MethodNode method, org.objectweb.asm.tree.AbstractInsnNode? instruction);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.Issue? issue, org.objectweb.asm.tree.FieldNode field);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.Issue? issue, org.objectweb.asm.tree.ClassNode classNode);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.JavaContext? context, com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UElement? scope);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.JavaContext? context, com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UCatchClause clause);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.JavaContext? context, com.android.tools.lint.detector.api.Issue issue, com.intellij.psi.PsiElement? scope);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.JavaContext? context, com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UAnnotated? scope);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.XmlContext? context, com.android.tools.lint.detector.api.Issue issue, org.w3c.dom.Node? node);
    method public static boolean isSuppressed(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UAnnotated annotated);
    method public static boolean isSuppressed(com.android.tools.lint.detector.api.Issue issue, com.intellij.psi.PsiAnnotationMemberValue? value);
    method public void mergeConditionalIncidents(com.android.tools.lint.detector.api.Context projectContext, java.util.List<com.android.tools.lint.detector.api.Incident> provisional);
    method public void mergeOnly();
    method public void processMergedProjects(com.android.tools.lint.detector.api.Context projectContext);
    method public void removeLintListener(com.android.tools.lint.client.api.LintListener listener);
    method public void requestRepeat(com.android.tools.lint.detector.api.Detector detector, java.util.EnumSet<com.android.tools.lint.detector.api.Scope>? scope);
    method public void runLaterOutsideReadAction(Runnable runnable);
    method public void setAbbreviating(boolean isAbbreviating);
    method public void setAllowSuppress(boolean allowSuppress);
    method public void setAnalysisStartTime(long analysisStartTime);
    method public void setBaseline(com.android.tools.lint.client.api.LintBaseline? baseline);
    method public void setCheckDependencies(boolean checkDependencies);
    method public void setCheckGeneratedSources(boolean checkGeneratedSources);
    method public void setCheckProjectTimeMs(long checkProjectTimeMs);
    method public void setCheckTestSources(boolean checkTestSources);
    method public void setComputeDetectorsTimeMs(long computeDetectorsTimeMs);
    method public void setDisposeProjectsTimeMs(long disposeProjectsTimeMs);
    method public void setExtraPhasesTimeMs(long extraPhasesTimeMs);
    method public void setFatalOnlyMode(boolean fatalOnlyMode);
    method public void setFileCount(int fileCount);
    method public void setHasParserErrors(boolean hasErrors);
    method public void setIgnoreTestSources(boolean ignoreTestSources);
    method public void setInitializeTimeMs(long initializeTimeMs);
    method public void setJavaFileCount(int javaFileCount);
    method public void setKotlinFileCount(int kotlinFileCount);
    method public void setModuleCount(int moduleCount);
    method public void setPlatforms(java.util.EnumSet<com.android.tools.lint.detector.api.Platform> platforms);
    method public void setRegisterCustomDetectorsTimeMs(long registerCustomDetectorsTimeMs);
    method public void setRegistry(com.android.tools.lint.client.api.IssueRegistry registry);
    method public void setReportBaselineIssuesTimeMs(long reportBaselineIssuesTimeMs);
    method public void setReportGenerationTimeMs(long reportGenerationTimeMs);
    method public void setResourceFileCount(int resourceFileCount);
    method public void setScope(java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scope);
    method public void setTestSourceCount(int testSourceCount);
    property public final boolean allowSuppress;
    property public final long analysisStartTime;
    property public final com.android.tools.lint.client.api.LintBaseline? baseline;
    property public final boolean checkDependencies;
    property public final boolean checkGeneratedSources;
    property public final long checkProjectTimeMs;
    property public final boolean checkTestSources;
    property public final com.android.tools.lint.client.api.LintClient client;
    property public final long computeDetectorsTimeMs;
    property public final long disposeProjectsTimeMs;
    property public final long extraPhasesTimeMs;
    property public final boolean fatalOnlyMode;
    property public final int fileCount;
    property public final boolean ignoreTestSources;
    property public final long initializeTimeMs;
    property public final boolean isAbbreviating;
    property public final int javaFileCount;
    property public final int kotlinFileCount;
    property public final com.android.tools.lint.client.api.LintDriver.DriverMode mode;
    property public final int moduleCount;
    property public final int phase;
    property public final java.util.EnumSet<com.android.tools.lint.detector.api.Platform> platforms;
    property public final java.util.Collection<com.android.tools.lint.detector.api.Project> projectRoots;
    property public final java.util.List<com.android.tools.lint.detector.api.Project> projects;
    property public final long registerCustomDetectorsTimeMs;
    property public final com.android.tools.lint.client.api.IssueRegistry registry;
    property public final long reportBaselineIssuesTimeMs;
    property public final long reportGenerationTimeMs;
    property public final com.android.tools.lint.client.api.LintRequest request;
    property public final int resourceFileCount;
    property public final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scope;
    property public final int testSourceCount;
    field public static final com.android.tools.lint.client.api.LintDriver.Companion Companion;
    field public static final String KEY_CONDITION = "_condition_";
    field public static final String KEY_THROWABLE = "throwable";
    field public static final String STUDIO_ID_PREFIX = "AndroidLint";
  }

  public static final class LintDriver.Companion {
    method public void appendStackTraceSummary(Throwable throwable, StringBuilder sb, optional int skipFrames, optional int maxFrames);
    method @com.google.common.annotations.VisibleForTesting public void clearCrashCount();
    method public kotlin.Pair<java.lang.String,java.util.List<com.android.tools.lint.detector.api.Issue>>? getAssociatedDetector(Throwable throwable, com.android.tools.lint.client.api.LintDriver driver);
    method @com.google.common.annotations.VisibleForTesting public int getCrashCount();
    method public java.util.List<com.android.tools.lint.client.api.LintDriver> getCurrentDrivers();
    method public java.util.List<com.android.tools.lint.detector.api.Issue> getDetectorIssues(String className, com.android.tools.lint.client.api.LintDriver driver);
    method public void handleDetectorError(com.android.tools.lint.detector.api.Context? context, com.android.tools.lint.client.api.LintDriver driver, Throwable throwable);
    method public boolean isAnnotatedWithSuppress(com.android.tools.lint.detector.api.JavaContext? context, com.android.tools.lint.detector.api.Issue issue, com.intellij.psi.PsiModifierListOwner? modifierListOwner);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UAnnotated annotated);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.Issue issue, com.intellij.psi.PsiAnnotationMemberValue? value);
    property @com.google.common.annotations.VisibleForTesting public final int crashCount;
    property public final java.util.List<com.android.tools.lint.client.api.LintDriver> currentDrivers;
  }

  public enum LintDriver.DriverMode {
    enum_constant public static final com.android.tools.lint.client.api.LintDriver.DriverMode ANALYSIS_ONLY;
    enum_constant public static final com.android.tools.lint.client.api.LintDriver.DriverMode GLOBAL;
    enum_constant public static final com.android.tools.lint.client.api.LintDriver.DriverMode MERGE;
  }

  public final class LintJarVerifier extends org.objectweb.asm.ClassVisitor {
    ctor public LintJarVerifier(java.io.File jarFile);
    method public String describeFirstIncompatibleReference();
    method public String describeFirstPackagedDependency();
    method public int getApiCount();
    method public String getReferenceClassFile();
    method public Throwable? getVerificationThrowable();
    method public boolean hasPackageConflict();
    method public boolean isCompatible();
    property public final int apiCount;
  }

  public final class LintJarVerifierKt {
  }

  @com.google.common.annotations.Beta public interface LintListener {
    method public void update(com.android.tools.lint.client.api.LintDriver driver, com.android.tools.lint.client.api.LintListener.EventType type, optional com.android.tools.lint.detector.api.Project? project, optional com.android.tools.lint.detector.api.Context? context);
  }

  public enum LintListener.EventType {
    enum_constant public static final com.android.tools.lint.client.api.LintListener.EventType COMPLETED;
    enum_constant public static final com.android.tools.lint.client.api.LintListener.EventType MERGING;
    enum_constant public static final com.android.tools.lint.client.api.LintListener.EventType NEW_PHASE;
    enum_constant public static final com.android.tools.lint.client.api.LintListener.EventType REGISTERED_PROJECT;
    enum_constant public static final com.android.tools.lint.client.api.LintListener.EventType SCANNING_FILE;
    enum_constant public static final com.android.tools.lint.client.api.LintListener.EventType SCANNING_LIBRARY_PROJECT;
    enum_constant public static final com.android.tools.lint.client.api.LintListener.EventType SCANNING_PROJECT;
    enum_constant public static final com.android.tools.lint.client.api.LintListener.EventType STARTING;
  }

  public class LintOptionsConfiguration extends com.android.tools.lint.client.api.FlagConfiguration {
    ctor public LintOptionsConfiguration(com.android.tools.lint.client.api.ConfigurationHierarchy configurations, com.android.tools.lint.model.LintModelLintOptions lintOptions, optional boolean fatalOnly);
  }

  @com.google.common.annotations.Beta public class LintRequest {
    ctor public LintRequest(com.android.tools.lint.client.api.LintClient client, java.util.List<? extends java.io.File> files);
    method public final com.android.tools.lint.client.api.LintClient getClient();
    method public final java.util.List<java.io.File> getFiles();
    method public com.android.tools.lint.detector.api.Project getMainProject(com.android.tools.lint.detector.api.Project project);
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Platform>? getPlatform();
    method public java.util.Collection<com.android.tools.lint.detector.api.Project>? getProjects();
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Scope>? getScope();
    method public final java.io.File? getSrcRoot();
    method public final Boolean? isReleaseMode();
    method public final com.android.tools.lint.client.api.LintRequest setPlatform(java.util.EnumSet<com.android.tools.lint.detector.api.Platform>? platform);
    method public final com.android.tools.lint.client.api.LintRequest setProjects(java.util.Collection<? extends com.android.tools.lint.detector.api.Project>? projects);
    method public final com.android.tools.lint.client.api.LintRequest setReleaseMode(Boolean? releaseMode);
    method public final com.android.tools.lint.client.api.LintRequest setScope(java.util.EnumSet<com.android.tools.lint.detector.api.Scope>? scope);
    method public final void setSrcRoot(java.io.File? srcRoot);
    property public final com.android.tools.lint.client.api.LintClient client;
    property public final java.util.List<java.io.File> files;
    property public final java.io.File? srcRoot;
    field protected java.util.EnumSet<com.android.tools.lint.detector.api.Platform>? platform;
    field protected java.util.Collection<? extends com.android.tools.lint.detector.api.Project>? projects;
    field protected Boolean? releaseMode;
    field protected java.util.EnumSet<com.android.tools.lint.detector.api.Scope>? scope;
  }

  @com.google.common.annotations.Beta public class LintXmlConfiguration extends com.android.tools.lint.client.api.Configuration {
    ctor protected LintXmlConfiguration(com.android.tools.lint.client.api.ConfigurationHierarchy configurations, java.io.File configFile, optional java.io.File? dir, optional boolean fileLevel);
    ctor protected LintXmlConfiguration(com.android.tools.lint.client.api.ConfigurationHierarchy configurations, com.android.tools.lint.detector.api.Project project);
    method public void addConfiguredIssues(java.util.Map<java.lang.String,com.android.tools.lint.detector.api.Severity> targetMap, com.android.tools.lint.client.api.IssueRegistry registry, boolean specificOnly);
    method public static final com.android.tools.lint.client.api.LintXmlConfiguration create(com.android.tools.lint.client.api.ConfigurationHierarchy configurations, java.io.File lintFile);
    method public final Boolean? getAbortOnError();
    method public final Boolean? getApplySuggestions();
    method public java.io.File? getBaselineFile();
    method public final Boolean? getCheckAllWarnings();
    method public final Boolean? getCheckDependencies();
    method public final Boolean? getCheckGeneratedSources();
    method public final Boolean? getCheckTestSources();
    method public final java.io.File getConfigFile();
    method public final Boolean? getExplainIssues();
    method public final Boolean? getFatalOnly();
    method public final Boolean? getIgnoreTestSources();
    method public final Boolean? getIgnoreWarnings();
    method public final Boolean? getRemoveFixedBaselineIssues();
    method public final Boolean? getWarningsAsErrors();
    method public void ignore(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Location? location, String message);
    method public void ignore(com.android.tools.lint.detector.api.Issue issue, java.io.File file);
    method public void ignore(String issueId, java.io.File file);
    method public void setBaselineFile(java.io.File? value);
    method public final void setBooleanOption(com.android.tools.lint.detector.api.Issue issue, String name, Boolean? value);
    method public final void setFileOption(com.android.tools.lint.detector.api.Issue issue, String name, java.io.File? value);
    method public final void setIntOption(com.android.tools.lint.detector.api.Issue issue, String name, Integer? value);
    method public final void setOption(com.android.tools.lint.detector.api.Issue issue, String name, String? value);
    method public void setSeverity(com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Severity? severity);
    property public java.io.File? baselineFile;
    property public final java.io.File configFile;
    property public boolean fileLevel;
    field public static final String CONFIG_FILE_NAME = "lint.xml";
    field public static final com.android.tools.lint.client.api.LintXmlConfiguration.Companion Companion;
    field public static final String TAG_LINT = "lint";
    field public static final String VALUE_ALL = "all";
  }

  public static final class LintXmlConfiguration.Companion {
    method public com.android.tools.lint.client.api.LintXmlConfiguration create(com.android.tools.lint.client.api.ConfigurationHierarchy configurations, java.io.File lintFile);
  }

  public static final class LintXmlConfiguration.IssueData {
    ctor public LintXmlConfiguration.IssueData(optional com.android.tools.lint.detector.api.Severity? severity, optional java.util.List<java.lang.String>? paths, optional java.util.List<java.util.regex.Pattern>? patterns, optional java.util.Map<java.lang.String,java.lang.String>? options);
    method public com.android.tools.lint.detector.api.Severity? component1();
    method public java.util.List<java.lang.String>? component2();
    method public java.util.List<java.util.regex.Pattern>? component3();
    method public java.util.Map<java.lang.String,java.lang.String>? component4();
    method public com.android.tools.lint.client.api.LintXmlConfiguration.IssueData copy(com.android.tools.lint.detector.api.Severity? severity, java.util.List<java.lang.String>? paths, java.util.List<java.util.regex.Pattern>? patterns, java.util.Map<java.lang.String,java.lang.String>? options);
    method public java.util.Map<java.lang.String,java.lang.String>? getOptions();
    method public java.util.List<java.lang.String>? getPaths();
    method public java.util.List<java.util.regex.Pattern>? getPatterns();
    method public com.android.tools.lint.detector.api.Severity? getSeverity();
    method public boolean isEmpty();
    method public operator void plusAssign(com.android.tools.lint.client.api.LintXmlConfiguration.IssueData other);
    method public void setOptions(java.util.Map<java.lang.String,java.lang.String>? options);
    method public void setPaths(java.util.List<java.lang.String>? paths);
    method public void setPatterns(java.util.List<java.util.regex.Pattern>? patterns);
    method public void setSeverity(com.android.tools.lint.detector.api.Severity? severity);
    property public final java.util.Map<java.lang.String,java.lang.String>? options;
    property public final java.util.List<java.lang.String>? paths;
    property public final java.util.List<java.util.regex.Pattern>? patterns;
    property public final com.android.tools.lint.detector.api.Severity? severity;
  }

  public interface PlatformLookup {
    method public com.android.sdklib.IAndroidTarget? getLatestSdkTarget(optional int minApi, optional boolean includePreviews, optional boolean includeAddOns);
    method public com.android.sdklib.IAndroidTarget? getTarget(String buildTargetHash);
    method public default com.android.sdklib.IAndroidTarget? getTarget(int api);
    method public java.util.List<com.android.sdklib.IAndroidTarget> getTargets(optional boolean includeAddOns);
  }

  public final class PlatformLookupKt {
    field public static final boolean SUPPORTS_ADD_ONS = false;
  }

  public final class ResourceReference {
    ctor public ResourceReference(org.jetbrains.uast.UExpression node, String package, com.android.resources.ResourceType type, String name, optional boolean heuristic);
    method public static com.android.tools.lint.client.api.ResourceReference? get(org.jetbrains.uast.UElement element);
    method public boolean getHeuristic();
    method public String getName();
    method public org.jetbrains.uast.UExpression getNode();
    method public String getPackage();
    method public com.android.resources.ResourceType getType();
    property public final boolean heuristic;
    property public final String name;
    property public final org.jetbrains.uast.UExpression node;
    property public final String package;
    property public final com.android.resources.ResourceType type;
    field public static final com.android.tools.lint.client.api.ResourceReference.Companion Companion;
  }

  public static final class ResourceReference.Companion {
    method public com.android.tools.lint.client.api.ResourceReference? get(org.jetbrains.uast.UElement element);
  }

  public enum ResourceRepositoryScope {
    method public final boolean includesDependencies();
    method public final boolean includesLibraries();
    enum_constant public static final com.android.tools.lint.client.api.ResourceRepositoryScope ALL_DEPENDENCIES;
    enum_constant public static final com.android.tools.lint.client.api.ResourceRepositoryScope ANDROID;
    enum_constant public static final com.android.tools.lint.client.api.ResourceRepositoryScope LOCAL_DEPENDENCIES;
    enum_constant public static final com.android.tools.lint.client.api.ResourceRepositoryScope PROJECT_ONLY;
  }

  @com.google.common.annotations.Beta public abstract class SdkInfo {
    ctor public SdkInfo();
    method public abstract String? getParentViewClass(String fqcn);
    method public abstract String? getParentViewName(String name);
    method public boolean isLayout(String tag);
    method public boolean isSubViewOf(String parentViewFqcn, String childViewFqcn);
  }

  public class UElementHandler {
    ctor public UElementHandler();
    method public void visitAnnotation(org.jetbrains.uast.UAnnotation node);
    method public void visitArrayAccessExpression(org.jetbrains.uast.UArrayAccessExpression node);
    method public void visitBinaryExpression(org.jetbrains.uast.UBinaryExpression node);
    method public void visitBinaryExpressionWithType(org.jetbrains.uast.UBinaryExpressionWithType node);
    method public void visitBlockExpression(org.jetbrains.uast.UBlockExpression node);
    method public void visitBreakExpression(org.jetbrains.uast.UBreakExpression node);
    method public void visitCallExpression(org.jetbrains.uast.UCallExpression node);
    method public void visitCallableReferenceExpression(org.jetbrains.uast.UCallableReferenceExpression node);
    method public void visitCatchClause(org.jetbrains.uast.UCatchClause node);
    method public void visitClass(org.jetbrains.uast.UClass node);
    method public void visitClassLiteralExpression(org.jetbrains.uast.UClassLiteralExpression node);
    method public void visitContinueExpression(org.jetbrains.uast.UContinueExpression node);
    method public void visitDeclaration(org.jetbrains.uast.UDeclaration node);
    method public void visitDeclarationsExpression(org.jetbrains.uast.UDeclarationsExpression node);
    method public void visitDoWhileExpression(org.jetbrains.uast.UDoWhileExpression node);
    method public void visitElement(org.jetbrains.uast.UElement node);
    method public void visitEnumConstant(org.jetbrains.uast.UEnumConstant node);
    method public void visitExpression(org.jetbrains.uast.UExpression node);
    method public void visitExpressionList(org.jetbrains.uast.UExpressionList node);
    method public void visitField(org.jetbrains.uast.UField node);
    method public void visitFile(org.jetbrains.uast.UFile node);
    method public void visitForEachExpression(org.jetbrains.uast.UForEachExpression node);
    method public void visitForExpression(org.jetbrains.uast.UForExpression node);
    method public void visitIfExpression(org.jetbrains.uast.UIfExpression node);
    method public void visitImportStatement(org.jetbrains.uast.UImportStatement node);
    method public void visitInitializer(org.jetbrains.uast.UClassInitializer node);
    method public void visitLabeledExpression(org.jetbrains.uast.ULabeledExpression node);
    method public void visitLambdaExpression(org.jetbrains.uast.ULambdaExpression node);
    method public void visitLiteralExpression(org.jetbrains.uast.ULiteralExpression node);
    method public void visitLocalVariable(org.jetbrains.uast.ULocalVariable node);
    method public void visitMethod(org.jetbrains.uast.UMethod node);
    method public void visitObjectLiteralExpression(org.jetbrains.uast.UObjectLiteralExpression node);
    method public void visitParameter(org.jetbrains.uast.UParameter node);
    method public void visitParenthesizedExpression(org.jetbrains.uast.UParenthesizedExpression node);
    method public void visitPolyadicExpression(org.jetbrains.uast.UPolyadicExpression node);
    method public void visitPostfixExpression(org.jetbrains.uast.UPostfixExpression node);
    method public void visitPrefixExpression(org.jetbrains.uast.UPrefixExpression node);
    method public void visitQualifiedReferenceExpression(org.jetbrains.uast.UQualifiedReferenceExpression node);
    method public void visitReturnExpression(org.jetbrains.uast.UReturnExpression node);
    method public void visitSimpleNameReferenceExpression(org.jetbrains.uast.USimpleNameReferenceExpression node);
    method public void visitSuperExpression(org.jetbrains.uast.USuperExpression node);
    method public void visitSwitchClauseExpression(org.jetbrains.uast.USwitchClauseExpression node);
    method public void visitSwitchExpression(org.jetbrains.uast.USwitchExpression node);
    method public void visitThisExpression(org.jetbrains.uast.UThisExpression node);
    method public void visitThrowExpression(org.jetbrains.uast.UThrowExpression node);
    method public void visitTryExpression(org.jetbrains.uast.UTryExpression node);
    method public void visitTypeReferenceExpression(org.jetbrains.uast.UTypeReferenceExpression node);
    method public void visitUnaryExpression(org.jetbrains.uast.UUnaryExpression node);
    method public void visitVariable(org.jetbrains.uast.UVariable node);
    method public void visitWhileExpression(org.jetbrains.uast.UWhileExpression node);
    method public void visitYieldExpression(org.jetbrains.uast.UYieldExpression node);
    field public static final com.android.tools.lint.client.api.UElementHandler.Companion Companion;
  }

  public static final class UElementHandler.Companion {
    method public com.android.tools.lint.client.api.UElementHandler getNONE();
    property public final com.android.tools.lint.client.api.UElementHandler NONE;
  }

  public final class UastGradleVisitor extends com.android.tools.lint.client.api.GradleVisitor {
    ctor public UastGradleVisitor(com.android.tools.lint.detector.api.JavaContext javaContext);
  }

  @com.google.common.annotations.Beta public abstract class UastParser {
    ctor public UastParser();
    method public abstract com.android.tools.lint.detector.api.Location createLocation(com.intellij.psi.PsiElement element);
    method public abstract com.android.tools.lint.detector.api.Location createLocation(org.jetbrains.uast.UElement element);
    method public abstract com.android.tools.lint.detector.api.Location getCallLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UCallExpression call, boolean includeReceiver, boolean includeArguments);
    method public abstract com.android.tools.lint.client.api.JavaEvaluator getEvaluator();
    method public abstract java.io.File? getFile(com.intellij.psi.PsiFile file);
    method public abstract CharSequence getFileContents(com.intellij.psi.PsiFile file);
    method public abstract com.android.tools.lint.detector.api.Location getLocation(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement element);
    method public abstract com.android.tools.lint.detector.api.Location getLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement element);
    method public abstract com.android.tools.lint.detector.api.Location getNameLocation(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement element);
    method public abstract com.android.tools.lint.detector.api.Location getNameLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement element);
    method public abstract com.android.tools.lint.detector.api.Location getRangeLocation(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement from, int fromDelta, com.intellij.psi.PsiElement to, int toDelta);
    method public abstract com.android.tools.lint.detector.api.Location getRangeLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement from, int fromDelta, org.jetbrains.uast.UElement to, int toDelta);
    method public abstract com.android.tools.lint.detector.api.Location getRangeLocation(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement from, int fromDelta, int toDelta);
    method public abstract com.android.tools.lint.detector.api.Location getRangeLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement from, int fromDelta, int toDelta);
    method public abstract org.jetbrains.uast.UFile? parse(com.android.tools.lint.detector.api.JavaContext context);
    method public boolean prepare(java.util.List<? extends com.android.tools.lint.detector.api.JavaContext> contexts, optional com.intellij.pom.java.LanguageLevel? javaLanguageLevel, optional org.jetbrains.kotlin.config.LanguageVersionSettings? kotlinLanguageLevel);
    property public abstract com.android.tools.lint.client.api.JavaEvaluator evaluator;
  }

  public final class Vendor {
    ctor public Vendor(optional String? vendorName, optional String? identifier, optional String? feedbackUrl, optional String? contact);
    ctor public Vendor(optional String? vendorName, optional String? identifier, optional String? feedbackUrl);
    ctor public Vendor(optional String? vendorName, optional String? identifier);
    ctor public Vendor(optional String? vendorName);
    method public String? component1();
    method public String? component2();
    method public String? component3();
    method public String? component4();
    method public com.android.tools.lint.client.api.Vendor copy(String? vendorName, String? identifier, String? feedbackUrl, String? contact);
    method public String describe(com.android.tools.lint.detector.api.TextFormat format);
    method public void describeInto(StringBuilder stringBuilder, com.android.tools.lint.detector.api.TextFormat format, optional String indent);
    method public String? getContact();
    method public String? getFeedbackUrl();
    method public String? getIdentifier();
    method public String? getVendorName();
    property public final String? contact;
    property public final String? feedbackUrl;
    property public final String? identifier;
    property public final String? vendorName;
  }

  @com.google.common.annotations.Beta public abstract class XmlParser {
    ctor public XmlParser();
    method public abstract com.android.tools.lint.detector.api.Location.Handle createLocationHandle(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Node node);
    method public abstract org.w3c.dom.Node? findNodeAt(com.android.tools.lint.detector.api.XmlContext context, int offset);
    method public final com.android.tools.lint.detector.api.Location getElementLocation(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Element element, optional org.w3c.dom.Node? node, optional String? namespace, optional String? attribute);
    method public final java.io.File? getFile(com.android.ide.common.resources.ResourceItem);
    method public abstract com.android.tools.lint.detector.api.Location getLocation(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Node node);
    method public abstract com.android.tools.lint.detector.api.Location getLocation(java.io.File file, org.w3c.dom.Node node);
    method public abstract com.android.tools.lint.detector.api.Location getLocation(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Node node, int start, int end);
    method public abstract com.android.tools.lint.detector.api.Location getLocation(com.android.tools.lint.client.api.LintClient client, java.io.File file, org.w3c.dom.Node node);
    method public final com.android.tools.lint.detector.api.Location? getLocation(com.android.tools.lint.client.api.LintClient client, com.android.ide.common.resources.ResourceItem item);
    method public abstract com.android.tools.lint.detector.api.Location getNameLocation(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Node node);
    method public abstract com.android.tools.lint.detector.api.Location getNameLocation(com.android.tools.lint.client.api.LintClient client, java.io.File file, org.w3c.dom.Node node);
    method public final com.android.tools.lint.detector.api.Location? getNameLocation(com.android.tools.lint.client.api.LintClient client, com.android.ide.common.resources.ResourceItem item);
    method public abstract int getNodeEndOffset(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Node node);
    method public abstract int getNodeEndOffset(com.android.tools.lint.client.api.LintClient client, java.io.File file, org.w3c.dom.Node node);
    method public abstract int getNodeStartOffset(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Node node);
    method public abstract int getNodeStartOffset(com.android.tools.lint.client.api.LintClient client, java.io.File file, org.w3c.dom.Node node);
    method public abstract com.android.tools.lint.detector.api.Location getValueLocation(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Attr node);
    method public abstract com.android.tools.lint.detector.api.Location getValueLocation(com.android.tools.lint.client.api.LintClient client, java.io.File file, org.w3c.dom.Attr node);
    method public final com.android.tools.lint.detector.api.Location? getValueLocation(com.android.tools.lint.client.api.LintClient client, com.android.ide.common.resources.ResourceItem item);
    method @kotlin.jvm.Throws(exceptionClasses={IOException::class, SAXException::class, ParserConfigurationException::class}) public abstract org.w3c.dom.Document? parseXml(java.io.File file) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException;
    method public abstract org.w3c.dom.Document? parseXml(CharSequence xml, java.io.File file);
    method public abstract org.w3c.dom.Document? parseXml(com.android.tools.lint.detector.api.XmlContext context);
  }

}

package com.android.tools.lint.detector.api {

  public final class AllOfConstraint extends com.android.tools.lint.detector.api.Constraint {
    method public boolean accept(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Incident incident);
    method public com.android.tools.lint.detector.api.Constraint getLeft();
    method public com.android.tools.lint.detector.api.Constraint getRight();
    property public final com.android.tools.lint.detector.api.Constraint left;
    property public final com.android.tools.lint.detector.api.Constraint right;
  }

  public final class AnnotationInfo {
    ctor public AnnotationInfo(org.jetbrains.uast.UAnnotation annotation, String qualifiedName, com.intellij.psi.PsiElement annotated, com.android.tools.lint.detector.api.AnnotationOrigin origin);
    method public com.intellij.psi.PsiElement getAnnotated();
    method public org.jetbrains.uast.UAnnotation getAnnotation();
    method public com.android.tools.lint.detector.api.AnnotationOrigin getOrigin();
    method public String getQualifiedName();
    method public boolean isInherited();
    property public final com.intellij.psi.PsiElement annotated;
    property public final org.jetbrains.uast.UAnnotation annotation;
    property public final com.android.tools.lint.detector.api.AnnotationOrigin origin;
    property public final String qualifiedName;
  }

  public enum AnnotationOrigin {
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationOrigin CLASS;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationOrigin FIELD;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationOrigin FILE;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationOrigin METHOD;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationOrigin OUTER_CLASS;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationOrigin PACKAGE;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationOrigin PARAMETER;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationOrigin PROPERTY;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationOrigin VARIABLE;
  }

  public final class AnnotationUsageInfo {
    ctor public AnnotationUsageInfo(int index, java.util.List<com.android.tools.lint.detector.api.AnnotationInfo> annotations, org.jetbrains.uast.UElement usage, com.intellij.psi.PsiElement? referenced, com.android.tools.lint.detector.api.AnnotationUsageType type);
    method public boolean anyCloser(kotlin.jvm.functions.Function1<? super com.android.tools.lint.detector.api.AnnotationInfo,java.lang.Boolean> condition);
    method public boolean anySameScope(kotlin.jvm.functions.Function1<? super com.android.tools.lint.detector.api.AnnotationInfo,java.lang.Boolean> condition);
    method public com.android.tools.lint.detector.api.AnnotationInfo? findCloser(kotlin.jvm.functions.Function1<? super com.android.tools.lint.detector.api.AnnotationInfo,java.lang.Boolean> condition);
    method public com.android.tools.lint.detector.api.AnnotationInfo? findSameScope(kotlin.jvm.functions.Function1<? super com.android.tools.lint.detector.api.AnnotationInfo,java.lang.Boolean> condition);
    method public java.util.List<com.android.tools.lint.detector.api.AnnotationInfo> getAnnotations();
    method public int getIndex();
    method public com.intellij.psi.PsiElement? getReferenced();
    method public com.android.tools.lint.detector.api.AnnotationUsageType getType();
    method public org.jetbrains.uast.UElement getUsage();
    method public void setIndex(int index);
    method public void setType(com.android.tools.lint.detector.api.AnnotationUsageType type);
    property public final java.util.List<com.android.tools.lint.detector.api.AnnotationInfo> annotations;
    property public final int index;
    property public final com.intellij.psi.PsiElement? referenced;
    property public final com.android.tools.lint.detector.api.AnnotationUsageType type;
    property public final org.jetbrains.uast.UElement usage;
  }

  public enum AnnotationUsageType {
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType ANNOTATION_REFERENCE;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType ASSIGNMENT_LHS;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType ASSIGNMENT_RHS;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType BINARY;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType CLASS_REFERENCE;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType EQUALITY;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType EXTENDS;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType FIELD_REFERENCE;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType METHOD_CALL;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType METHOD_CALL_CLASS;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType METHOD_CALL_PACKAGE;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType METHOD_CALL_PARAMETER;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType METHOD_OVERRIDE;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType METHOD_REFERENCE;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType METHOD_RETURN;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType VARIABLE_REFERENCE;
  }

  public final class AnyOfConstraint extends com.android.tools.lint.detector.api.Constraint {
    method public boolean accept(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Incident incident);
    method public com.android.tools.lint.detector.api.Constraint getLeft();
    method public com.android.tools.lint.detector.api.Constraint getRight();
    property public final com.android.tools.lint.detector.api.Constraint left;
    property public final com.android.tools.lint.detector.api.Constraint right;
  }

  public final class ApiKt {
    method public static String describeApi(int api);
    field public static final int CURRENT_API = 11; // 0xb
  }

  public final class ApplicableVariants {
    ctor public ApplicableVariants(java.util.Set<java.lang.String> applicableVariants);
    method public void addVariant(String variantName);
    method public java.util.List<java.lang.String> getExcludedVariantNames();
    method public java.util.List<java.lang.String> getIncludedVariantNames();
    method public boolean getVariantSpecific();
    method public java.util.Set<java.lang.String> getVariants();
    method public boolean includesMoreThanExcludes();
    property public final java.util.List<java.lang.String> excludedVariantNames;
    property public final java.util.List<java.lang.String> includedVariantNames;
    property public final boolean variantSpecific;
    property public final java.util.Set<java.lang.String> variants;
  }

  public interface BinaryResourceScanner extends com.android.tools.lint.detector.api.FileScanner {
    method public boolean appliesTo(com.android.resources.ResourceFolderType folderType);
    method public void checkBinaryResource(com.android.tools.lint.detector.api.ResourceContext context);
  }

  @com.google.common.annotations.Beta public final class Category implements java.lang.Comparable<com.android.tools.lint.detector.api.Category> {
    ctor public Category(com.android.tools.lint.detector.api.Category? parent, String name, int priority);
    method public int compareTo(com.android.tools.lint.detector.api.Category other);
    method public com.android.tools.lint.detector.api.Category? component1();
    method public String component2();
    method public int component3();
    method public com.android.tools.lint.detector.api.Category copy(com.android.tools.lint.detector.api.Category? parent, String name, int priority);
    method public static com.android.tools.lint.detector.api.Category create(String name, int priority);
    method public static com.android.tools.lint.detector.api.Category create(com.android.tools.lint.detector.api.Category? parent, String name, int priority);
    method public static com.android.tools.lint.detector.api.Category? getCategory(String name);
    method public String getFullName();
    method public String getName();
    method public com.android.tools.lint.detector.api.Category? getParent();
    method public int getPriority();
    property public final String fullName;
    property public final String name;
    property public final com.android.tools.lint.detector.api.Category? parent;
    property public final int priority;
    field public static final com.android.tools.lint.detector.api.Category A11Y;
    field public static final com.android.tools.lint.detector.api.Category APP_SIZE;
    field public static final com.android.tools.lint.detector.api.Category CHROME_OS;
    field public static final com.android.tools.lint.detector.api.Category COMPLIANCE;
    field public static final com.android.tools.lint.detector.api.Category CORRECTNESS;
    field public static final com.android.tools.lint.detector.api.Category CUSTOM_LINT_CHECKS;
    field public static final com.android.tools.lint.detector.api.Category.Companion Companion;
    field public static final com.android.tools.lint.detector.api.Category I18N;
    field public static final com.android.tools.lint.detector.api.Category ICONS;
    field public static final com.android.tools.lint.detector.api.Category INTEROPERABILITY;
    field public static final com.android.tools.lint.detector.api.Category INTEROPERABILITY_JAVA;
    field public static final com.android.tools.lint.detector.api.Category INTEROPERABILITY_KOTLIN;
    field public static final com.android.tools.lint.detector.api.Category LINT;
    field public static final com.android.tools.lint.detector.api.Category MESSAGES;
    field public static final com.android.tools.lint.detector.api.Category PERFORMANCE;
    field public static final com.android.tools.lint.detector.api.Category PRODUCTIVITY;
    field public static final com.android.tools.lint.detector.api.Category RTL;
    field public static final com.android.tools.lint.detector.api.Category SECURITY;
    field public static final com.android.tools.lint.detector.api.Category TESTING;
    field public static final com.android.tools.lint.detector.api.Category TYPOGRAPHY;
    field public static final com.android.tools.lint.detector.api.Category USABILITY;
  }

  public static final class Category.Companion {
    method public com.android.tools.lint.detector.api.Category create(String name, int priority);
    method public com.android.tools.lint.detector.api.Category create(com.android.tools.lint.detector.api.Category? parent, String name, int priority);
    method public com.android.tools.lint.detector.api.Category? getCategory(String name);
  }

  @com.google.common.annotations.Beta public final class ClassContext extends com.android.tools.lint.detector.api.Context {
    ctor public ClassContext(com.android.tools.lint.client.api.LintDriver driver, com.android.tools.lint.detector.api.Project project, com.android.tools.lint.detector.api.Project? main, java.io.File file, java.io.File? jarFile, java.io.File binDir, byte[] bytecode, org.objectweb.asm.tree.ClassNode classNode, boolean isFromClassLibrary, CharSequence? sourceContents);
    method public static String createSignature(String? owner, String? name, String? desc);
    method public static int findLineNumber(org.objectweb.asm.tree.AbstractInsnNode node);
    method public static int findLineNumber(org.objectweb.asm.tree.MethodNode node);
    method public static int findLineNumber(org.objectweb.asm.tree.ClassNode node);
    method public com.intellij.psi.PsiClass? findPsiClass(org.objectweb.asm.tree.ClassNode classNode);
    method public com.intellij.psi.PsiClass? findPsiClass(String qualifiedName);
    method public byte[] getBytecode();
    method public org.objectweb.asm.tree.ClassNode getClassNode();
    method public static String getFqcn(String owner);
    method public static String getInternalName(String qualifiedName);
    method public java.io.File? getJarFile();
    method public com.android.tools.lint.detector.api.Location getLocation(org.objectweb.asm.tree.ClassNode classNode);
    method public com.android.tools.lint.detector.api.Location getLocation(org.objectweb.asm.tree.MethodNode methodNode, org.objectweb.asm.tree.ClassNode classNode);
    method public com.android.tools.lint.detector.api.Location getLocation(org.objectweb.asm.tree.AbstractInsnNode instruction);
    method public com.android.tools.lint.detector.api.Location getLocationForLine(int line, String? patternStart, String? patternEnd, com.android.tools.lint.detector.api.Location.SearchHints? hints);
    method public CharSequence getSourceContents();
    method public CharSequence? getSourceContents(boolean read);
    method public java.io.File? getSourceFile();
    method public boolean isFromClassLibrary();
    method public void report(com.android.tools.lint.detector.api.Issue issue, org.objectweb.asm.tree.MethodNode? method, org.objectweb.asm.tree.AbstractInsnNode? instruction, com.android.tools.lint.detector.api.Location location, String message);
    method public void report(com.android.tools.lint.detector.api.Issue issue, org.objectweb.asm.tree.FieldNode? field, com.android.tools.lint.detector.api.Location location, String message);
    property public final byte[] bytecode;
    property public final org.objectweb.asm.tree.ClassNode classNode;
    property public final boolean isFromClassLibrary;
    property public final java.io.File? jarFile;
    field public static final com.android.tools.lint.detector.api.ClassContext.Companion Companion;
  }

  public static final class ClassContext.Companion {
    method public String createSignature(String? owner, String? name, String? desc);
    method public int findLineNumber(org.objectweb.asm.tree.AbstractInsnNode node);
    method public int findLineNumber(org.objectweb.asm.tree.MethodNode node);
    method public int findLineNumber(org.objectweb.asm.tree.ClassNode node);
    method public String getFqcn(String owner);
    method public String getInternalName(String qualifiedName);
  }

  public interface ClassScanner extends com.android.tools.lint.detector.api.FileScanner {
    method public void checkCall(com.android.tools.lint.detector.api.ClassContext context, org.objectweb.asm.tree.ClassNode classNode, org.objectweb.asm.tree.MethodNode method, org.objectweb.asm.tree.MethodInsnNode call);
    method public void checkClass(com.android.tools.lint.detector.api.ClassContext context, org.objectweb.asm.tree.ClassNode classNode);
    method public void checkInstruction(com.android.tools.lint.detector.api.ClassContext context, org.objectweb.asm.tree.ClassNode classNode, org.objectweb.asm.tree.MethodNode method, org.objectweb.asm.tree.AbstractInsnNode instruction);
    method public int[]? getApplicableAsmNodeTypes();
    method public java.util.List<java.lang.String>? getApplicableCallNames();
    method public java.util.List<java.lang.String>? getApplicableCallOwners();
  }

  public class ConstantEvaluator {
    ctor public ConstantEvaluator();
    method public com.android.tools.lint.detector.api.ConstantEvaluator! allowFieldInitializers();
    method public com.android.tools.lint.detector.api.ConstantEvaluator! allowUnknowns();
    method public Object? evaluate(org.jetbrains.uast.UElement?);
    method public Object? evaluate(com.intellij.psi.PsiElement?);
    method public static Object? evaluate(com.android.tools.lint.detector.api.JavaContext?, com.intellij.psi.PsiElement);
    method public static Object? evaluate(com.android.tools.lint.detector.api.JavaContext?, org.jetbrains.uast.UElement);
    method public static String? evaluateString(com.android.tools.lint.detector.api.JavaContext?, com.intellij.psi.PsiElement, boolean);
    method public static String? evaluateString(com.android.tools.lint.detector.api.JavaContext?, org.jetbrains.uast.UElement, boolean);
    method public static com.intellij.psi.PsiExpression? findLastAssignment(com.intellij.psi.PsiElement, com.intellij.psi.PsiVariable);
    method public static int getArraySize(Object?);
    method public static boolean isArrayLiteral(com.intellij.psi.PsiElement?);
    method public static boolean isArrayLiteral(org.jetbrains.uast.UElement?);
  }

  public static class ConstantEvaluator.ArrayReference {
    ctor public ConstantEvaluator.ArrayReference(Class<?>?, int, int);
    ctor public ConstantEvaluator.ArrayReference(String?, int, int);
    field public final String? className;
    field public final int dimensions;
    field public final int size;
    field public final Class<?>? type;
  }

  public static class ConstantEvaluator.LastAssignmentFinder extends org.jetbrains.uast.visitor.AbstractUastVisitor {
    ctor public ConstantEvaluator.LastAssignmentFinder(com.intellij.psi.PsiVariable, org.jetbrains.uast.UElement, com.android.tools.lint.detector.api.ConstantEvaluator?, int);
    method public Object? getCurrentValue();
    method public org.jetbrains.uast.UElement? getLastAssignment();
    field public static final Object! LAST_ASSIGNMENT_VALUE_UNKNOWN;
  }

  public abstract sealed class Constraint {
    method public abstract boolean accept(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Incident incident);
    method public final infix com.android.tools.lint.detector.api.Constraint and(com.android.tools.lint.detector.api.Constraint other);
    method public final infix com.android.tools.lint.detector.api.Constraint or(com.android.tools.lint.detector.api.Constraint other);
  }

  public final class Constraints {
    method public static com.android.tools.lint.detector.api.Constraint isAndroidProject();
    method public static com.android.tools.lint.detector.api.Constraint isLibraryProject();
    method public static com.android.tools.lint.detector.api.Constraint minSdkAtLeast(int minSdkVersion);
    method public static com.android.tools.lint.detector.api.Constraint minSdkLessThan(int minSdkVersion);
    method public static com.android.tools.lint.detector.api.Constraint notAndroidProject();
    method public static com.android.tools.lint.detector.api.Constraint notLibraryProject();
    method public static com.android.tools.lint.detector.api.Constraint targetSdkAtLeast(int minSdkVersion);
    method public static com.android.tools.lint.detector.api.Constraint targetSdkLessThan(int minSdkVersion);
  }

  @com.google.common.annotations.Beta public class Context {
    ctor public Context(com.android.tools.lint.client.api.LintDriver driver, com.android.tools.lint.detector.api.Project project, com.android.tools.lint.detector.api.Project? main, java.io.File file, optional CharSequence? contents);
    method public final boolean containsCommentSuppress();
    method public final com.android.tools.lint.client.api.Configuration findConfiguration(java.io.File file);
    method public final com.android.tools.lint.client.api.LintClient getClient();
    method public final com.android.tools.lint.client.api.Configuration getConfiguration();
    method public CharSequence? getContents();
    method public final com.android.tools.lint.client.api.LintDriver getDriver();
    method public final com.android.tools.lint.detector.api.Location getLocation(Object? node, optional com.android.tools.lint.detector.api.LocationType type);
    method public final com.android.tools.lint.detector.api.Project getMainProject();
    method public final com.android.tools.lint.detector.api.PartialResult getPartialResults(com.android.tools.lint.detector.api.Issue issue);
    method public final int getPhase();
    method public final com.android.tools.lint.detector.api.Project getProject();
    method public final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> getScope();
    method public final com.android.tools.lint.client.api.SdkInfo getSdkInfo();
    method protected String? getSuppressCommentPrefix();
    method public final boolean isEnabled(com.android.tools.lint.detector.api.Issue issue);
    method public final boolean isGlobalAnalysis();
    method public final boolean isSuppressedWithComment(int startOffset, com.android.tools.lint.detector.api.Issue issue);
    method public final void log(Throwable? exception, String? format, java.lang.Object... args);
    method public void report(com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Location location, String message, optional com.android.tools.lint.detector.api.LintFix? quickfixData);
    method public void report(com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Location location, String message);
    method public final void report(com.android.tools.lint.detector.api.Incident incident);
    method public final void report(com.android.tools.lint.detector.api.Incident incident, com.android.tools.lint.detector.api.Constraint constraint);
    method public final void report(com.android.tools.lint.detector.api.Incident incident, com.android.tools.lint.detector.api.LintMap map);
    method public final void requestRepeat(com.android.tools.lint.detector.api.Detector detector, java.util.EnumSet<com.android.tools.lint.detector.api.Scope>? scope);
    property public final com.android.tools.lint.client.api.LintClient client;
    property public final com.android.tools.lint.client.api.Configuration configuration;
    property public final com.android.tools.lint.client.api.LintDriver driver;
    property public final com.android.tools.lint.detector.api.Project mainProject;
    property public final int phase;
    property public final com.android.tools.lint.detector.api.Project project;
    property public final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scope;
    property public final com.android.tools.lint.client.api.SdkInfo sdkInfo;
    property protected String? suppressCommentPrefix;
    field public static final com.android.tools.lint.detector.api.Context.Companion Companion;
    field public static final String SUPPRESS_JAVA_COMMENT_PREFIX = "noinspection ";
    field public static final String SUPPRESS_XML_COMMENT_PREFIX = "<!--suppress ";
    field public final java.io.File file;
  }

  public static final class Context.Companion {
    method public boolean checkForbidden(String methodName, java.io.File file, com.android.tools.lint.client.api.LintDriver? driver);
    method @com.google.common.annotations.VisibleForTesting public boolean isSuppressedWithComment(String line, com.android.tools.lint.detector.api.Issue issue);
  }

  @com.google.common.annotations.Beta public final class DefaultPosition extends com.android.tools.lint.detector.api.Position {
    ctor public DefaultPosition(int line, int column, int offset);
    method public int component1();
    method public int component2();
    method public int component3();
    method public com.android.tools.lint.detector.api.DefaultPosition copy(int line, int column, int offset);
    method public int getColumn();
    method public int getLine();
    method public int getOffset();
    property public int column;
    property public int line;
    property public int offset;
  }

  public enum Desugaring {
    method public final int getConstant();
    property public final int constant;
    enum_constant public static final com.android.tools.lint.detector.api.Desugaring INTERFACE_METHODS;
    enum_constant public static final com.android.tools.lint.detector.api.Desugaring JAVA_8_LIBRARY;
    enum_constant public static final com.android.tools.lint.detector.api.Desugaring LAMBDAS;
    enum_constant public static final com.android.tools.lint.detector.api.Desugaring LONG_COMPARE;
    enum_constant public static final com.android.tools.lint.detector.api.Desugaring METHOD_REFERENCES;
    enum_constant public static final com.android.tools.lint.detector.api.Desugaring OBJECTS_REQUIRE_NON_NULL;
    enum_constant public static final com.android.tools.lint.detector.api.Desugaring TRY_WITH_RESOURCES;
    enum_constant public static final com.android.tools.lint.detector.api.Desugaring TYPE_ANNOTATIONS;
    field public static final com.android.tools.lint.detector.api.Desugaring.Companion Companion;
    field public static final java.util.Set<com.android.tools.lint.detector.api.Desugaring> DEFAULT;
    field public static final java.util.Set<com.android.tools.lint.detector.api.Desugaring> FULL;
    field public static final java.util.Set<com.android.tools.lint.detector.api.Desugaring> NONE;
  }

  public static final class Desugaring.Companion {
    method public com.android.tools.lint.detector.api.Desugaring fromConstant(int constant);
  }

  public final class DesugaringKt {
    field public static final int DESUGARING_INTERFACE_METHODS = 4; // 0x4
    field public static final int DESUGARING_JAVA_8_LIBRARY = 8; // 0x8
    field public static final int DESUGARING_LAMBDAS = 1; // 0x1
    field public static final int DESUGARING_LONG_COMPARE = 7; // 0x7
    field public static final int DESUGARING_METHOD_REFERENCES = 2; // 0x2
    field public static final int DESUGARING_OBJECTS_REQUIRE_NON_NULL = 6; // 0x6
    field public static final int DESUGARING_TRY_WITH_RESOURCES = 5; // 0x5
    field public static final int DESUGARING_TYPE_ANNOTATIONS = 3; // 0x3
  }

  @com.google.common.annotations.Beta public abstract class Detector {
    ctor public Detector();
    method public void afterCheckEachProject(com.android.tools.lint.detector.api.Context context);
    method public void afterCheckFile(com.android.tools.lint.detector.api.Context context);
    method @Deprecated public void afterCheckLibraryProject(com.android.tools.lint.detector.api.Context context);
    method @Deprecated public void afterCheckProject(com.android.tools.lint.detector.api.Context context);
    method public void afterCheckRootProject(com.android.tools.lint.detector.api.Context context);
    method public void analyzeCallGraph(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.interprocedural.CallGraphResult callGraph);
    method public java.util.List<java.lang.String>? applicableAnnotations();
    method public java.util.List<java.lang.String>? applicableSuperClasses();
    method @Deprecated public final boolean appliesTo(com.android.tools.lint.detector.api.Context context, java.io.File file);
    method public boolean appliesTo(com.android.resources.ResourceFolderType folderType);
    method public boolean appliesToResourceRefs();
    method public void beforeCheckEachProject(com.android.tools.lint.detector.api.Context context);
    method public void beforeCheckFile(com.android.tools.lint.detector.api.Context context);
    method @Deprecated public void beforeCheckLibraryProject(com.android.tools.lint.detector.api.Context context);
    method @Deprecated public void beforeCheckProject(com.android.tools.lint.detector.api.Context context);
    method public void beforeCheckRootProject(com.android.tools.lint.detector.api.Context context);
    method public void checkBinaryResource(com.android.tools.lint.detector.api.ResourceContext context);
    method public void checkCall(com.android.tools.lint.detector.api.ClassContext context, org.objectweb.asm.tree.ClassNode classNode, org.objectweb.asm.tree.MethodNode method, org.objectweb.asm.tree.MethodInsnNode call);
    method public void checkClass(com.android.tools.lint.detector.api.ClassContext context, org.objectweb.asm.tree.ClassNode classNode);
    method public void checkClass(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiClass declaration);
    method public void checkDslPropertyAssignment(com.android.tools.lint.detector.api.GradleContext context, String property, String value, String parent, String? parentParent, Object valueCookie, Object statementCookie);
    method public void checkDslPropertyAssignment(com.android.tools.lint.detector.api.GradleContext context, String property, String value, String parent, String? parentParent, Object propertyCookie, Object valueCookie, Object statementCookie);
    method public void checkFolder(com.android.tools.lint.detector.api.ResourceContext context, String folderName);
    method public void checkInstruction(com.android.tools.lint.detector.api.ClassContext context, org.objectweb.asm.tree.ClassNode classNode, org.objectweb.asm.tree.MethodNode method, org.objectweb.asm.tree.AbstractInsnNode instruction);
    method public void checkMergedProject(com.android.tools.lint.detector.api.Context context);
    method public void checkMethodCall(com.android.tools.lint.detector.api.GradleContext context, String statement, String? parent, java.util.Map<java.lang.String,java.lang.String> namedArguments, java.util.List<java.lang.String> unnamedArguments, Object cookie);
    method public void checkMethodCall(com.android.tools.lint.detector.api.GradleContext context, String statement, String? parent, String? parentParent, java.util.Map<java.lang.String,java.lang.String> namedArguments, java.util.List<java.lang.String> unnamedArguments, Object cookie);
    method public void checkPartialResults(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.PartialResult partialResults);
    method public com.intellij.psi.JavaElementVisitor? createPsiVisitor(com.android.tools.lint.detector.api.JavaContext context);
    method public com.android.tools.lint.client.api.UElementHandler? createUastHandler(com.android.tools.lint.detector.api.JavaContext context);
    method public boolean filterIncident(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Incident incident, com.android.tools.lint.detector.api.LintMap map);
    method protected com.android.tools.lint.detector.api.LintFix.Builder fix();
    method public int[]? getApplicableAsmNodeTypes();
    method public java.util.Collection<java.lang.String>? getApplicableAttributes();
    method public java.util.List<java.lang.String>? getApplicableCallNames();
    method public java.util.List<java.lang.String>? getApplicableCallOwners();
    method public java.util.List<java.lang.String>? getApplicableConstructorTypes();
    method public java.util.Collection<java.lang.String>? getApplicableElements();
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Scope> getApplicableFiles();
    method public java.util.List<java.lang.String>? getApplicableMethodNames();
    method public java.util.List<java.lang.Class<? extends com.intellij.psi.PsiElement>>? getApplicablePsiTypes();
    method public java.util.List<java.lang.String>? getApplicableReferenceNames();
    method public java.util.List<java.lang.Class<? extends org.jetbrains.uast.UElement>>? getApplicableUastTypes();
    method public boolean getCustomVisitor();
    method @Deprecated public com.android.tools.lint.detector.api.Speed getSpeed(com.android.tools.lint.detector.api.Issue issue);
    method public boolean inheritAnnotation(String annotation);
    method public boolean isApplicableAnnotationUsage(com.android.tools.lint.detector.api.AnnotationUsageType type);
    method public boolean isCallGraphRequired();
    method protected final com.android.tools.lint.detector.api.LintMap map();
    method public void run(com.android.tools.lint.detector.api.Context context);
    method @Deprecated public void visitAnnotationUsage(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement usage, com.android.tools.lint.detector.api.AnnotationUsageType type, org.jetbrains.uast.UAnnotation annotation, String qualifiedName, com.intellij.psi.PsiMethod? method, java.util.List<? extends org.jetbrains.uast.UAnnotation> annotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allMemberAnnotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allClassAnnotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allPackageAnnotations);
    method @Deprecated public void visitAnnotationUsage(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement usage, com.android.tools.lint.detector.api.AnnotationUsageType type, org.jetbrains.uast.UAnnotation annotation, String qualifiedName, com.intellij.psi.PsiMethod? method, com.intellij.psi.PsiElement? referenced, java.util.List<? extends org.jetbrains.uast.UAnnotation> annotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allMemberAnnotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allClassAnnotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allPackageAnnotations);
    method public void visitAnnotationUsage(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement element, com.android.tools.lint.detector.api.AnnotationInfo annotationInfo, com.android.tools.lint.detector.api.AnnotationUsageInfo usageInfo);
    method public void visitAttribute(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Attr attribute);
    method public void visitBuildScript(com.android.tools.lint.detector.api.Context context);
    method public void visitClass(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UClass declaration);
    method public void visitClass(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.ULambdaExpression lambda);
    method public void visitConstructor(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.JavaElementVisitor? visitor, com.intellij.psi.PsiNewExpression node, com.intellij.psi.PsiMethod constructor);
    method public void visitConstructor(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UCallExpression node, com.intellij.psi.PsiMethod constructor);
    method public void visitDocument(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Document document);
    method public void visitElement(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Element element);
    method public void visitElementAfter(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Element element);
    method public void visitMethod(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.JavaElementVisitor? visitor, com.intellij.psi.PsiMethodCallExpression call, com.intellij.psi.PsiMethod method);
    method @Deprecated public void visitMethod(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UCallExpression node, com.intellij.psi.PsiMethod method);
    method public void visitMethodCall(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UCallExpression node, com.intellij.psi.PsiMethod method);
    method public void visitReference(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.JavaElementVisitor? visitor, com.intellij.psi.PsiJavaCodeReferenceElement reference, com.intellij.psi.PsiElement referenced);
    method public void visitReference(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UReferenceExpression reference, com.intellij.psi.PsiElement referenced);
    method public void visitResourceReference(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.JavaElementVisitor? visitor, com.intellij.psi.PsiElement node, com.android.resources.ResourceType type, String name, boolean isFramework);
    method public void visitResourceReference(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement node, com.android.resources.ResourceType type, String name, boolean isFramework);
    property public boolean customVisitor;
  }

  public static interface Detector.BinaryResourceScanner extends com.android.tools.lint.detector.api.BinaryResourceScanner {
  }

  public static interface Detector.ClassScanner extends com.android.tools.lint.detector.api.ClassScanner {
  }

  public static interface Detector.GradleScanner extends com.android.tools.lint.detector.api.GradleScanner {
  }

  public static interface Detector.OtherFileScanner extends com.android.tools.lint.detector.api.OtherFileScanner {
  }

  public static interface Detector.ResourceFolderScanner extends com.android.tools.lint.detector.api.ResourceFolderScanner {
  }

  public static interface Detector.UastScanner extends com.android.tools.lint.detector.api.SourceCodeScanner {
  }

  public static interface Detector.XmlScanner extends com.android.tools.lint.detector.api.XmlScanner {
  }

  public interface FileScanner {
    method public void afterCheckFile(com.android.tools.lint.detector.api.Context context);
    method public void beforeCheckFile(com.android.tools.lint.detector.api.Context context);
  }

  public final class GradleContext extends com.android.tools.lint.detector.api.Context {
    ctor public GradleContext(com.android.tools.lint.client.api.GradleVisitor gradleVisitor, com.android.tools.lint.client.api.LintDriver driver, com.android.tools.lint.detector.api.Project project, com.android.tools.lint.detector.api.Project? main, java.io.File file);
    method public com.android.tools.lint.client.api.GradleVisitor getGradleVisitor();
    method public com.android.tools.lint.detector.api.Location getLocation(Object cookie);
    method @Deprecated public Object getPropertyKeyCookie(Object cookie);
    method @Deprecated public Object getPropertyPairCookie(Object cookie);
    method public boolean isSuppressedWithComment(Object cookie, com.android.tools.lint.detector.api.Issue issue);
    method public void report(com.android.tools.lint.detector.api.Issue issue, Object cookie, com.android.tools.lint.detector.api.Location location, String message, optional com.android.tools.lint.detector.api.LintFix? fix);
    property public final com.android.tools.lint.client.api.GradleVisitor gradleVisitor;
    field public static final com.android.tools.lint.detector.api.GradleContext.Companion Companion;
  }

  public static final class GradleContext.Companion {
    method public int getIntLiteralValue(String value, int defaultValue);
    method public String? getStringLiteralValue(String value);
    method public boolean isNonNegativeInteger(String token);
    method public boolean isStringLiteral(String token);
  }

  public interface GradleScanner extends com.android.tools.lint.detector.api.FileScanner {
    method @Deprecated public void checkDslPropertyAssignment(com.android.tools.lint.detector.api.GradleContext context, String property, String value, String parent, String? parentParent, Object valueCookie, Object statementCookie);
    method public void checkDslPropertyAssignment(com.android.tools.lint.detector.api.GradleContext context, String property, String value, String parent, String? parentParent, Object propertyCookie, Object valueCookie, Object statementCookie);
    method @Deprecated public void checkMethodCall(com.android.tools.lint.detector.api.GradleContext context, String statement, String? parent, java.util.Map<java.lang.String,java.lang.String> namedArguments, java.util.List<java.lang.String> unnamedArguments, Object cookie);
    method public void checkMethodCall(com.android.tools.lint.detector.api.GradleContext context, String statement, String? parent, String? parentParent, java.util.Map<java.lang.String,java.lang.String> namedArguments, java.util.List<java.lang.String> unnamedArguments, Object cookie);
    method public boolean getCustomVisitor();
    method public void visitBuildScript(com.android.tools.lint.detector.api.Context context);
    property public abstract boolean customVisitor;
  }

  @com.google.common.annotations.Beta public class Implementation {
    ctor public Implementation(Class<? extends com.android.tools.lint.detector.api.Detector>, java.util.EnumSet<com.android.tools.lint.detector.api.Scope!>);
    ctor @java.lang.SafeVarargs public Implementation(Class<? extends com.android.tools.lint.detector.api.Detector>, java.util.EnumSet<com.android.tools.lint.detector.api.Scope!>, java.util.EnumSet<com.android.tools.lint.detector.api.Scope!>!...);
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Scope!>![] getAnalysisScopes();
    method public Class<? extends com.android.tools.lint.detector.api.Detector> getDetectorClass();
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Scope!> getScope();
    method public boolean isAdequate(java.util.EnumSet<com.android.tools.lint.detector.api.Scope!>);
  }

  public final class Incident implements java.lang.Comparable<com.android.tools.lint.detector.api.Incident> {
    ctor public Incident(com.android.tools.lint.detector.api.Issue issue, String message, com.android.tools.lint.detector.api.Location location, optional Object? scope, optional com.android.tools.lint.detector.api.LintFix? fix);
    ctor public Incident(com.android.tools.lint.detector.api.Issue issue, String message, com.android.tools.lint.detector.api.Location location);
    ctor public Incident(com.android.tools.lint.detector.api.Issue issue, String message, com.android.tools.lint.detector.api.Location location, com.android.tools.lint.detector.api.LintFix? fix);
    ctor public Incident(com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Location location, String message);
    ctor public Incident(com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Location location, String message, com.android.tools.lint.detector.api.LintFix? fix);
    ctor public Incident(com.android.tools.lint.detector.api.Issue issue, Object scope, com.android.tools.lint.detector.api.Location location, String message);
    ctor public Incident(com.android.tools.lint.detector.api.Issue issue, Object scope, com.android.tools.lint.detector.api.Location location, String message, com.android.tools.lint.detector.api.LintFix? fix);
    ctor public Incident();
    method public com.android.tools.lint.detector.api.Incident at(Object scope);
    method public int compareTo(com.android.tools.lint.detector.api.Incident other);
    method public com.android.tools.lint.detector.api.Incident fix(com.android.tools.lint.detector.api.LintFix? fix);
    method public com.android.tools.lint.detector.api.ApplicableVariants? getApplicableVariants();
    method public com.android.tools.lint.detector.api.LintMap? getClientProperties();
    method public String getDisplayPath();
    method public int getEndOffset();
    method public java.io.File getFile();
    method public com.android.tools.lint.detector.api.LintFix? getFix();
    method public com.android.tools.lint.detector.api.Issue getIssue();
    method public int getLine();
    method public com.android.tools.lint.detector.api.Location getLocation();
    method public String getMessage();
    method public com.android.tools.lint.detector.api.Project? getProject();
    method public Object? getScope();
    method public com.android.tools.lint.detector.api.Severity getSeverity();
    method public int getStartOffset();
    method public boolean getWasAutoFixed();
    method public com.android.tools.lint.detector.api.Incident issue(com.android.tools.lint.detector.api.Issue issue);
    method public com.android.tools.lint.detector.api.Incident location(com.android.tools.lint.detector.api.Location location);
    method public com.android.tools.lint.detector.api.Incident message(String message);
    method public com.android.tools.lint.detector.api.Incident overrideSeverity(com.android.tools.lint.detector.api.Severity severity);
    method public com.android.tools.lint.detector.api.Incident project(com.android.tools.lint.detector.api.Project? project);
    method public void report(com.android.tools.lint.detector.api.Context context);
    method public void report();
    method public com.android.tools.lint.detector.api.Incident scope(Object? scope);
    method public void setApplicableVariants(com.android.tools.lint.detector.api.ApplicableVariants? applicableVariants);
    method public void setClientProperties(com.android.tools.lint.detector.api.LintMap? clientProperties);
    method public void setFix(com.android.tools.lint.detector.api.LintFix? fix);
    method public void setIssue(com.android.tools.lint.detector.api.Issue issue);
    method public void setLocation(com.android.tools.lint.detector.api.Location location);
    method public void setMessage(String message);
    method public void setProject(com.android.tools.lint.detector.api.Project? project);
    method public void setScope(Object? scope);
    method public void setSeverity(com.android.tools.lint.detector.api.Severity severity);
    method public void setWasAutoFixed(boolean wasAutoFixed);
    property public final com.android.tools.lint.detector.api.ApplicableVariants? applicableVariants;
    property public final com.android.tools.lint.detector.api.LintMap? clientProperties;
    property public final int endOffset;
    property public final java.io.File file;
    property public final com.android.tools.lint.detector.api.LintFix? fix;
    property public final com.android.tools.lint.detector.api.Issue issue;
    property public final int line;
    property public final com.android.tools.lint.detector.api.Location location;
    property public final String message;
    property public final com.android.tools.lint.detector.api.Project? project;
    property public final Object? scope;
    property public final com.android.tools.lint.detector.api.Severity severity;
    property public final int startOffset;
    property public final boolean wasAutoFixed;
  }

  public final class IncidentKt {
    method public static com.android.tools.lint.detector.api.Incident Incident(com.android.tools.lint.detector.api.Context context);
    method public static com.android.tools.lint.detector.api.Incident Incident(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Issue issue);
  }

  public final class IsAndroidProject extends com.android.tools.lint.detector.api.Constraint {
    method public boolean accept(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Incident incident);
  }

  public final class IsLibraryProject extends com.android.tools.lint.detector.api.Constraint {
    method public boolean accept(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Incident incident);
  }

  @com.google.common.annotations.Beta public final class Issue implements java.lang.Comparable<com.android.tools.lint.detector.api.Issue> {
    method public com.android.tools.lint.detector.api.Issue addMoreInfo(String moreInfoUrl);
    method public int compareTo(com.android.tools.lint.detector.api.Issue other);
    method public static com.android.tools.lint.detector.api.Issue create(String id, String briefDescription, String explanation, com.android.tools.lint.detector.api.Category category, int priority, com.android.tools.lint.detector.api.Severity severity, com.android.tools.lint.detector.api.Implementation implementation);
    method public java.util.List<java.lang.String>? getAliases();
    method public String getBriefDescription(com.android.tools.lint.detector.api.TextFormat format);
    method public com.android.tools.lint.detector.api.Category getCategory();
    method public com.android.tools.lint.detector.api.Severity getDefaultSeverity();
    method public String getExplanation(com.android.tools.lint.detector.api.TextFormat format);
    method public String getId();
    method public com.android.tools.lint.detector.api.Implementation getImplementation();
    method public java.util.List<java.lang.String> getMoreInfo();
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Platform> getPlatforms();
    method public int getPriority();
    method public com.android.tools.lint.client.api.IssueRegistry? getRegistry();
    method public java.util.Collection<java.lang.String>? getSuppressNames();
    method public com.android.tools.lint.client.api.Vendor? getVendor();
    method public boolean isAndroidSpecific();
    method public boolean isEnabledByDefault();
    method public com.android.tools.lint.detector.api.Issue setAliases(java.util.List<java.lang.String>? aliases);
    method public com.android.tools.lint.detector.api.Issue setAndroidSpecific(boolean value);
    method public com.android.tools.lint.detector.api.Issue setEnabledByDefault(boolean enabledByDefault);
    method public void setImplementation(com.android.tools.lint.detector.api.Implementation implementation);
    method public void setRegistry(com.android.tools.lint.client.api.IssueRegistry? registry);
    method public void setVendor(com.android.tools.lint.client.api.Vendor? vendor);
    property public final com.android.tools.lint.detector.api.Category category;
    property public final com.android.tools.lint.detector.api.Severity defaultSeverity;
    property public final String id;
    property public final com.android.tools.lint.detector.api.Implementation implementation;
    property public final java.util.List<java.lang.String> moreInfo;
    property public final java.util.EnumSet<com.android.tools.lint.detector.api.Platform> platforms;
    property public final int priority;
    property public final com.android.tools.lint.client.api.IssueRegistry? registry;
    property public final java.util.Collection<java.lang.String>? suppressNames;
    property public final com.android.tools.lint.client.api.Vendor? vendor;
    field public static final com.android.tools.lint.detector.api.Issue.Companion Companion;
  }

  public static final class Issue.Companion {
    method public com.android.tools.lint.detector.api.Issue create(String id, String briefDescription, String explanation, com.android.tools.lint.detector.api.Category category, int priority, com.android.tools.lint.detector.api.Severity severity, com.android.tools.lint.detector.api.Implementation implementation);
    method public com.android.tools.lint.detector.api.Issue create(String id, String briefDescription, String explanation, com.android.tools.lint.detector.api.Implementation implementation, optional String? moreInfo, optional com.android.tools.lint.detector.api.Category category, optional int priority, optional com.android.tools.lint.detector.api.Severity severity, optional boolean enabledByDefault, optional Boolean? androidSpecific, optional java.util.EnumSet<com.android.tools.lint.detector.api.Platform>? platforms, optional java.util.Collection<java.lang.String>? suppressAnnotations);
  }

  public class JavaContext extends com.android.tools.lint.detector.api.Context {
    ctor public JavaContext(com.android.tools.lint.client.api.LintDriver driver, com.android.tools.lint.detector.api.Project project, com.android.tools.lint.detector.api.Project? main, java.io.File file);
    method public static final com.intellij.psi.PsiElement? findNameElement(com.intellij.psi.PsiElement element);
    method public static final org.jetbrains.uast.UElement? findNameElement(org.jetbrains.uast.UElement element);
    method public final com.android.tools.lint.detector.api.Location getCallLocation(org.jetbrains.uast.UCallExpression call, boolean includeReceiver, boolean includeArguments);
    method public final com.android.tools.lint.client.api.JavaEvaluator getEvaluator();
    method @Deprecated public final com.intellij.psi.PsiJavaFile? getJavaFile();
    method public final com.android.tools.lint.detector.api.Location getLocation(com.intellij.psi.PsiElement node);
    method public final com.android.tools.lint.detector.api.Location getLocation(org.jetbrains.uast.UElement element);
    method public final com.android.tools.lint.detector.api.Location getLocation(org.jetbrains.uast.UMethod element);
    method public final com.android.tools.lint.detector.api.Location getLocation(org.jetbrains.uast.UField element);
    method public static final String? getMethodName(org.jetbrains.uast.UElement call);
    method public final com.android.tools.lint.detector.api.Location getNameLocation(com.intellij.psi.PsiElement element);
    method public final com.android.tools.lint.detector.api.Location getNameLocation(org.jetbrains.uast.UElement element);
    method public final com.android.tools.lint.detector.api.Location getNameLocation(org.jetbrains.uast.UDeclaration cls);
    method public final com.android.tools.lint.detector.api.Location getNameLocation(org.jetbrains.uast.UClass cls);
    method public final com.android.tools.lint.detector.api.Location getNameLocation(org.jetbrains.uast.UMethod cls);
    method public final com.intellij.psi.PsiFile? getPsiFile();
    method public final com.android.tools.lint.detector.api.Location getRangeLocation(com.intellij.psi.PsiElement from, int fromDelta, com.intellij.psi.PsiElement to, int toDelta);
    method public final com.android.tools.lint.detector.api.Location getRangeLocation(org.jetbrains.uast.UElement from, int fromDelta, org.jetbrains.uast.UElement to, int toDelta);
    method public final com.android.tools.lint.detector.api.Location getRangeLocation(org.jetbrains.uast.UDeclaration from, int fromDelta, org.jetbrains.uast.UDeclaration to, int toDelta);
    method public final com.android.tools.lint.detector.api.Location getRangeLocation(com.intellij.psi.PsiElement from, int fromDelta, int length);
    method public final com.android.tools.lint.detector.api.Location getRangeLocation(org.jetbrains.uast.UElement from, int fromDelta, int length);
    method public final org.jetbrains.uast.UFile? getUastFile();
    method public final com.android.tools.lint.client.api.UastParser getUastParser();
    method public final boolean isGeneratedSource();
    method public final boolean isSuppressedWithComment(com.intellij.psi.PsiElement scope, com.android.tools.lint.detector.api.Issue issue);
    method public final boolean isSuppressedWithComment(org.jetbrains.uast.UElement scope, com.android.tools.lint.detector.api.Issue issue);
    method public final boolean isTestSource();
    method public final void report(com.android.tools.lint.detector.api.Issue issue, com.intellij.psi.PsiElement? scope, com.android.tools.lint.detector.api.Location location, String message, optional com.android.tools.lint.detector.api.LintFix? quickfixData);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, com.intellij.psi.PsiElement? scope, com.android.tools.lint.detector.api.Location location, String message);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UElement? scope, com.android.tools.lint.detector.api.Location location, String message, optional com.android.tools.lint.detector.api.LintFix? quickfixData);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UElement? scope, com.android.tools.lint.detector.api.Location location, String message);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UClass? scopeClass, com.android.tools.lint.detector.api.Location location, String message);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UClass? scopeClass, com.android.tools.lint.detector.api.Location location, String message, com.android.tools.lint.detector.api.LintFix? quickfixData);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UMethod? scopeClass, com.android.tools.lint.detector.api.Location location, String message);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UMethod? scopeClass, com.android.tools.lint.detector.api.Location location, String message, com.android.tools.lint.detector.api.LintFix? quickfixData);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UField? scopeClass, com.android.tools.lint.detector.api.Location location, String message);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UField? scopeClass, com.android.tools.lint.detector.api.Location location, String message, com.android.tools.lint.detector.api.LintFix? quickfixData);
    method public final void setGeneratedSource(boolean isGeneratedSource);
    method public final void setJavaFile(com.intellij.psi.PsiFile? javaFile);
    method public final void setTestSource(boolean isTestSource);
    method public final void setUastFile(org.jetbrains.uast.UFile? uastFile);
    method public final void setUastParser(com.android.tools.lint.client.api.UastParser uastParser);
    property public final com.android.tools.lint.client.api.JavaEvaluator evaluator;
    property public final boolean isGeneratedSource;
    property public final boolean isTestSource;
    property @Deprecated public final com.intellij.psi.PsiJavaFile? javaFile;
    property public final com.intellij.psi.PsiFile? psiFile;
    property protected String? suppressCommentPrefix;
    property public final org.jetbrains.uast.UFile? uastFile;
    property public final com.android.tools.lint.client.api.UastParser uastParser;
    field public static final com.android.tools.lint.detector.api.JavaContext.Companion Companion;
    field public com.android.tools.lint.client.api.UastParser uastParser;
  }

  public static final class JavaContext.Companion {
    method public com.intellij.psi.PsiElement? findNameElement(com.intellij.psi.PsiElement element);
    method public org.jetbrains.uast.UElement? findNameElement(org.jetbrains.uast.UElement element);
    method public String? getMethodName(org.jetbrains.uast.UElement call);
  }

  @com.google.common.annotations.Beta public abstract class LayoutDetector extends com.android.tools.lint.detector.api.ResourceXmlDetector {
    ctor public LayoutDetector();
  }

  public final class Lint {
    method public static boolean assertionsEnabled();
    method @java.lang.SafeVarargs public static <T> T? coalesce(T?... ts);
    method public static java.util.Map<org.jetbrains.uast.UExpression,com.intellij.psi.PsiParameter>? computeKotlinArgumentMapping(org.jetbrains.uast.UCallExpression call, com.intellij.psi.PsiMethod method);
    method public static String computeResourceName(String prefix, String name, optional com.android.resources.ResourceFolderType? folderType);
    method public static String describeCounts(int errorCount, int warningCount, boolean comma, boolean capitalize);
    method public static int editDistance(String s, String t, optional int max);
    method public static boolean endsWith(String string, String suffix);
    method public static String? findSubstring(String string, String? prefix, String? suffix);
    method public static String formatList(java.util.List<java.lang.String> strings, optional int maxItems);
    method public static String formatList(java.util.List<java.lang.String> strings, optional int maxItems, optional boolean sort, optional boolean useConjunction);
    method public static String? getAutoBoxedType(String primitive);
    method public static String getBaseName(String fileName);
    method public static int getChildCount(org.w3c.dom.Node node);
    method public static java.util.List<org.w3c.dom.Element> getChildren(org.w3c.dom.Node node);
    method public static java.io.File? getCommonParent(java.util.List<? extends java.io.File> files);
    method public static java.io.File? getCommonParent(java.io.File file1, java.io.File file2);
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public static CharSequence getEncodedString(com.android.tools.lint.client.api.LintClient client, java.io.File file, boolean createString) throws java.io.IOException;
    method public static CharSequence getEncodedString(byte[]? data, boolean createString);
    method public static String getFileNameWithParent(com.android.tools.lint.client.api.LintClient client, java.io.File file);
    method public static String getFileNameWithParent(com.android.tools.lint.client.api.LintClient client, com.android.ide.common.util.PathString file);
    method public static String getFileUri(java.io.File file);
    method public static java.util.List<java.lang.String> getFormattedParameters(String format, String errorMessage);
    method public static java.util.List<com.android.ide.common.rendering.api.StyleResourceValue>? getInheritedStyles(com.android.tools.lint.detector.api.Project project, com.android.tools.lint.client.api.LintClient client, String styleUrl);
    method public static String getInternalMethodName(com.intellij.psi.PsiMethod method);
    method public static String? getInternalName(com.intellij.psi.PsiClass psiClass);
    method public static com.intellij.psi.PsiType? getKotlinDelegatePropertyType(com.intellij.psi.PsiElement? sourcePsi, org.jetbrains.uast.UVariable element);
    method public static com.intellij.pom.java.LanguageLevel getLanguageLevel(org.jetbrains.uast.UElement element, com.intellij.pom.java.LanguageLevel defaultLevel);
    method public static com.intellij.pom.java.LanguageLevel getLanguageLevel(com.intellij.psi.PsiElement element, com.intellij.pom.java.LanguageLevel defaultLevel);
    method public static com.intellij.pom.java.LanguageLevel getLanguageLevel(com.android.tools.lint.detector.api.Project project, com.intellij.pom.java.LanguageLevel defaultLevel);
    method public static String getLayoutName(java.io.File layoutFile);
    method public static com.android.ide.common.resources.configuration.LocaleQualifier? getLocale(String parent);
    method public static com.android.ide.common.resources.configuration.LocaleQualifier? getLocale(com.android.tools.lint.detector.api.XmlContext context);
    method public static String? getLocaleAndRegion(String folderName);
    method public static String? getMethodName(org.jetbrains.uast.UCallExpression call);
    method public static org.objectweb.asm.tree.AbstractInsnNode? getNextInstruction(org.objectweb.asm.tree.AbstractInsnNode node);
    method public static int getNextOpcode(org.objectweb.asm.tree.AbstractInsnNode node);
    method public static org.objectweb.asm.tree.AbstractInsnNode? getPrevInstruction(org.objectweb.asm.tree.AbstractInsnNode node);
    method public static int getPrevOpcode(org.objectweb.asm.tree.AbstractInsnNode node);
    method public static String? getPrimitiveType(String autoBoxedType);
    method public static java.util.List<com.android.ide.common.rendering.api.ResourceValue>? getStyleAttributes(com.android.tools.lint.detector.api.Project project, com.android.tools.lint.client.api.LintClient client, String styleUrl, String namespaceUri, String attribute, optional boolean acceptMissing);
    method public static org.jetbrains.uast.UMethod? getUMethod(com.intellij.psi.PsiMethod);
    method public static com.android.tools.lint.detector.api.Location guessGradleLocation(com.android.tools.lint.detector.api.Project project);
    method public static com.android.tools.lint.detector.api.Location guessGradleLocation(com.android.tools.lint.client.api.LintClient client, java.io.File projectDir, String? string);
    method public static com.android.tools.lint.detector.api.Location guessGradleLocationForFile(com.android.tools.lint.client.api.LintClient client, java.io.File gradle, String? string);
    method public static boolean idReferencesMatch(String? id1, String? id2);
    method public static boolean isAnonymousClass(org.objectweb.asm.tree.ClassNode classNode);
    method public static boolean isDataBindingExpression(String expression);
    method public static boolean isEditableTo(String s, String t, int max);
    method public static boolean isEnglishResource(com.android.tools.lint.detector.api.XmlContext context, boolean assumeForBase);
    method public static boolean isFalseLiteral(com.intellij.psi.PsiElement? element);
    method public static boolean isFileBasedResourceType(com.android.resources.ResourceType type);
    method public static boolean isJava(com.intellij.psi.PsiElement? element);
    method public static boolean isJava(com.intellij.lang.Language? language);
    method public static boolean isJavaKeyword(String keyword);
    method public static boolean isJdkFolder(java.io.File homePath);
    method public static boolean isJreFolder(java.io.File homePath);
    method public static boolean isKotlin(com.intellij.psi.PsiElement? element);
    method public static boolean isKotlin(com.intellij.lang.Language? language);
    method public static boolean isKotlinHardKeyword(String keyword);
    method public static boolean isLayoutMarkerTag(org.w3c.dom.Element element);
    method public static boolean isLayoutMarkerTag(String tagName);
    method public static boolean isManifestFolder(java.io.File? dir);
    method public static boolean isManifestPlaceHolderExpression(String expression);
    method public static boolean isModelOlderThan(com.android.tools.lint.detector.api.Project project, int major, int minor, int micro, optional boolean defaultForNonGradleProjects);
    method public static boolean isNullLiteral(com.intellij.psi.PsiElement? element);
    method public static boolean isNumberString(String? s);
    method public static boolean isParent(java.io.File? parentCandidate, java.io.File file, optional boolean strict);
    method public static boolean isRootElement(org.w3c.dom.Element element);
    method public static boolean isSameResourceFile(java.io.File? file1, java.io.File? file2);
    method public static boolean isStaticInnerClass(org.objectweb.asm.tree.ClassNode classNode);
    method public static boolean isString(com.intellij.psi.PsiType type);
    method public static boolean isTrueLiteral(com.intellij.psi.PsiElement? element);
    method public static boolean isXmlFile(java.io.File file);
    method public static org.w3c.dom.Element? matchXmlElement(org.w3c.dom.Element element, org.w3c.dom.Document targetDocument);
    method public static com.intellij.psi.PsiElement? nextNonWhitespace(com.intellij.psi.PsiElement? element);
    method public static com.intellij.psi.PsiElement? prevNonWhitespace(com.intellij.psi.PsiElement? element);
    method public static byte[]? readUrlData(com.android.tools.lint.client.api.LintClient client, String query, int timeout);
    method public static String? readUrlDataAsString(com.android.tools.lint.client.api.LintClient client, String query, int timeout);
    method public static String resolveManifestName(org.w3c.dom.Element element);
    method public static com.intellij.psi.PsiMethod? resolveOperator(org.jetbrains.uast.UArrayAccessExpression);
    method public static String? resolvePlaceHolder(com.android.tools.lint.detector.api.Project? project, String name);
    method public static String resolvePlaceHolders(com.android.tools.lint.detector.api.Project? project, String value, optional java.util.Map<java.lang.String,java.lang.String>? fallbacks);
    method @Deprecated public static com.intellij.psi.PsiElement? skipParentheses(com.intellij.psi.PsiElement? element);
    method @Deprecated public static org.jetbrains.uast.UElement? skipParentheses(org.jetbrains.uast.UElement? element);
    method public static Iterable<java.lang.String> splitPath(String path);
    method public static boolean startsWith(String string, String prefix, int offset);
    method @Deprecated public static String stripIdPrefix(String? id);
  }

  public class LintFix {
    ctor protected LintFix(optional String? displayName, optional String? familyName, optional com.android.tools.lint.detector.api.Location? range);
    method public com.android.tools.lint.detector.api.LintFix autoFix(boolean robot, boolean independent);
    method public final com.android.tools.lint.detector.api.LintFix autoFix();
    method public static final com.android.tools.lint.detector.api.LintFix.Builder create();
    method public static final boolean getBoolean(com.android.tools.lint.detector.api.LintFix? fix, String key, boolean defaultValue);
    method public String? getDisplayName();
    method public final String? getFamilyName();
    method public static final int getInt(com.android.tools.lint.detector.api.LintFix? fix, String key, int defaultValue);
    method public static final com.intellij.psi.PsiMethod? getMethod(com.android.tools.lint.detector.api.LintFix? fix, String key);
    method public com.android.tools.lint.detector.api.Location? getRange();
    method public static final String? getString(com.android.tools.lint.detector.api.LintFix? fix, String key, String? defaultValue);
    method public static final java.util.List<java.lang.String>? getStringList(com.android.tools.lint.detector.api.LintFix? fix, String key);
    method public static final Throwable? getThrowable(com.android.tools.lint.detector.api.LintFix? fix, String key);
    method public void setRange(com.android.tools.lint.detector.api.Location? range);
    property public com.android.tools.lint.detector.api.Location? range;
    field public static final com.android.tools.lint.detector.api.LintFix.Companion Companion;
    field public static final String TODO = "TODO";
    field public boolean independent;
    field public boolean robot;
  }

  public static final class LintFix.AnnotateBuilder {
    method public com.android.tools.lint.detector.api.LintFix.AnnotateBuilder autoFix();
    method public com.android.tools.lint.detector.api.LintFix.AnnotateBuilder autoFix(boolean robot, boolean independent);
    method public com.android.tools.lint.detector.api.LintFix build();
    method public com.android.tools.lint.detector.api.LintFix.AnnotateBuilder range(com.android.tools.lint.detector.api.Location range);
  }

  public static final class LintFix.AnnotateFix extends com.android.tools.lint.detector.api.LintFix {
    method public String getAnnotation();
    method public boolean getReplace();
    property public final String annotation;
    property public final boolean replace;
  }

  public static final class LintFix.Builder {
    ctor public LintFix.Builder();
    method public com.android.tools.lint.detector.api.LintFix.GroupBuilder alternatives();
    method public com.android.tools.lint.detector.api.LintFix alternatives(com.android.tools.lint.detector.api.LintFix... fixes);
    method public com.android.tools.lint.detector.api.LintFix.AnnotateBuilder annotate(String source, optional boolean replace);
    method public com.android.tools.lint.detector.api.LintFix.AnnotateBuilder annotate(String source);
    method public com.android.tools.lint.detector.api.LintFix.GroupBuilder composite();
    method public com.android.tools.lint.detector.api.LintFix composite(com.android.tools.lint.detector.api.LintFix... fixes);
    method public com.android.tools.lint.detector.api.LintFix data(java.lang.Object... args);
    method public com.android.tools.lint.detector.api.LintFix.CreateFileBuilder deleteFile(java.io.File file);
    method public com.android.tools.lint.detector.api.LintFix.Builder family(String? familyName);
    method public com.android.tools.lint.detector.api.LintFix.GroupBuilder group();
    method public com.android.tools.lint.detector.api.LintFix group(com.android.tools.lint.detector.api.LintFix... fixes);
    method public com.android.tools.lint.detector.api.LintFix.FixMapBuilder map();
    method public com.android.tools.lint.detector.api.LintFix.Builder name(String? displayName);
    method public com.android.tools.lint.detector.api.LintFix.Builder name(String displayName, String familyName);
    method public com.android.tools.lint.detector.api.LintFix.Builder name(String displayName, boolean useAsFamilyNameToo);
    method public com.android.tools.lint.detector.api.LintFix.CreateFileBuilder newFile(java.io.File file, String contents);
    method public com.android.tools.lint.detector.api.LintFix.CreateFileBuilder newFile(java.io.File file, byte[] contents);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder replace();
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder set();
    method public operator com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder set(String? namespace, String attribute, String? value);
    method public com.android.tools.lint.detector.api.LintFix.Builder sharedName(String? familyName);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder unset();
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder unset(String? namespace, String attribute);
    method public com.android.tools.lint.detector.api.LintFix.UrlBuilder url();
    method public com.android.tools.lint.detector.api.LintFix.UrlBuilder url(String url);
  }

  public static final class LintFix.Companion {
    method public com.android.tools.lint.detector.api.LintFix.Builder create();
    method public boolean getBoolean(com.android.tools.lint.detector.api.LintFix? fix, String key, boolean defaultValue);
    method public int getInt(com.android.tools.lint.detector.api.LintFix? fix, String key, int defaultValue);
    method public com.intellij.psi.PsiMethod? getMethod(com.android.tools.lint.detector.api.LintFix? fix, String key);
    method public String? getString(com.android.tools.lint.detector.api.LintFix? fix, String key, String? defaultValue);
    method public java.util.List<java.lang.String>? getStringList(com.android.tools.lint.detector.api.LintFix? fix, String key);
    method public Throwable? getThrowable(com.android.tools.lint.detector.api.LintFix? fix, String key);
  }

  public static final class LintFix.CreateFileBuilder {
    method public com.android.tools.lint.detector.api.LintFix.CreateFileBuilder autoFix(boolean robot, boolean independent);
    method public com.android.tools.lint.detector.api.LintFix.CreateFileBuilder autoFix();
    method public com.android.tools.lint.detector.api.LintFix build();
    method public com.android.tools.lint.detector.api.LintFix.CreateFileBuilder contents(String contents);
    method public com.android.tools.lint.detector.api.LintFix.CreateFileBuilder contents(byte[] contents);
    method public com.android.tools.lint.detector.api.LintFix.CreateFileBuilder delete(java.io.File file);
    method public com.android.tools.lint.detector.api.LintFix.CreateFileBuilder file(java.io.File file);
    method public com.android.tools.lint.detector.api.LintFix.CreateFileBuilder independent(boolean independent);
    method public com.android.tools.lint.detector.api.LintFix.CreateFileBuilder name(optional String? displayName, optional String? familyName);
    method public com.android.tools.lint.detector.api.LintFix.CreateFileBuilder reformat(boolean reformat);
    method public com.android.tools.lint.detector.api.LintFix.CreateFileBuilder robot(boolean robot);
    method public com.android.tools.lint.detector.api.LintFix.CreateFileBuilder select(@org.intellij.lang.annotations.RegExp String? selectPattern);
  }

  public static final class LintFix.CreateFileFix extends com.android.tools.lint.detector.api.LintFix {
    ctor public LintFix.CreateFileFix(String? displayName, String? familyName, String? selectPattern, boolean delete, java.io.File file, byte[]? binary, String? text, boolean reformat, boolean robot, boolean independent);
    method public byte[]? getBinary();
    method public boolean getDelete();
    method public java.io.File getFile();
    method public boolean getReformat();
    method public String? getSelectPattern();
    method public String? getText();
    property public final byte[]? binary;
    property public final boolean delete;
    property public final java.io.File file;
    property public final boolean reformat;
    property public final String? selectPattern;
    property public final String? text;
  }

  public static final class LintFix.DataMap extends com.android.tools.lint.detector.api.LintFix {
    ctor public LintFix.DataMap(String? displayName, String? familyName, java.util.Map<java.lang.String,?> map);
    method public operator Object? get(String key);
    method public boolean getBoolean(String key, boolean defaultValue);
    method public java.io.File? getFile(String key, java.io.File? defaultValue);
    method public int getInt(String key, int defaultValue);
    method public com.intellij.psi.PsiMethod? getMethod(String key);
    method public String? getString(String key, String? defaultValue);
    method public java.util.List<java.lang.String>? getStringList(String key);
    method public Throwable? getThrowable(String key);
    method public boolean hasKey(String key);
    method public java.util.Set<java.lang.String> keys();
  }

  public static final class LintFix.FixMapBuilder {
    method public com.android.tools.lint.detector.api.LintFix build();
    method public com.android.tools.lint.detector.api.LintFix.FixMapBuilder put(String key, String? value);
    method public com.android.tools.lint.detector.api.LintFix.FixMapBuilder put(String key, com.intellij.psi.PsiMethod? value);
    method public com.android.tools.lint.detector.api.LintFix.FixMapBuilder put(String key, Throwable? throwable);
    method public com.android.tools.lint.detector.api.LintFix.FixMapBuilder put(String key, int value);
    method public com.android.tools.lint.detector.api.LintFix.FixMapBuilder put(String key, boolean value);
    method public com.android.tools.lint.detector.api.LintFix.FixMapBuilder put(String key, java.util.List<java.lang.String> value);
  }

  public static final class LintFix.GroupBuilder {
    method public com.android.tools.lint.detector.api.LintFix.GroupBuilder add(com.android.tools.lint.detector.api.LintFix fix);
    method public com.android.tools.lint.detector.api.LintFix build();
    method public com.android.tools.lint.detector.api.LintFix.GroupBuilder join(com.android.tools.lint.detector.api.LintFix... fixes);
    method public com.android.tools.lint.detector.api.LintFix.GroupBuilder name(String? displayName);
    method public com.android.tools.lint.detector.api.LintFix.GroupBuilder name(String displayName, String familyName);
    method public com.android.tools.lint.detector.api.LintFix.GroupBuilder sharedName(String? familyName);
    method public com.android.tools.lint.detector.api.LintFix.GroupBuilder type(com.android.tools.lint.detector.api.LintFix.GroupType type);
  }

  public enum LintFix.GroupType {
    enum_constant public static final com.android.tools.lint.detector.api.LintFix.GroupType ALTERNATIVES;
    enum_constant public static final com.android.tools.lint.detector.api.LintFix.GroupType COMPOSITE;
  }

  public static final class LintFix.LintFixGroup extends com.android.tools.lint.detector.api.LintFix {
    ctor public LintFix.LintFixGroup(String? displayName, String? familyName, com.android.tools.lint.detector.api.LintFix.GroupType type, java.util.List<? extends com.android.tools.lint.detector.api.LintFix> fixes);
    method public java.util.List<com.android.tools.lint.detector.api.LintFix> getFixes();
    method public com.android.tools.lint.detector.api.LintFix.GroupType getType();
    property public final java.util.List<com.android.tools.lint.detector.api.LintFix> fixes;
    property public com.android.tools.lint.detector.api.Location? range;
    property public final com.android.tools.lint.detector.api.LintFix.GroupType type;
  }

  public static final class LintFix.ReplaceString extends com.android.tools.lint.detector.api.LintFix {
    ctor public LintFix.ReplaceString(String? displayName, String? familyName, String? oldString, @org.intellij.lang.annotations.RegExp String? oldPattern, String? selectPattern, String replacement, boolean shortenNames, boolean reformat, com.android.tools.lint.detector.api.Location? range, boolean robot, boolean independent);
    method public String expandBackReferences(java.util.regex.Matcher matcher);
    method public static String expandBackReferences(String replacement, java.util.regex.Matcher matcher);
    method public String? getOldPattern();
    method public String? getOldString();
    method public boolean getReformat();
    method public String getReplacement();
    method public String? getSelectPattern();
    method public boolean getShortenNames();
    property public final String? oldPattern;
    property public final String? oldString;
    property public final boolean reformat;
    property public final String replacement;
    property public final String? selectPattern;
    property public final boolean shortenNames;
    field public static final com.android.tools.lint.detector.api.LintFix.ReplaceString.Companion Companion;
    field public static final String INSERT_BEGINNING = "_lint_insert_begin_";
    field public static final String INSERT_END = "_lint_insert_end_";
  }

  public static final class LintFix.ReplaceString.Companion {
    method public String expandBackReferences(String replacement, java.util.regex.Matcher matcher);
  }

  public static final class LintFix.ReplaceStringBuilder {
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder all();
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder autoFix(boolean robot, boolean independent);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder autoFix();
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder beginning();
    method public com.android.tools.lint.detector.api.LintFix build();
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder end();
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder independent(boolean independent);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder name(String? displayName);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder name(String displayName, String familyName);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder pattern(@org.intellij.lang.annotations.RegExp String? oldPattern);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder range(com.android.tools.lint.detector.api.Location range);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder reformat(boolean reformat);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder robot(boolean robot);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder select(@org.intellij.lang.annotations.RegExp String? selectPattern);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder sharedName(String? familyName);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder shortenNames();
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder shortenNames(boolean shorten);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder text(String? oldText);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder with(String? newText);
  }

  public static final class LintFix.SetAttribute extends com.android.tools.lint.detector.api.LintFix {
    ctor public LintFix.SetAttribute(String? displayName, String? familyName, String? namespace, String attribute, String? value, com.android.tools.lint.detector.api.Location? range, int dot, int mark, boolean robot, boolean independent);
    method public String getAttribute();
    method public int getDot();
    method public int getMark();
    method public String? getNamespace();
    method public String? getValue();
    property public final String attribute;
    property public final int dot;
    property public final int mark;
    property public final String? namespace;
    property public final String? value;
  }

  public static final class LintFix.SetAttributeBuilder {
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder android();
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder attribute(String attribute);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder autoFix(boolean robot, boolean independent);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder autoFix();
    method public com.android.tools.lint.detector.api.LintFix build();
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder caret(int valueStartDelta);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder caretBegin();
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder caretEnd();
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder independent(boolean independent);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder name(String? displayName);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder name(String displayName, String familyName);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder namespace(String? namespace);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder range(com.android.tools.lint.detector.api.Location? range);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder remove(String attribute);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder robot(boolean robot);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder select(int start, int end);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder selectAll();
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder sharedName(String? familyName);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder todo(String? namespace, String attribute, optional String? prefix, optional String? suffix);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder todo(String? namespace, String attribute, optional String? prefix);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder todo(String? namespace, String attribute);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder value(String? value);
  }

  public static final class LintFix.ShowUrl extends com.android.tools.lint.detector.api.LintFix {
    ctor public LintFix.ShowUrl(String? displayName, String? familyName, String url);
    method public String getUrl();
    property public final String url;
  }

  public static final class LintFix.UrlBuilder {
    method public com.android.tools.lint.detector.api.LintFix build();
    method public com.android.tools.lint.detector.api.LintFix.UrlBuilder url(@org.jetbrains.annotations.NonNls String url);
  }

  public final class LintMap implements java.lang.Iterable<java.lang.String> kotlin.jvm.internal.markers.KMappedMarker {
    ctor public LintMap();
    method public boolean containsKey(String key);
    method public operator String? get(String key);
    method @org.jetbrains.annotations.Contract("_, !null -> !null") public Integer? getApi(String key, optional Integer? default);
    method @org.jetbrains.annotations.Contract("_, !null -> !null") public Boolean? getBoolean(String key, optional Boolean? default);
    method public com.android.tools.lint.detector.api.Constraint? getConstraint(String key);
    method public com.android.tools.lint.detector.api.Incident? getIncident(String key);
    method @org.jetbrains.annotations.Contract("_, !null -> !null") public Integer? getInt(String key, optional Integer? default);
    method @org.jetbrains.annotations.Contract("_, !null -> !null") public com.android.tools.lint.detector.api.Location? getLocation(String key);
    method public com.android.tools.lint.detector.api.LintMap? getMap(String key);
    method public com.android.tools.lint.detector.api.Severity? getSeverity(String key, optional com.android.tools.lint.detector.api.Severity? default);
    method public int getSize();
    method @org.jetbrains.annotations.Contract("_, !null -> !null") public String? getString(String key, optional String? default);
    method public boolean isEmpty();
    method public boolean isNotEmpty();
    method public java.util.Iterator<java.lang.String> iterator();
    method public kotlin.sequences.Sequence<java.lang.String> keys();
    method public com.android.tools.lint.detector.api.LintMap put(String key, String value);
    method public com.android.tools.lint.detector.api.LintMap put(String key, int value);
    method public com.android.tools.lint.detector.api.LintMap put(String key, boolean value);
    method public com.android.tools.lint.detector.api.LintMap put(String key, com.android.tools.lint.detector.api.Location value);
    method public com.android.tools.lint.detector.api.LintMap put(String key, com.android.tools.lint.detector.api.LintMap value);
    method public com.android.tools.lint.detector.api.LintMap put(String key, com.android.tools.lint.detector.api.Incident value);
    method public com.android.tools.lint.detector.api.LintMap put(String key, com.android.tools.lint.detector.api.Constraint constraint);
    method public com.android.tools.lint.detector.api.LintMap put(String key, com.android.tools.lint.detector.api.Severity severity);
    method public com.android.tools.lint.detector.api.LintMap putAll(com.android.tools.lint.detector.api.LintMap from);
    method public com.android.tools.lint.detector.api.LintMap remove(String key);
    method public operator com.android.tools.lint.detector.api.LintMap set(String key, String value);
    property public final int size;
    field public static final com.android.tools.lint.detector.api.LintMap.Companion Companion;
  }

  public static final class LintMap.Companion {
    method public java.util.Map<java.lang.String,java.lang.Object> getInternalMap(com.android.tools.lint.detector.api.LintMap map);
  }

  public class LintModelModuleAndroidLibraryProject extends com.android.tools.lint.detector.api.LintModelModuleLibraryProject {
    ctor public LintModelModuleAndroidLibraryProject(com.android.tools.lint.client.api.LintClient client, java.io.File dir, java.io.File referenceDir, com.android.tools.lint.model.LintModelDependency dependency, com.android.tools.lint.model.LintModelAndroidLibrary androidLibrary);
    method public final boolean hasDependency(com.android.tools.lint.model.LintModelDependency, String name);
  }

  public class LintModelModuleJavaLibraryProject extends com.android.tools.lint.detector.api.LintModelModuleLibraryProject {
    ctor public LintModelModuleJavaLibraryProject(com.android.tools.lint.client.api.LintClient client, java.io.File dir, java.io.File referenceDir, com.android.tools.lint.model.LintModelDependency dependency, com.android.tools.lint.model.LintModelJavaLibrary javaLibrary);
  }

  public class LintModelModuleLibraryProject extends com.android.tools.lint.detector.api.Project {
    ctor public LintModelModuleLibraryProject(com.android.tools.lint.client.api.LintClient client, java.io.File dir, java.io.File referenceDir, com.android.tools.lint.model.LintModelDependency dependency);
    method public final void addDirectLibrary(com.android.tools.lint.detector.api.Project project);
    method public final com.android.tools.lint.model.LintModelDependency getDependency();
    method public final void setExternalLibrary(boolean external);
    method public final void setMavenCoordinates(com.android.tools.lint.model.LintModelMavenName mc);
    property public final com.android.tools.lint.model.LintModelDependency dependency;
  }

  public class LintModelModuleProject extends com.android.tools.lint.detector.api.Project {
    ctor public LintModelModuleProject(com.android.tools.lint.client.api.LintClient client, java.io.File dir, java.io.File referenceDir, com.android.tools.lint.model.LintModelVariant variant, java.io.File? mergedManifest);
    method public final void addDirectLibrary(com.android.tools.lint.detector.api.Project project);
    method public static final java.util.List<com.android.tools.lint.detector.api.LintModelModuleProject> resolveDependencies(java.util.Collection<? extends com.android.tools.lint.detector.api.LintModelModuleProject> projects, boolean reporting);
    method public final void setExternalLibrary(boolean external);
    field public static final com.android.tools.lint.detector.api.LintModelModuleProject.Companion Companion;
  }

  public static final class LintModelModuleProject.Companion {
    method public java.util.List<com.android.tools.lint.detector.api.LintModelModuleProject> resolveDependencies(java.util.Collection<? extends com.android.tools.lint.detector.api.LintModelModuleProject> projects, boolean reporting);
  }

  public final class LintModelModuleProjectKt {
    method public static void addJars(com.android.tools.lint.model.LintModelExternalLibrary, java.util.List<java.io.File> list, boolean skipProvided);
  }

  public final class LintUtils {
    method @Deprecated public static boolean assertionsEnabled();
    method @Deprecated @java.lang.SafeVarargs public static <T> T? coalesce(T?... ts);
    method @Deprecated public static String computeResourceName(String prefix, String name, optional com.android.resources.ResourceFolderType? folderType);
    method @Deprecated public static String computeResourceName(String prefix, String name);
    method @Deprecated public static String describeCounts(int errorCount, int warningCount, boolean comma, boolean capitalize);
    method @Deprecated public static int editDistance(String s, String t, optional int max);
    method @Deprecated public static int editDistance(String s, String t);
    method @Deprecated public static boolean endsWith(String string, String suffix);
    method @Deprecated public static String? findSubstring(String string, String? prefix, String? suffix);
    method @Deprecated public static String formatList(java.util.List<java.lang.String> strings, int maxItems);
    method @Deprecated public static String formatList(java.util.List<java.lang.String> strings, int maxItems, boolean sort);
    method @Deprecated public static String? getAutoBoxedType(String primitive);
    method @Deprecated public static String getBaseName(String fileName);
    method @Deprecated public static int getChildCount(org.w3c.dom.Node node);
    method @Deprecated public static java.util.List<org.w3c.dom.Element> getChildren(org.w3c.dom.Node node);
    method @Deprecated public static java.io.File? getCommonParent(java.util.List<? extends java.io.File> files);
    method @Deprecated public static java.io.File? getCommonParent(java.io.File file1, java.io.File file2);
    method @Deprecated @kotlin.jvm.Throws(exceptionClasses=IOException::class) public static CharSequence getEncodedString(com.android.tools.lint.client.api.LintClient client, java.io.File file, boolean createString) throws java.io.IOException;
    method @Deprecated public static CharSequence getEncodedString(byte[]? data, boolean createString);
    method @Deprecated public static String getFileNameWithParent(com.android.tools.lint.client.api.LintClient client, java.io.File file);
    method @Deprecated public static String getFileNameWithParent(com.android.tools.lint.client.api.LintClient client, com.android.ide.common.util.PathString file);
    method @Deprecated public static java.util.List<java.lang.String> getFormattedParameters(String format, String errorMessage);
    method @Deprecated public static java.util.List<com.android.ide.common.rendering.api.StyleResourceValue>? getInheritedStyles(com.android.tools.lint.detector.api.Project project, com.android.tools.lint.client.api.LintClient client, String styleUrl);
    method @Deprecated public static String getInternalMethodName(com.intellij.psi.PsiMethod method);
    method @Deprecated public static String? getInternalName(com.intellij.psi.PsiClass psiClass);
    method @Deprecated public static com.intellij.pom.java.LanguageLevel getLanguageLevel(org.jetbrains.uast.UElement element, com.intellij.pom.java.LanguageLevel defaultLevel);
    method @Deprecated public static com.intellij.pom.java.LanguageLevel getLanguageLevel(com.intellij.psi.PsiElement element, com.intellij.pom.java.LanguageLevel defaultLevel);
    method @Deprecated public static String getLayoutName(java.io.File layoutFile);
    method @Deprecated public static com.android.ide.common.resources.configuration.LocaleQualifier? getLocale(String parent);
    method @Deprecated public static com.android.ide.common.resources.configuration.LocaleQualifier? getLocale(com.android.tools.lint.detector.api.XmlContext context);
    method @Deprecated public static String? getLocaleAndRegion(String folderName);
    method @Deprecated public static String? getMethodName(org.jetbrains.uast.UCallExpression call);
    method @Deprecated public static org.objectweb.asm.tree.AbstractInsnNode? getNextInstruction(org.objectweb.asm.tree.AbstractInsnNode node);
    method @Deprecated public static int getNextOpcode(org.objectweb.asm.tree.AbstractInsnNode node);
    method @Deprecated public static org.objectweb.asm.tree.AbstractInsnNode? getPrevInstruction(org.objectweb.asm.tree.AbstractInsnNode node);
    method @Deprecated public static int getPrevOpcode(org.objectweb.asm.tree.AbstractInsnNode node);
    method @Deprecated public static String? getPrimitiveType(String autoBoxedType);
    method @Deprecated public static java.util.List<com.android.ide.common.rendering.api.ResourceValue>? getStyleAttributes(com.android.tools.lint.detector.api.Project project, com.android.tools.lint.client.api.LintClient client, String styleUrl, String namespaceUri, String attribute);
    method @Deprecated public static com.android.tools.lint.detector.api.Location guessGradleLocation(com.android.tools.lint.detector.api.Project project);
    method @Deprecated public static com.android.tools.lint.detector.api.Location guessGradleLocation(com.android.tools.lint.client.api.LintClient client, java.io.File projectDir, String? string);
    method @Deprecated public static boolean idReferencesMatch(String? id1, String? id2);
    method @Deprecated public static boolean isAnonymousClass(org.objectweb.asm.tree.ClassNode classNode);
    method @Deprecated public static boolean isDataBindingExpression(String expression);
    method @Deprecated public static boolean isEditableTo(String s, String t, int max);
    method @Deprecated public static boolean isEnglishResource(com.android.tools.lint.detector.api.XmlContext context, boolean assumeForBase);
    method @Deprecated public static boolean isFalseLiteral(com.intellij.psi.PsiElement? element);
    method @Deprecated public static boolean isFileBasedResourceType(com.android.resources.ResourceType type);
    method @Deprecated public static boolean isJavaKeyword(String keyword);
    method @Deprecated public static boolean isKotlin(com.intellij.psi.PsiElement? element);
    method @Deprecated public static boolean isKotlin(com.intellij.lang.Language? language);
    method @Deprecated public static boolean isManifestFolder(java.io.File? dir);
    method @Deprecated public static boolean isManifestPlaceHolderExpression(String expression);
    method @Deprecated public static boolean isModelOlderThan(com.android.tools.lint.detector.api.Project project, int major, int minor, int micro, optional boolean defaultForNonGradleProjects);
    method @Deprecated public static boolean isModelOlderThan(com.android.tools.lint.detector.api.Project project, int major, int minor, int micro);
    method @Deprecated public static boolean isNullLiteral(com.intellij.psi.PsiElement? element);
    method @Deprecated public static boolean isRootElement(org.w3c.dom.Element element);
    method @Deprecated public static boolean isSameResourceFile(java.io.File? file1, java.io.File? file2);
    method @Deprecated public static boolean isStaticInnerClass(org.objectweb.asm.tree.ClassNode classNode);
    method @Deprecated public static boolean isString(com.intellij.psi.PsiType type);
    method @Deprecated public static boolean isTrueLiteral(com.intellij.psi.PsiElement? element);
    method @Deprecated public static boolean isXmlFile(java.io.File file);
    method @Deprecated public static com.intellij.psi.PsiElement? nextNonWhitespace(com.intellij.psi.PsiElement? element);
    method @Deprecated public static com.intellij.psi.PsiElement? prevNonWhitespace(com.intellij.psi.PsiElement? element);
    method @Deprecated @kotlin.jvm.Throws(exceptionClasses=IOException::class) public static byte[]? readUrlData(com.android.tools.lint.client.api.LintClient client, String query, int timeout) throws java.io.IOException;
    method @Deprecated @kotlin.jvm.Throws(exceptionClasses=IOException::class) public static String? readUrlDataAsString(com.android.tools.lint.client.api.LintClient client, String query, int timeout) throws java.io.IOException;
    method @Deprecated public static String resolveManifestName(org.w3c.dom.Element element);
    method @Deprecated public static com.intellij.psi.PsiElement? skipParentheses(com.intellij.psi.PsiElement? element);
    method @Deprecated public static org.jetbrains.uast.UElement? skipParentheses(org.jetbrains.uast.UElement? element);
    method @Deprecated public static Iterable<java.lang.String> splitPath(String path);
    method @Deprecated public static boolean startsWith(String string, String prefix, int offset);
    method @Deprecated public static String stripIdPrefix(String? id);
    field public static final com.android.tools.lint.detector.api.LintUtils INSTANCE;
  }

  @com.google.common.annotations.Beta public class Location {
    ctor protected Location(java.io.File file, com.android.tools.lint.detector.api.Position? start, com.android.tools.lint.detector.api.Position? end);
    method public static final com.android.tools.lint.detector.api.Location create(java.io.File file);
    method public static final com.android.tools.lint.detector.api.Location create(java.io.File file, com.android.ide.common.blame.SourcePosition position);
    method public static final com.android.tools.lint.detector.api.Location create(java.io.File file, com.android.tools.lint.detector.api.Position start, com.android.tools.lint.detector.api.Position? end);
    method public static final com.android.tools.lint.detector.api.Location create(java.io.File file, CharSequence? contents, int startOffset, int endOffset);
    method public static final com.android.tools.lint.detector.api.Location create(java.io.File file, String contents, int line);
    method public static final com.android.tools.lint.detector.api.Location create(java.io.File file, CharSequence contents, int line, String? patternStart, String? patternEnd, com.android.tools.lint.detector.api.Location.SearchHints? hints);
    method public final Object? getClientData();
    method public final com.android.tools.lint.detector.api.Position? getEnd();
    method public final java.io.File getFile();
    method public final String? getMessage();
    method public final Object? getOriginalSource();
    method public com.android.tools.lint.detector.api.Location? getSecondary();
    method public Object? getSource();
    method public final <T> T? getSource(Class<T> clz);
    method public final com.android.tools.lint.detector.api.Position? getStart();
    method public boolean getVisible();
    method public final boolean isSelfExplanatory();
    method public final boolean isSingleLine();
    method public static final com.android.tools.lint.detector.api.Location reverse(com.android.tools.lint.detector.api.Location location);
    method public final void setClientData(Object? clientData);
    method public com.android.tools.lint.detector.api.Location setData(Object? clientData);
    method public final void setMessage(String? value);
    method public com.android.tools.lint.detector.api.Location setMessage(String message, boolean selfExplanatory);
    method public final void setOriginalSource(Object? originalSource);
    method public void setSecondary(com.android.tools.lint.detector.api.Location? secondary);
    method public com.android.tools.lint.detector.api.Location setSelfExplanatory(boolean selfExplanatory);
    method public void setSource(Object? source);
    method public final com.android.tools.lint.detector.api.Location setSource(Object? source);
    method public void setVisible(boolean visible);
    method public final com.android.tools.lint.detector.api.Location withOriginalSource(Object source);
    method public final com.android.tools.lint.detector.api.Location withSecondary(com.android.tools.lint.detector.api.Location secondary, String message, optional boolean selfExplanatory);
    method public final com.android.tools.lint.detector.api.Location withSecondary(com.android.tools.lint.detector.api.Location secondary, String message);
    method public final com.android.tools.lint.detector.api.Location withSource(Object source);
    property public final Object? clientData;
    property public final com.android.tools.lint.detector.api.Position? end;
    property public final java.io.File file;
    property public final String? message;
    property public final Object? originalSource;
    property public com.android.tools.lint.detector.api.Location? secondary;
    property public Object? source;
    property public final com.android.tools.lint.detector.api.Position? start;
    property public boolean visible;
    field public static final com.android.tools.lint.detector.api.Location.Companion Companion;
    field public static final com.android.tools.lint.detector.api.Location NONE;
  }

  public static final class Location.Companion {
    method public com.android.tools.lint.detector.api.Location create(java.io.File file);
    method public com.android.tools.lint.detector.api.Location create(java.io.File file, com.android.ide.common.blame.SourcePosition position);
    method public com.android.tools.lint.detector.api.Location create(java.io.File file, com.android.tools.lint.detector.api.Position start, com.android.tools.lint.detector.api.Position? end);
    method public com.android.tools.lint.detector.api.Location create(java.io.File file, CharSequence? contents, int startOffset, int endOffset);
    method public com.android.tools.lint.detector.api.Location create(java.io.File file, String contents, int line);
    method public com.android.tools.lint.detector.api.Location create(java.io.File file, CharSequence contents, int line, String? patternStart, String? patternEnd, com.android.tools.lint.detector.api.Location.SearchHints? hints);
    method public com.android.tools.lint.detector.api.Location reverse(com.android.tools.lint.detector.api.Location location);
  }

  public static final class Location.DefaultLocationHandle implements com.android.tools.lint.detector.api.Location.Handle {
    ctor public Location.DefaultLocationHandle(com.android.tools.lint.detector.api.Context context, int startOffset, int endOffset);
    method public Object? getClientData();
    method public com.android.tools.lint.detector.api.Location resolve();
    method public void setClientData(Object? clientData);
    property public Object? clientData;
  }

  public static interface Location.Handle {
    method public Object? getClientData();
    method public com.android.tools.lint.detector.api.Location resolve();
    method public void setClientData(Object? clientData);
    property public abstract Object? clientData;
  }

  public static class Location.ResourceItemHandle implements com.android.tools.lint.detector.api.Location.Handle {
    ctor public Location.ResourceItemHandle(com.android.tools.lint.client.api.LintClient client, com.android.ide.common.resources.ResourceItem item, boolean nameOnly, boolean valueOnly);
    method public Object? getClientData();
    method public final com.android.ide.common.resources.ResourceItem getItem();
    method public com.android.tools.lint.detector.api.Location resolve();
    method public void setClientData(Object? _);
    property public Object? clientData;
    property public final com.android.ide.common.resources.ResourceItem item;
  }

  public enum Location.SearchDirection {
    enum_constant public static final com.android.tools.lint.detector.api.Location.SearchDirection BACKWARD;
    enum_constant public static final com.android.tools.lint.detector.api.Location.SearchDirection EOL_BACKWARD;
    enum_constant public static final com.android.tools.lint.detector.api.Location.SearchDirection EOL_NEAREST;
    enum_constant public static final com.android.tools.lint.detector.api.Location.SearchDirection FORWARD;
    enum_constant public static final com.android.tools.lint.detector.api.Location.SearchDirection NEAREST;
  }

  public static final class Location.SearchHints {
    method public static com.android.tools.lint.detector.api.Location.SearchHints create(com.android.tools.lint.detector.api.Location.SearchDirection direction);
    method public com.android.tools.lint.detector.api.Location.SearchDirection getDirection();
    method public boolean isConstructor();
    method public boolean isJavaSymbol();
    method public boolean isWholeWord();
    method public com.android.tools.lint.detector.api.Location.SearchHints matchConstructor();
    method public com.android.tools.lint.detector.api.Location.SearchHints matchJavaSymbol();
    method public com.android.tools.lint.detector.api.Location.SearchHints matchWholeWord();
    property public final com.android.tools.lint.detector.api.Location.SearchDirection direction;
    property public final boolean isConstructor;
    property public final boolean isJavaSymbol;
    property public final boolean isWholeWord;
    field public static final com.android.tools.lint.detector.api.Location.SearchHints.Companion Companion;
  }

  public static final class Location.SearchHints.Companion {
    method public com.android.tools.lint.detector.api.Location.SearchHints create(com.android.tools.lint.detector.api.Location.SearchDirection direction);
  }

  public enum LocationType {
    enum_constant public static final com.android.tools.lint.detector.api.LocationType ALL;
    enum_constant public static final com.android.tools.lint.detector.api.LocationType CALL_WITH_ARGUMENTS;
    enum_constant public static final com.android.tools.lint.detector.api.LocationType CALL_WITH_RECEIVER;
    enum_constant public static final com.android.tools.lint.detector.api.LocationType DEFAULT;
    enum_constant public static final com.android.tools.lint.detector.api.LocationType NAME;
    enum_constant public static final com.android.tools.lint.detector.api.LocationType VALUE;
  }

  public final class MinSdkAtLeast extends com.android.tools.lint.detector.api.Constraint {
    method public boolean accept(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Incident incident);
    method public int getMinSdkVersion();
    property public final int minSdkVersion;
  }

  public final class MinSdkLessThan extends com.android.tools.lint.detector.api.Constraint {
    method public boolean accept(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Incident incident);
    method public int getMinSdkVersion();
    property public final int minSdkVersion;
  }

  public final class NotAndroidProject extends com.android.tools.lint.detector.api.Constraint {
    method public boolean accept(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Incident incident);
  }

  public final class NotLibraryProject extends com.android.tools.lint.detector.api.Constraint {
    method public boolean accept(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Incident incident);
  }

  public interface OtherFileScanner extends com.android.tools.lint.detector.api.FileScanner {
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Scope> getApplicableFiles();
  }

  public final class PartialResult implements java.lang.Iterable<java.util.Map.Entry<com.android.tools.lint.detector.api.Project,com.android.tools.lint.detector.api.LintMap>> kotlin.jvm.internal.markers.KMappedMarker {
    ctor public PartialResult(com.android.tools.lint.detector.api.Issue issue, java.util.Map<com.android.tools.lint.detector.api.Project,com.android.tools.lint.detector.api.LintMap> data);
    method public com.android.tools.lint.detector.api.Issue getIssue();
    method public boolean isEmpty();
    method public java.util.Iterator<java.util.Map.Entry<com.android.tools.lint.detector.api.Project,com.android.tools.lint.detector.api.LintMap>> iterator();
    method public com.android.tools.lint.detector.api.LintMap map();
    method public com.android.tools.lint.detector.api.LintMap mapFor(com.android.tools.lint.detector.api.Project project);
    method public java.util.Collection<com.android.tools.lint.detector.api.LintMap> maps();
    method public java.util.Collection<com.android.tools.lint.detector.api.Project> projects();
    property public final com.android.tools.lint.detector.api.Issue issue;
  }

  @com.google.common.annotations.Beta public enum Platform {
    enum_constant public static final com.android.tools.lint.detector.api.Platform ANDROID;
    enum_constant public static final com.android.tools.lint.detector.api.Platform JDK;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Platform> ANDROID_SET;
    field public static final com.android.tools.lint.detector.api.Platform.Companion Companion;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Platform> JDK_SET;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Platform> UNSPECIFIED;
  }

  public static final class Platform.Companion {
  }

  public final class PlatformKt {
    method public static boolean isApplicableTo(java.util.EnumSet<com.android.tools.lint.detector.api.Platform>, com.android.tools.lint.detector.api.Issue issue);
  }

  @com.google.common.annotations.Beta public abstract class Position {
    ctor public Position();
    method public abstract int getColumn();
    method public abstract int getLine();
    method public abstract int getOffset();
    method public boolean sameLine(com.android.tools.lint.detector.api.Position end);
    property public abstract int column;
    property public abstract int line;
    property public abstract int offset;
  }

  @com.google.common.annotations.Beta public class Project {
    ctor protected Project(com.android.tools.lint.client.api.LintClient, java.io.File, java.io.File);
    method public void addFile(java.io.File);
    method public static com.android.tools.lint.detector.api.Project create(com.android.tools.lint.client.api.LintClient, java.io.File, java.io.File);
    method public Boolean? dependsOn(String);
    method public java.util.List<com.android.tools.lint.detector.api.Project!> getAllLibraries();
    method public java.util.List<java.lang.String!>? getApplicableDensities();
    method public String? getApplicationId();
    method public java.util.List<java.io.File!> getAssetFolders();
    method public com.android.tools.lint.model.LintModelAndroidLibrary? getBuildLibraryModel();
    method public com.android.tools.lint.model.LintModelModule? getBuildModule();
    method public int getBuildSdk();
    method public com.android.sdklib.IAndroidTarget? getBuildTarget();
    method public String? getBuildTargetHash();
    method public com.android.tools.lint.model.LintModelVariant? getBuildVariant();
    method public com.android.tools.lint.client.api.LintClient getClient();
    method public <T> T? getClientProperty(Object);
    method public com.android.tools.lint.client.api.Configuration getConfiguration(com.android.tools.lint.client.api.LintDriver?);
    method public java.util.Set<com.android.tools.lint.detector.api.Desugaring!>! getDesugaring();
    method public java.io.File getDir();
    method public java.util.List<com.android.tools.lint.detector.api.Project!> getDirectLibraries();
    method public String getDisplayPath(java.io.File);
    method public java.util.List<java.io.File!> getGeneratedResourceFolders();
    method public java.util.List<java.io.File!> getGeneratedSourceFolders();
    method public java.util.List<java.io.File!> getGradleBuildScripts();
    method public com.android.ide.common.repository.GradleVersion? getGradleModelVersion();
    method public com.intellij.openapi.project.Project? getIdeaProject();
    method public java.util.List<java.io.File!> getJavaClassFolders();
    method public com.intellij.pom.java.LanguageLevel getJavaLanguageLevel();
    method public java.util.List<java.io.File!> getJavaLibraries(boolean);
    method public java.util.List<java.io.File!> getJavaSourceFolders();
    method public org.jetbrains.kotlin.config.LanguageVersionSettings getKotlinLanguageLevel();
    method public org.w3c.dom.Document? getManifestDom();
    method public java.util.List<java.io.File!> getManifestFiles();
    method public com.android.tools.lint.model.LintModelMavenName? getMavenCoordinate();
    method public org.w3c.dom.Document? getMergedManifest();
    method public int getMinSdk();
    method public com.android.sdklib.AndroidVersion getMinSdkVersion();
    method public String getName();
    method public String? getPackage();
    method public java.util.List<java.io.File!> getProguardFiles();
    method public java.util.List<java.io.File!> getPropertyFiles();
    method public java.io.File getReferenceDir();
    method public String getRelativePath(java.io.File);
    method public static String getRelativePath(java.io.File?, java.io.File);
    method public boolean getReportIssues();
    method public java.util.List<java.io.File!> getResourceFolders();
    method public com.android.ide.common.rendering.api.ResourceNamespace getResourceNamespace();
    method public com.android.ide.common.repository.ResourceVisibilityLookup getResourceVisibility();
    method public com.android.tools.lint.client.api.SdkInfo getSdkInfo();
    method public java.util.List<java.io.File!>? getSubset();
    method public java.util.Map<java.lang.String!,java.lang.String!> getSuperClassMap();
    method public int getTargetSdk();
    method public com.android.sdklib.AndroidVersion getTargetSdkVersion();
    method public java.util.List<java.io.File!> getTestLibraries();
    method public java.util.List<java.io.File!> getTestSourceFolders();
    method public com.android.tools.lint.model.LintModelModuleType getType();
    method public boolean hasDynamicFeatures();
    method protected void initialize();
    method public boolean isAndroidProject();
    method public static boolean isAospBuildEnvironment();
    method public static boolean isAospFrameworksProject(java.io.File);
    method public static boolean isAospFrameworksRelatedProject(java.io.File);
    method public boolean isCoreLibraryDesugaringEnabled();
    method public boolean isDesugaring(com.android.tools.lint.detector.api.Desugaring!);
    method public boolean isExternalLibrary();
    method public boolean isGradleProject();
    method public boolean isLibrary();
    method public boolean isMergingManifests();
    method public void mergeFolders(com.android.tools.lint.detector.api.Project);
    method public void putClientProperty(Object, Object?);
    method public void readManifest(org.w3c.dom.Document);
    method public void setBuildTargetHash(String!);
    method public void setDirectLibraries(java.util.List<com.android.tools.lint.detector.api.Project!>);
    method public void setIdeaProject(com.intellij.openapi.project.Project?);
    method public void setName(String);
    method public void setReportIssues(boolean);
    field protected java.util.List<com.android.tools.lint.detector.api.Project!>! allLibraries;
    field protected Boolean! appCompat;
    field protected java.util.List<java.io.File!>! assetFolders;
    field protected int buildSdk;
    field protected String! buildTargetHash;
    field protected final com.android.tools.lint.client.api.LintClient! client;
    field protected com.android.tools.lint.client.api.Configuration! configuration;
    field protected java.util.Set<com.android.tools.lint.detector.api.Desugaring!>! desugaring;
    field protected final java.io.File! dir;
    field protected java.util.List<com.android.tools.lint.detector.api.Project!>! directLibraries;
    field protected org.w3c.dom.Document! dom;
    field protected boolean externalLibrary;
    field protected java.util.List<java.io.File!>! files;
    field protected java.util.List<java.io.File!>! generatedResourceFolders;
    field protected java.util.List<java.io.File!>! generatedSourceFolders;
    field protected java.util.List<java.io.File!>! gradleFiles;
    field public Boolean! gradleProject;
    field protected java.util.List<java.io.File!>! javaClassFolders;
    field protected com.intellij.pom.java.LanguageLevel! javaLanguageLevel;
    field protected java.util.List<java.io.File!>! javaLibraries;
    field protected java.util.List<java.io.File!>! javaSourceFolders;
    field protected org.jetbrains.kotlin.config.LanguageVersionSettings! kotlinLanguageLevel;
    field protected Boolean! leanback;
    field protected boolean library;
    field protected java.util.List<java.io.File!>! manifestFiles;
    field protected com.android.sdklib.AndroidVersion! manifestMinSdk;
    field protected com.android.sdklib.AndroidVersion! manifestTargetSdk;
    field protected com.android.tools.lint.model.LintModelMavenName! mavenCoordinates;
    field protected boolean mergeManifests;
    field protected String! name;
    field protected java.util.List<java.io.File!>! nonProvidedJavaLibraries;
    field protected String! pkg;
    field protected java.util.List<java.io.File!>! proguardFiles;
    field protected String! proguardPath;
    field protected java.io.File! referenceDir;
    field protected boolean reportIssues;
    field protected java.util.List<java.io.File!>! resourceFolders;
    field protected com.android.tools.lint.client.api.SdkInfo! sdkInfo;
    field protected Boolean! supportLib;
    field protected com.android.sdklib.IAndroidTarget! target;
    field protected java.util.List<java.io.File!>! testLibraries;
    field protected java.util.List<java.io.File!>! testSourceFolders;
  }

  @com.google.common.annotations.Beta public class ResourceContext extends com.android.tools.lint.detector.api.Context {
    ctor public ResourceContext(com.android.tools.lint.client.api.LintDriver driver, com.android.tools.lint.detector.api.Project project, com.android.tools.lint.detector.api.Project? main, java.io.File file, com.android.resources.ResourceFolderType? resourceFolderType, CharSequence? contents);
    method public final com.android.ide.common.resources.configuration.FolderConfiguration? getFolderConfiguration();
    method public final int getFolderVersion();
    method protected java.io.File? getResourceFolder();
    method public final com.android.resources.ResourceFolderType? getResourceFolderType();
    property public final int folderVersion;
    property protected java.io.File? resourceFolder;
    property public final com.android.resources.ResourceFolderType? resourceFolderType;
  }

  public class ResourceEvaluator {
    ctor public ResourceEvaluator(com.android.tools.lint.client.api.JavaEvaluator?);
    method public com.android.tools.lint.detector.api.ResourceEvaluator! allowDereference(boolean);
    method public static java.util.EnumSet<com.android.resources.ResourceType!>! getAnyRes();
    method public static com.android.resources.ResourceUrl? getResource(com.android.tools.lint.client.api.JavaEvaluator?, com.intellij.psi.PsiElement);
    method public static com.android.resources.ResourceUrl? getResource(com.android.tools.lint.client.api.JavaEvaluator, org.jetbrains.uast.UElement);
    method public com.android.resources.ResourceUrl? getResource(org.jetbrains.uast.UElement?);
    method public com.android.resources.ResourceUrl? getResource(com.intellij.psi.PsiElement?);
    method public static com.android.resources.ResourceUrl? getResourceConstant(com.intellij.psi.PsiElement);
    method public static com.android.resources.ResourceUrl? getResourceConstant(org.jetbrains.uast.UElement);
    method public static java.util.EnumSet<com.android.resources.ResourceType!>? getResourceTypes(com.android.tools.lint.client.api.JavaEvaluator?, com.intellij.psi.PsiElement);
    method public static java.util.EnumSet<com.android.resources.ResourceType!>? getResourceTypes(com.android.tools.lint.client.api.JavaEvaluator?, org.jetbrains.uast.UElement);
    method public java.util.EnumSet<com.android.resources.ResourceType!>? getResourceTypes(org.jetbrains.uast.UElement?);
    method public java.util.EnumSet<com.android.resources.ResourceType!>? getResourceTypes(com.intellij.psi.PsiElement?);
    method public static com.android.resources.ResourceType? getTypeFromAnnotationSignature(String);
    method public static java.util.EnumSet<com.android.resources.ResourceType!>? getTypesFromAnnotationList(java.util.List<com.android.tools.lint.detector.api.AnnotationInfo!>);
    method public static java.util.EnumSet<com.android.resources.ResourceType!>? getTypesFromAnnotations(com.intellij.psi.PsiAnnotation![]);
    method public static java.util.EnumSet<com.android.resources.ResourceType!>? getTypesFromAnnotations(java.util.List<org.jetbrains.uast.UAnnotation!>);
    field public static final com.android.support.AndroidxName! ANIMATOR_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! ANIM_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! ANY_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! ARRAY_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! ATTR_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! BOOL_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! COLOR_INT_ANNOTATION;
    field public static final com.android.resources.ResourceType COLOR_INT_MARKER_TYPE;
    field public static final com.android.support.AndroidxName! COLOR_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! DIMENSION_ANNOTATION;
    field public static final com.android.resources.ResourceType DIMENSION_MARKER_TYPE;
    field public static final com.android.support.AndroidxName! DIMEN_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! DRAWABLE_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! FONT_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! FRACTION_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! ID_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! INTEGER_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! INTERPOLATOR_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! LAYOUT_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! MENU_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! NAVIGATION_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! PLURALS_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! PX_ANNOTATION;
    field public static final com.android.support.AndroidxName! RAW_RES_ANNOTATION;
    field public static final String RES_SUFFIX = "Res";
    field public static final com.android.support.AndroidxName! STRING_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! STYLEABLE_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! STYLE_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! TRANSITION_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! XML_RES_ANNOTATION;
  }

  public interface ResourceFolderScanner {
    method public boolean appliesTo(com.android.resources.ResourceFolderType folderType);
    method public void checkFolder(com.android.tools.lint.detector.api.ResourceContext context, String folderName);
  }

  @com.google.common.annotations.Beta public abstract class ResourceXmlDetector extends com.android.tools.lint.detector.api.Detector implements com.android.tools.lint.detector.api.XmlScanner {
    ctor public ResourceXmlDetector();
  }

  @com.google.common.annotations.Beta public enum Scope {
    method public static final boolean checkSingleFile(java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scopes);
    method public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> infer(java.util.Collection<? extends com.android.tools.lint.detector.api.Project>? projects);
    method public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> intersect(java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scope1, java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scope2);
    enum_constant public static final com.android.tools.lint.detector.api.Scope ALL_CLASS_FILES;
    enum_constant public static final com.android.tools.lint.detector.api.Scope ALL_JAVA_FILES;
    enum_constant public static final com.android.tools.lint.detector.api.Scope ALL_RESOURCE_FILES;
    enum_constant public static final com.android.tools.lint.detector.api.Scope BINARY_RESOURCE_FILE;
    enum_constant public static final com.android.tools.lint.detector.api.Scope CLASS_FILE;
    enum_constant public static final com.android.tools.lint.detector.api.Scope GRADLE_FILE;
    enum_constant public static final com.android.tools.lint.detector.api.Scope JAVA_FILE;
    enum_constant public static final com.android.tools.lint.detector.api.Scope JAVA_LIBRARIES;
    enum_constant public static final com.android.tools.lint.detector.api.Scope MANIFEST;
    enum_constant public static final com.android.tools.lint.detector.api.Scope OTHER;
    enum_constant public static final com.android.tools.lint.detector.api.Scope PROGUARD_FILE;
    enum_constant public static final com.android.tools.lint.detector.api.Scope PROPERTY_FILE;
    enum_constant public static final com.android.tools.lint.detector.api.Scope RESOURCE_FILE;
    enum_constant public static final com.android.tools.lint.detector.api.Scope RESOURCE_FOLDER;
    enum_constant public static final com.android.tools.lint.detector.api.Scope TEST_SOURCES;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> ALL;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> ALL_CLASSES_AND_LIBRARIES;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> ALL_RESOURCES_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> BINARY_RESOURCE_FILE_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> CLASS_AND_ALL_RESOURCE_FILES;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> CLASS_FILE_SCOPE;
    field public static final com.android.tools.lint.detector.api.Scope.Companion Companion;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> EMPTY;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> GRADLE_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> JAVA_AND_RESOURCE_FILES;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> JAVA_FILE_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> JAVA_LIBRARY_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> MANIFEST_AND_RESOURCE_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> MANIFEST_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> OTHER_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> PROGUARD_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> PROPERTY_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> RESOURCE_FILE_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> RESOURCE_FOLDER_SCOPE;
  }

  public static final class Scope.Companion {
    method public boolean checkSingleFile(java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scopes);
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Scope> infer(java.util.Collection<? extends com.android.tools.lint.detector.api.Project>? projects);
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Scope> intersect(java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scope1, java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scope2);
  }

  @com.google.common.annotations.Beta public enum Severity {
    method public static final com.android.tools.lint.detector.api.Severity? fromName(String name);
    method public final String! getDescription();
    method public final boolean isError();
    method public static final com.android.tools.lint.detector.api.Severity max(com.android.tools.lint.detector.api.Severity severity1, com.android.tools.lint.detector.api.Severity severity2);
    method public static final com.android.tools.lint.detector.api.Severity min(com.android.tools.lint.detector.api.Severity severity1, com.android.tools.lint.detector.api.Severity severity2);
    method public final String toName();
    property public final String! description;
    property public final boolean isError;
    enum_constant public static final com.android.tools.lint.detector.api.Severity ERROR;
    enum_constant public static final com.android.tools.lint.detector.api.Severity FATAL;
    enum_constant public static final com.android.tools.lint.detector.api.Severity IGNORE;
    enum_constant public static final com.android.tools.lint.detector.api.Severity INFORMATIONAL;
    enum_constant public static final com.android.tools.lint.detector.api.Severity WARNING;
    field public static final com.android.tools.lint.detector.api.Severity.Companion Companion;
  }

  public static final class Severity.Companion {
    method public com.android.tools.lint.detector.api.Severity? fromName(String name);
    method public com.android.tools.lint.detector.api.Severity max(com.android.tools.lint.detector.api.Severity severity1, com.android.tools.lint.detector.api.Severity severity2);
    method public com.android.tools.lint.detector.api.Severity min(com.android.tools.lint.detector.api.Severity severity1, com.android.tools.lint.detector.api.Severity severity2);
  }

  public final class SeverityKt {
    method public static com.android.tools.lint.model.LintModelSeverity getModelSeverity(com.android.tools.lint.detector.api.Severity);
    method public static com.android.tools.lint.detector.api.Severity getSeverity(com.android.tools.lint.model.LintModelSeverity, com.android.tools.lint.detector.api.Issue? issue);
  }

  public interface SourceCodeScanner extends com.android.tools.lint.detector.api.FileScanner {
    method public void analyzeCallGraph(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.interprocedural.CallGraphResult callGraph);
    method public java.util.List<java.lang.String>? applicableAnnotations();
    method public java.util.List<java.lang.String>? applicableSuperClasses();
    method public boolean appliesToResourceRefs();
    method public com.android.tools.lint.client.api.UElementHandler? createUastHandler(com.android.tools.lint.detector.api.JavaContext context);
    method public java.util.List<java.lang.String>? getApplicableConstructorTypes();
    method public java.util.List<java.lang.String>? getApplicableMethodNames();
    method public java.util.List<java.lang.String>? getApplicableReferenceNames();
    method public java.util.List<java.lang.Class<? extends org.jetbrains.uast.UElement>>? getApplicableUastTypes();
    method public boolean inheritAnnotation(String annotation);
    method public boolean isApplicableAnnotationUsage(com.android.tools.lint.detector.api.AnnotationUsageType type);
    method public boolean isCallGraphRequired();
    method public void visitAnnotationUsage(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement element, com.android.tools.lint.detector.api.AnnotationInfo annotationInfo, com.android.tools.lint.detector.api.AnnotationUsageInfo usageInfo);
    method @Deprecated public void visitAnnotationUsage(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement usage, com.android.tools.lint.detector.api.AnnotationUsageType type, org.jetbrains.uast.UAnnotation annotation, String qualifiedName, com.intellij.psi.PsiMethod? method, java.util.List<? extends org.jetbrains.uast.UAnnotation> annotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allMemberAnnotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allClassAnnotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allPackageAnnotations);
    method @Deprecated public void visitAnnotationUsage(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement usage, com.android.tools.lint.detector.api.AnnotationUsageType type, org.jetbrains.uast.UAnnotation annotation, String qualifiedName, com.intellij.psi.PsiMethod? method, com.intellij.psi.PsiElement? referenced, java.util.List<? extends org.jetbrains.uast.UAnnotation> annotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allMemberAnnotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allClassAnnotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allPackageAnnotations);
    method public void visitClass(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UClass declaration);
    method public void visitClass(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.ULambdaExpression lambda);
    method public void visitConstructor(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UCallExpression node, com.intellij.psi.PsiMethod constructor);
    method @Deprecated public void visitMethod(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UCallExpression node, com.intellij.psi.PsiMethod method);
    method public void visitMethodCall(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UCallExpression node, com.intellij.psi.PsiMethod method);
    method public void visitReference(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UReferenceExpression reference, com.intellij.psi.PsiElement referenced);
    method public void visitResourceReference(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement node, com.android.resources.ResourceType type, String name, boolean isFramework);
  }

  @com.google.common.annotations.Beta public enum Speed {
    method public String getDisplayName();
    enum_constant public static final com.android.tools.lint.detector.api.Speed FAST;
    enum_constant public static final com.android.tools.lint.detector.api.Speed NORMAL;
    enum_constant public static final com.android.tools.lint.detector.api.Speed REALLY_SLOW;
    enum_constant public static final com.android.tools.lint.detector.api.Speed SLOW;
  }

  public final class TargetSdkAtLeast extends com.android.tools.lint.detector.api.Constraint {
    method public boolean accept(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Incident incident);
    method public int getTargetSdkVersion();
    property public final int targetSdkVersion;
  }

  public final class TargetSdkLessThan extends com.android.tools.lint.detector.api.Constraint {
    method public boolean accept(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Incident incident);
    method public int getTargetSdkVersion();
    property public final int targetSdkVersion;
  }

  public enum TextFormat {
    method public final String convertTo(String message, com.android.tools.lint.detector.api.TextFormat to);
    method public final String toHtml(String text);
    method public final String toText(String text);
    enum_constant public static final com.android.tools.lint.detector.api.TextFormat HTML;
    enum_constant public static final com.android.tools.lint.detector.api.TextFormat HTML_WITH_UNICODE;
    enum_constant public static final com.android.tools.lint.detector.api.TextFormat RAW;
    enum_constant public static final com.android.tools.lint.detector.api.TextFormat TEXT;
    field public static final com.android.tools.lint.detector.api.TextFormat.Companion Companion;
    field public static final String HTTPS_PREFIX = "https://";
    field public static final String HTTP_PREFIX = "http://";
  }

  public static final class TextFormat.Companion {
    method public int findUrlEnd(String text, int start);
  }

  public class TypeEvaluator {
    ctor public TypeEvaluator(com.android.tools.lint.detector.api.JavaContext?);
    method public com.intellij.psi.PsiType? evaluate(com.intellij.psi.PsiElement?);
    method public static com.intellij.psi.PsiType? evaluate(org.jetbrains.uast.UElement?);
    method public static com.intellij.psi.PsiType? evaluate(com.android.tools.lint.detector.api.JavaContext, com.intellij.psi.PsiElement);
  }

  public abstract class UImplicitCallExpression implements org.jetbrains.uast.UCallExpression {
    ctor public UImplicitCallExpression(org.jetbrains.uast.UExpression expression, com.intellij.psi.PsiMethod operator);
    method public <D, R> R! accept(org.jetbrains.uast.visitor.UastTypedVisitor<? super D,? extends R> visitor, D? data);
    method public void accept(org.jetbrains.uast.visitor.UastVisitor visitor);
    method public String asLogString();
    method public String asRenderString();
    method public String asSourceString();
    method public Object? evaluate();
    method public org.jetbrains.uast.UAnnotation? findAnnotation(String fqName);
    method public java.util.List<org.jetbrains.uast.UAnnotation> getAnnotations();
    method public org.jetbrains.uast.UExpression getArgumentForParameter(int i);
    method public abstract java.util.Map<org.jetbrains.uast.UExpression,com.intellij.psi.PsiParameter> getArgumentMapping();
    method public org.jetbrains.uast.UReferenceExpression? getClassReference();
    method public java.util.List<org.jetbrains.uast.UComment> getComments();
    method public final org.jetbrains.uast.UExpression getExpression();
    method public com.intellij.psi.PsiType? getExpressionType();
    method public com.intellij.psi.PsiElement? getJavaPsi();
    method public org.jetbrains.uast.UastCallKind getKind();
    method public org.jetbrains.uast.UIdentifier? getMethodIdentifier();
    method public String getMethodName();
    method public final com.intellij.psi.PsiMethod getOperator();
    method public com.intellij.psi.PsiElement? getPsi();
    method public com.intellij.psi.PsiType? getReturnType();
    method public com.intellij.psi.PsiElement? getSourcePsi();
    method public int getTypeArgumentCount();
    method public java.util.List<com.intellij.psi.PsiType> getTypeArguments();
    method public org.jetbrains.uast.UElement? getUastParent();
    method public int getValueArgumentCount();
    method public boolean isPsiValid();
    method public com.intellij.psi.PsiMethod resolve();
    property public java.util.List<org.jetbrains.uast.UAnnotation> annotations;
    property public org.jetbrains.uast.UReferenceExpression? classReference;
    property public java.util.List<org.jetbrains.uast.UComment> comments;
    property public final org.jetbrains.uast.UExpression expression;
    property public boolean isPsiValid;
    property public com.intellij.psi.PsiElement? javaPsi;
    property public org.jetbrains.uast.UastCallKind kind;
    property public com.intellij.lang.Language lang;
    property public org.jetbrains.uast.UIdentifier? methodIdentifier;
    property public String methodName;
    property public final com.intellij.psi.PsiMethod operator;
    property public com.intellij.psi.PsiElement? psi;
    property public abstract org.jetbrains.uast.UExpression? receiver;
    property public abstract com.intellij.psi.PsiType? receiverType;
    property public com.intellij.psi.PsiType? returnType;
    property public com.intellij.psi.PsiElement? sourcePsi;
    property public int typeArgumentCount;
    property public java.util.List<com.intellij.psi.PsiType> typeArguments;
    property public java.util.List<org.jetbrains.uast.UAnnotation> uAnnotations;
    property public org.jetbrains.uast.UElement? uastParent;
    property public int valueArgumentCount;
    property public abstract java.util.List<org.jetbrains.uast.UExpression> valueArguments;
  }

  public final class UImplicitCallExpressionKt {
    method public static org.jetbrains.uast.UCallExpression? asCall(org.jetbrains.uast.UElement);
    method public static org.jetbrains.uast.UCallExpression? asCall(org.jetbrains.uast.UBinaryExpression);
    method public static org.jetbrains.uast.UCallExpression asCall(org.jetbrains.uast.UBinaryExpression, com.intellij.psi.PsiMethod operator);
    method public static org.jetbrains.uast.UCallExpression? asCall(org.jetbrains.uast.UArrayAccessExpression);
    method public static org.jetbrains.uast.UCallExpression asCall(org.jetbrains.uast.UArrayAccessExpression, com.intellij.psi.PsiMethod operator);
    method public static org.jetbrains.uast.UCallExpression? asCall(org.jetbrains.uast.UUnaryExpression);
    method public static org.jetbrains.uast.UCallExpression asCall(org.jetbrains.uast.UUnaryExpression, com.intellij.psi.PsiMethod operator);
  }

  public abstract class UastCallVisitor extends org.jetbrains.uast.visitor.AbstractUastVisitor {
    ctor public UastCallVisitor();
    method public final boolean visitArrayAccessExpression(org.jetbrains.uast.UArrayAccessExpression node);
    method public final boolean visitBinaryExpression(org.jetbrains.uast.UBinaryExpression node);
    method public abstract boolean visitCall(org.jetbrains.uast.UCallExpression node);
    method public final boolean visitCallExpression(org.jetbrains.uast.UCallExpression node);
    method public final boolean visitUnaryExpression(org.jetbrains.uast.UUnaryExpression node);
  }

  public final class UastLintUtils {
    ctor public UastLintUtils();
    method public static boolean areIdentifiersEqual(org.jetbrains.uast.UExpression first, org.jetbrains.uast.UExpression second);
    method public static boolean containsAnnotation(java.util.List<? extends org.jetbrains.uast.UAnnotation> list, org.jetbrains.uast.UAnnotation annotation);
    method public static boolean containsAnnotation(java.util.List<? extends org.jetbrains.uast.UAnnotation> list, String qualifiedName);
    method public static org.jetbrains.uast.UExpression? findLastAssignment(com.intellij.psi.PsiVariable variable, org.jetbrains.uast.UElement call);
    method public static Object? findLastValue(com.intellij.psi.PsiVariable variable, org.jetbrains.uast.UElement call, com.android.tools.lint.detector.api.ConstantEvaluator evaluator);
    method public static Boolean? getAnnotationBooleanValue(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public static boolean getAnnotationBooleanValue(org.jetbrains.uast.UAnnotation? annotation, String name, boolean defaultValue);
    method public static Double? getAnnotationDoubleValue(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public static double getAnnotationDoubleValue(org.jetbrains.uast.UAnnotation? annotation, String name, double defaultValue);
    method public static Long? getAnnotationLongValue(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public static long getAnnotationLongValue(org.jetbrains.uast.UAnnotation? annotation, String name, long defaultValue);
    method public static String? getAnnotationStringValue(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public static String![]? getAnnotationStringValues(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public static org.jetbrains.uast.UExpression? getAnnotationValue(org.jetbrains.uast.UAnnotation annotation);
    method public static boolean getBoolean(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UAnnotation annotation, String name, boolean defaultValue);
    method public static String getClassName(com.intellij.psi.PsiClassType type);
    method public static String getClassName(com.intellij.psi.PsiClass psiClass);
    method public static com.intellij.psi.PsiFile? getContainingFile(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement? element);
    method public static com.intellij.psi.PsiFile? getContainingFile(com.intellij.psi.PsiElement? element);
    method public static double getDoubleAttribute(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UAnnotation annotation, String name, double defaultValue);
    method public static String? getIdentifier(org.jetbrains.uast.UExpression expression);
    method public static long getLongAttribute(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UAnnotation annotation, String name, long defaultValue);
    method public static com.intellij.psi.PsiFile? getPsiFile(org.jetbrains.uast.UFile? file);
    method public static String? getQualifiedName(com.intellij.psi.PsiElement element);
    method public static String? getReferenceName(org.jetbrains.uast.UReferenceExpression expression);
    method public static boolean isMinusOne(org.jetbrains.uast.UElement argument);
    method public static boolean isNumber(org.jetbrains.uast.UElement argument);
    method public static boolean isZero(org.jetbrains.uast.UElement argument);
    method public static com.android.tools.lint.client.api.ResourceReference? toAndroidReferenceViaResolve(org.jetbrains.uast.UElement element);
    method public static org.jetbrains.uast.UDeclaration? tryResolveUDeclaration(org.jetbrains.uast.UElement);
    field public static final com.android.tools.lint.detector.api.UastLintUtils.Companion Companion;
  }

  public static final class UastLintUtils.Companion {
    method public boolean areIdentifiersEqual(org.jetbrains.uast.UExpression first, org.jetbrains.uast.UExpression second);
    method public boolean containsAnnotation(java.util.List<? extends org.jetbrains.uast.UAnnotation> list, org.jetbrains.uast.UAnnotation annotation);
    method public boolean containsAnnotation(java.util.List<? extends org.jetbrains.uast.UAnnotation> list, String qualifiedName);
    method public org.jetbrains.uast.UExpression? findLastAssignment(com.intellij.psi.PsiVariable variable, org.jetbrains.uast.UElement call);
    method public Object? findLastValue(com.intellij.psi.PsiVariable variable, org.jetbrains.uast.UElement call, com.android.tools.lint.detector.api.ConstantEvaluator evaluator);
    method public Boolean? getAnnotationBooleanValue(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public boolean getAnnotationBooleanValue(org.jetbrains.uast.UAnnotation? annotation, String name, boolean defaultValue);
    method public Double? getAnnotationDoubleValue(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public double getAnnotationDoubleValue(org.jetbrains.uast.UAnnotation? annotation, String name, double defaultValue);
    method public Long? getAnnotationLongValue(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public long getAnnotationLongValue(org.jetbrains.uast.UAnnotation? annotation, String name, long defaultValue);
    method public String? getAnnotationStringValue(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public String![]? getAnnotationStringValues(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public org.jetbrains.uast.UExpression? getAnnotationValue(org.jetbrains.uast.UAnnotation annotation);
    method public boolean getBoolean(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UAnnotation annotation, String name, boolean defaultValue);
    method public String getClassName(com.intellij.psi.PsiClassType type);
    method public String getClassName(com.intellij.psi.PsiClass psiClass);
    method public com.intellij.psi.PsiFile? getContainingFile(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement? element);
    method public com.intellij.psi.PsiFile? getContainingFile(com.intellij.psi.PsiElement? element);
    method public double getDoubleAttribute(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UAnnotation annotation, String name, double defaultValue);
    method public String? getIdentifier(org.jetbrains.uast.UExpression expression);
    method public long getLongAttribute(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UAnnotation annotation, String name, long defaultValue);
    method public com.intellij.psi.PsiFile? getPsiFile(org.jetbrains.uast.UFile? file);
    method public String? getQualifiedName(com.intellij.psi.PsiElement element);
    method public String? getReferenceName(org.jetbrains.uast.UReferenceExpression expression);
    method public boolean isMinusOne(org.jetbrains.uast.UElement argument);
    method public boolean isNumber(org.jetbrains.uast.UElement argument);
    method public boolean isZero(org.jetbrains.uast.UElement argument);
    method public com.android.tools.lint.client.api.ResourceReference? toAndroidReferenceViaResolve(org.jetbrains.uast.UElement element);
    method public org.jetbrains.uast.UDeclaration? tryResolveUDeclaration(org.jetbrains.uast.UElement);
  }

  public final class UastLintUtilsKt {
    method public static org.jetbrains.uast.UElement findSelector(org.jetbrains.uast.UElement);
    method public static boolean isReceiver(com.intellij.psi.PsiParameter);
    method public static org.jetbrains.uast.UExpression? nextStatement(org.jetbrains.uast.UElement);
    method public static org.jetbrains.uast.UExpression? previousStatement(org.jetbrains.uast.UElement);
  }

  @com.google.common.annotations.Beta public class XmlContext extends com.android.tools.lint.detector.api.ResourceContext {
    ctor public XmlContext(com.android.tools.lint.client.api.LintDriver driver, com.android.tools.lint.detector.api.Project project, com.android.tools.lint.detector.api.Project? main, java.io.File file, com.android.resources.ResourceFolderType? folderType, CharSequence? contents, org.w3c.dom.Document document);
    method public final com.android.tools.lint.detector.api.Location.Handle createLocationHandle(org.w3c.dom.Node node);
    method public final com.android.tools.lint.detector.api.Location getElementLocation(org.w3c.dom.Element element, optional org.w3c.dom.Node? node, optional String? namespace, optional String? attribute);
    method public final com.android.tools.lint.detector.api.Location getElementLocation(org.w3c.dom.Element element);
    method public final com.android.tools.lint.detector.api.Location getLocation(org.w3c.dom.Node node);
    method public final com.android.tools.lint.detector.api.Location getLocation(org.w3c.dom.Node textNode, int begin, int end);
    method public final com.android.tools.lint.detector.api.Location getNameLocation(org.w3c.dom.Node node);
    method public final com.android.tools.lint.client.api.XmlParser getParser();
    method public final com.android.tools.lint.detector.api.Location getValueLocation(org.w3c.dom.Attr node);
    method public final boolean isSuppressedWithComment(org.w3c.dom.Node node, com.android.tools.lint.detector.api.Issue issue);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.w3c.dom.Node? scope, com.android.tools.lint.detector.api.Location location, String message, optional com.android.tools.lint.detector.api.LintFix? quickfixData);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.w3c.dom.Node? scope, com.android.tools.lint.detector.api.Location location, String message);
    property public final com.android.tools.lint.client.api.XmlParser parser;
    property protected java.io.File? resourceFolder;
    property protected String? suppressCommentPrefix;
    field public final org.w3c.dom.Document document;
  }

  public interface XmlScanner extends com.android.tools.lint.detector.api.FileScanner com.android.tools.lint.detector.api.XmlScannerConstants {
    method public boolean appliesTo(com.android.resources.ResourceFolderType folderType);
    method public java.util.Collection<java.lang.String>? getApplicableAttributes();
    method public java.util.Collection<java.lang.String>? getApplicableElements();
    method public void visitAttribute(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Attr attribute);
    method public void visitDocument(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Document document);
    method public void visitElement(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Element element);
    method public void visitElementAfter(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Element element);
  }

  public interface XmlScannerConstants {
    field public static final java.util.List<java.lang.String!> ALL;
  }

}

package com.android.tools.lint.detector.api.interprocedural {

  public interface CallGraph {
    method public default String dump(optional kotlin.jvm.functions.Function1<? super com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge,java.lang.Boolean> filter);
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph.Node getNode(org.jetbrains.uast.UElement element);
    method public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.CallGraph.Node> getNodes();
    method public default void outputToDotFile(String file, optional kotlin.jvm.functions.Function1<? super com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge,java.lang.Boolean> filter);
    property public abstract java.util.Collection<com.android.tools.lint.detector.api.interprocedural.CallGraph.Node> nodes;
  }

  public static final class CallGraph.Edge {
    ctor public CallGraph.Edge(com.android.tools.lint.detector.api.interprocedural.CallGraph.Node? node, org.jetbrains.uast.UCallExpression? call, com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind kind);
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph.Node? component1();
    method public org.jetbrains.uast.UCallExpression? component2();
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind component3();
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge copy(com.android.tools.lint.detector.api.interprocedural.CallGraph.Node? node, org.jetbrains.uast.UCallExpression? call, com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind kind);
    method public org.jetbrains.uast.UCallExpression? getCall();
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind getKind();
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph.Node? getNode();
    method public boolean isLikely();
    property public final org.jetbrains.uast.UCallExpression? call;
    property public final boolean isLikely;
    property public final com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind kind;
    property public final com.android.tools.lint.detector.api.interprocedural.CallGraph.Node? node;
  }

  public enum CallGraph.Edge.Kind {
    method public final boolean isLikely();
    property public final boolean isLikely;
    enum_constant public static final com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind BASE;
    enum_constant public static final com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind DIRECT;
    enum_constant public static final com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind INVOKE;
    enum_constant public static final com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind NON_UNIQUE_OVERRIDE;
    enum_constant public static final com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind TYPE_EVIDENCED;
    enum_constant public static final com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind UNIQUE;
  }

  public static interface CallGraph.Node {
    method public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge> getEdges();
    method public default java.util.Collection<com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge> getLikelyEdges();
    method public com.android.tools.lint.detector.api.interprocedural.CallTarget getTarget();
    property public abstract java.util.Collection<com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge> edges;
    property public default java.util.Collection<com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge> likelyEdges;
    property public abstract com.android.tools.lint.detector.api.interprocedural.CallTarget target;
  }

  public final class CallGraphKt {
    method public static com.android.tools.lint.detector.api.interprocedural.ContextualCallGraph buildContextualCallGraph(com.android.tools.lint.detector.api.interprocedural.CallGraph, com.android.tools.lint.detector.api.interprocedural.IntraproceduralDispatchReceiverEvaluator nonContextualReceiverEval);
    method public static java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ParamContext> buildParamContextsFromCall(com.android.tools.lint.detector.api.interprocedural.CallTarget callee, org.jetbrains.uast.UCallExpression call, java.util.Collection<? extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> implicitThisDispatchReceivers, com.android.tools.lint.detector.api.interprocedural.ContextualDispatchReceiverEvaluator receiverEval);
    method public static java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ContextualEdge> computeEdges(com.android.tools.lint.detector.api.interprocedural.ContextualNode, com.android.tools.lint.detector.api.interprocedural.CallGraph callGraph, com.android.tools.lint.detector.api.interprocedural.IntraproceduralDispatchReceiverEvaluator nonContextualReceiverEval);
    method public static String getShortName(com.android.tools.lint.detector.api.interprocedural.CallGraph.Node?);
    method public static java.util.Collection<java.util.List<com.android.tools.lint.detector.api.interprocedural.ContextualEdge>> searchForContextualPaths(com.android.tools.lint.detector.api.interprocedural.ContextualCallGraph, java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ContextualNode> contextualSources, java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ContextualNode> contextualSinks);
    method public static <T> java.util.Collection<java.util.List<T>> searchForPaths(java.util.Collection<? extends T> sources, kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> isSink, kotlin.jvm.functions.Function1<? super T,? extends java.util.Collection<? extends T>> getNeighbors);
    method public static java.util.Collection<java.util.List<com.android.tools.lint.detector.api.interprocedural.ContextualEdge>> searchForPaths(com.android.tools.lint.detector.api.interprocedural.ContextualCallGraph, java.util.Collection<? extends com.android.tools.lint.detector.api.interprocedural.CallGraph.Node> sources, java.util.Collection<? extends com.android.tools.lint.detector.api.interprocedural.CallGraph.Node> sinks);
    field public static final int GRAPH_EXPANSION_LIMIT = 1000; // 0x3e8
  }

  public final class CallGraphResult {
    ctor public CallGraphResult(com.android.tools.lint.detector.api.interprocedural.CallGraph callGraph, com.android.tools.lint.detector.api.interprocedural.IntraproceduralDispatchReceiverEvaluator receiverEval);
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph component1();
    method public com.android.tools.lint.detector.api.interprocedural.IntraproceduralDispatchReceiverEvaluator component2();
    method public com.android.tools.lint.detector.api.interprocedural.CallGraphResult copy(com.android.tools.lint.detector.api.interprocedural.CallGraph callGraph, com.android.tools.lint.detector.api.interprocedural.IntraproceduralDispatchReceiverEvaluator receiverEval);
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph getCallGraph();
    method public com.android.tools.lint.detector.api.interprocedural.IntraproceduralDispatchReceiverEvaluator getReceiverEval();
    property public final com.android.tools.lint.detector.api.interprocedural.CallGraph callGraph;
    property public final com.android.tools.lint.detector.api.interprocedural.IntraproceduralDispatchReceiverEvaluator receiverEval;
  }

  public final class CallGraphVisitor extends org.jetbrains.uast.visitor.AbstractUastVisitor {
    ctor public CallGraphVisitor(com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator receiverEval, com.android.tools.lint.detector.api.interprocedural.ClassHierarchy classHierarchy, optional boolean conservative);
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph getCallGraph();
    property public final com.android.tools.lint.detector.api.interprocedural.CallGraph callGraph;
  }

  public abstract sealed class CallTarget {
    method public abstract org.jetbrains.uast.UElement getElement();
    property public abstract org.jetbrains.uast.UElement element;
  }

  public static final class CallTarget.DefaultCtor extends com.android.tools.lint.detector.api.interprocedural.CallTarget {
    ctor public CallTarget.DefaultCtor(org.jetbrains.uast.UClass element);
    method public org.jetbrains.uast.UClass component1();
    method public com.android.tools.lint.detector.api.interprocedural.CallTarget.DefaultCtor copy(org.jetbrains.uast.UClass element);
    method public org.jetbrains.uast.UClass getElement();
    property public org.jetbrains.uast.UClass element;
  }

  public static final class CallTarget.Lambda extends com.android.tools.lint.detector.api.interprocedural.CallTarget {
    ctor public CallTarget.Lambda(org.jetbrains.uast.ULambdaExpression element);
    method public org.jetbrains.uast.ULambdaExpression component1();
    method public com.android.tools.lint.detector.api.interprocedural.CallTarget.Lambda copy(org.jetbrains.uast.ULambdaExpression element);
    method public org.jetbrains.uast.ULambdaExpression getElement();
    property public org.jetbrains.uast.ULambdaExpression element;
  }

  public static final class CallTarget.Method extends com.android.tools.lint.detector.api.interprocedural.CallTarget {
    ctor public CallTarget.Method(org.jetbrains.uast.UMethod element);
    method public org.jetbrains.uast.UMethod component1();
    method public com.android.tools.lint.detector.api.interprocedural.CallTarget.Method copy(org.jetbrains.uast.UMethod element);
    method public org.jetbrains.uast.UMethod getElement();
    property public org.jetbrains.uast.UMethod element;
  }

  public interface ClassHierarchy {
    method public default kotlin.sequences.Sequence<org.jetbrains.uast.UClass> allInheritorsOf(org.jetbrains.uast.UClass superClass);
    method public default kotlin.sequences.Sequence<org.jetbrains.uast.UMethod> allOverridesOf(org.jetbrains.uast.UMethod superMethod);
    method public kotlin.sequences.Sequence<org.jetbrains.uast.UClass> directInheritorsOf(org.jetbrains.uast.UClass superClass);
    method public kotlin.sequences.Sequence<org.jetbrains.uast.UMethod> directOverridesOf(org.jetbrains.uast.UMethod superMethod);
  }

  public final class ClassHierarchyVisitor extends org.jetbrains.uast.visitor.AbstractUastVisitor {
    ctor public ClassHierarchyVisitor();
    method public com.android.tools.lint.detector.api.interprocedural.ClassHierarchy getClassHierarchy();
    property public final com.android.tools.lint.detector.api.interprocedural.ClassHierarchy classHierarchy;
  }

  public interface ContextualCallGraph {
    method public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ContextualNode> getContextualNodes();
    method public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ContextualEdge> inEdges(com.android.tools.lint.detector.api.interprocedural.ContextualNode n);
    method public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ContextualEdge> outEdges(com.android.tools.lint.detector.api.interprocedural.ContextualNode n);
    property public abstract java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ContextualNode> contextualNodes;
  }

  public final class ContextualDispatchReceiverEvaluator extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator {
    ctor public ContextualDispatchReceiverEvaluator(com.android.tools.lint.detector.api.interprocedural.ParamContext paramContext, com.android.tools.lint.detector.api.interprocedural.IntraproceduralDispatchReceiverEvaluator nonContextualEval);
    method protected java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getOwn(org.jetbrains.uast.UElement element, com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator root);
    method protected java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getOwnForImplicitThis();
  }

  public final class ContextualEdge {
    ctor public ContextualEdge(com.android.tools.lint.detector.api.interprocedural.ContextualNode contextualNode, org.jetbrains.uast.UElement cause);
    method public com.android.tools.lint.detector.api.interprocedural.ContextualNode component1();
    method public org.jetbrains.uast.UElement component2();
    method public com.android.tools.lint.detector.api.interprocedural.ContextualEdge copy(com.android.tools.lint.detector.api.interprocedural.ContextualNode contextualNode, org.jetbrains.uast.UElement cause);
    method public org.jetbrains.uast.UElement getCause();
    method public com.android.tools.lint.detector.api.interprocedural.ContextualNode getContextualNode();
    property public final org.jetbrains.uast.UElement cause;
    property public final com.android.tools.lint.detector.api.interprocedural.ContextualNode contextualNode;
  }

  public final class ContextualNode {
    ctor public ContextualNode(com.android.tools.lint.detector.api.interprocedural.CallGraph.Node node, com.android.tools.lint.detector.api.interprocedural.ParamContext paramContext);
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph.Node component1();
    method public com.android.tools.lint.detector.api.interprocedural.ParamContext component2();
    method public com.android.tools.lint.detector.api.interprocedural.ContextualNode copy(com.android.tools.lint.detector.api.interprocedural.CallGraph.Node node, com.android.tools.lint.detector.api.interprocedural.ParamContext paramContext);
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph.Node getNode();
    method public com.android.tools.lint.detector.api.interprocedural.ParamContext getParamContext();
    property public final com.android.tools.lint.detector.api.interprocedural.CallGraph.Node node;
    property public final com.android.tools.lint.detector.api.interprocedural.ParamContext paramContext;
  }

  public abstract sealed class DispatchReceiver {
    method public abstract org.jetbrains.uast.UElement getElement();
    property public abstract org.jetbrains.uast.UElement element;
  }

  public static final class DispatchReceiver.Class extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiver {
    ctor public DispatchReceiver.Class(org.jetbrains.uast.UClass element);
    method public org.jetbrains.uast.UClass component1();
    method public com.android.tools.lint.detector.api.interprocedural.DispatchReceiver.Class copy(org.jetbrains.uast.UClass element);
    method public org.jetbrains.uast.UClass getElement();
    method public com.android.tools.lint.detector.api.interprocedural.CallTarget.Method? refineToTarget(org.jetbrains.uast.UMethod method);
    property public org.jetbrains.uast.UClass element;
  }

  public abstract static sealed class DispatchReceiver.Functional extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiver {
    method public org.jetbrains.uast.UElement getElement();
    method public abstract com.android.tools.lint.detector.api.interprocedural.CallTarget? toTarget();
    property public org.jetbrains.uast.UElement element;
  }

  public static final class DispatchReceiver.Functional.Lambda extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiver.Functional {
    ctor public DispatchReceiver.Functional.Lambda(org.jetbrains.uast.ULambdaExpression element, com.android.tools.lint.detector.api.interprocedural.ParamContext captureContext);
    method public org.jetbrains.uast.ULambdaExpression component1();
    method public com.android.tools.lint.detector.api.interprocedural.ParamContext component2();
    method public com.android.tools.lint.detector.api.interprocedural.DispatchReceiver.Functional.Lambda copy(org.jetbrains.uast.ULambdaExpression element, com.android.tools.lint.detector.api.interprocedural.ParamContext captureContext);
    method public com.android.tools.lint.detector.api.interprocedural.ParamContext getCaptureContext();
    method public org.jetbrains.uast.ULambdaExpression getElement();
    method public com.android.tools.lint.detector.api.interprocedural.CallTarget.Lambda toTarget();
    property public final com.android.tools.lint.detector.api.interprocedural.ParamContext captureContext;
    property public org.jetbrains.uast.ULambdaExpression element;
  }

  public static final class DispatchReceiver.Functional.Reference extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiver.Functional {
    ctor public DispatchReceiver.Functional.Reference(org.jetbrains.uast.UCallableReferenceExpression element, com.android.tools.lint.detector.api.interprocedural.DispatchReceiver.Class? receiver);
    method public org.jetbrains.uast.UCallableReferenceExpression component1();
    method public com.android.tools.lint.detector.api.interprocedural.DispatchReceiver.Class? component2();
    method public com.android.tools.lint.detector.api.interprocedural.DispatchReceiver.Functional.Reference copy(org.jetbrains.uast.UCallableReferenceExpression element, com.android.tools.lint.detector.api.interprocedural.DispatchReceiver.Class? receiver);
    method public org.jetbrains.uast.UCallableReferenceExpression getElement();
    method public com.android.tools.lint.detector.api.interprocedural.DispatchReceiver.Class? getReceiver();
    method public com.android.tools.lint.detector.api.interprocedural.CallTarget.Method? toTarget();
    property public org.jetbrains.uast.UCallableReferenceExpression element;
    property public final com.android.tools.lint.detector.api.interprocedural.DispatchReceiver.Class? receiver;
  }

  public abstract class DispatchReceiverEvaluator {
    ctor public DispatchReceiverEvaluator(optional com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator? delegate);
    method public final operator java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> get(org.jetbrains.uast.UElement element, optional com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator root);
    method public final java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getForImplicitThis();
    method protected abstract java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getOwn(org.jetbrains.uast.UElement element, com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator root);
    method protected abstract java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getOwnForImplicitThis();
  }

  public final class DispatchReceiverEvaluatorKt {
    method public static java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getDispatchReceivers(org.jetbrains.uast.UCallExpression, com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator receiverEval);
    method public static com.android.tools.lint.detector.api.interprocedural.CallTarget? getTarget(org.jetbrains.uast.UCallExpression, com.android.tools.lint.detector.api.interprocedural.DispatchReceiver dispatchReceiver);
    method public static java.util.List<com.android.tools.lint.detector.api.interprocedural.CallTarget> getTargets(org.jetbrains.uast.UCallExpression, com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator receiverEval);
  }

  public final class IntraproceduralDispatchReceiverEvaluator extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator {
    ctor public IntraproceduralDispatchReceiverEvaluator(com.android.tools.lint.detector.api.interprocedural.SimpleExpressionDispatchReceiverEvaluator simpleExprEval, com.google.common.collect.Multimap<org.jetbrains.uast.UVariable,com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> varMap, com.google.common.collect.Multimap<org.jetbrains.uast.UMethod,com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> methodMap);
    method protected java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getOwn(org.jetbrains.uast.UElement element, com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator root);
    method protected java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getOwnForImplicitThis();
  }

  public final class IntraproceduralDispatchReceiverVisitor extends org.jetbrains.uast.visitor.AbstractUastVisitor {
    ctor public IntraproceduralDispatchReceiverVisitor(com.android.tools.lint.detector.api.interprocedural.ClassHierarchy cha);
    method public com.android.tools.lint.detector.api.interprocedural.IntraproceduralDispatchReceiverEvaluator getReceiverEval();
    property public final com.android.tools.lint.detector.api.interprocedural.IntraproceduralDispatchReceiverEvaluator receiverEval;
  }

  public final class MutableCallGraph implements com.android.tools.lint.detector.api.interprocedural.CallGraph {
    ctor public MutableCallGraph();
    method public com.android.tools.lint.detector.api.interprocedural.MutableCallGraph.MutableNode getNode(org.jetbrains.uast.UElement element);
    method public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.MutableCallGraph.MutableNode> getNodes();
    property public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.MutableCallGraph.MutableNode> nodes;
  }

  public static final class MutableCallGraph.MutableNode implements com.android.tools.lint.detector.api.interprocedural.CallGraph.Node {
    ctor public MutableCallGraph.MutableNode(com.android.tools.lint.detector.api.interprocedural.CallTarget target, optional java.util.Collection<com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge> edges);
    method public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge> getEdges();
    method public com.android.tools.lint.detector.api.interprocedural.CallTarget getTarget();
    property public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge> edges;
    property public com.android.tools.lint.detector.api.interprocedural.CallTarget target;
  }

  public final class MutableClassHierarchy implements com.android.tools.lint.detector.api.interprocedural.ClassHierarchy {
    ctor public MutableClassHierarchy();
    method public void addClass(org.jetbrains.uast.UClass subClass);
    method public void addMethod(org.jetbrains.uast.UMethod subMethod);
    method public kotlin.sequences.Sequence<org.jetbrains.uast.UClass> directInheritorsOf(org.jetbrains.uast.UClass superClass);
    method public kotlin.sequences.Sequence<org.jetbrains.uast.UMethod> directOverridesOf(org.jetbrains.uast.UMethod superMethod);
  }

  public final class MutableContextualCallGraph implements com.android.tools.lint.detector.api.interprocedural.ContextualCallGraph {
    ctor public MutableContextualCallGraph();
    method public java.util.ArrayList<com.android.tools.lint.detector.api.interprocedural.ContextualNode> getContextualNodes();
    method public com.google.common.collect.Multimap<com.android.tools.lint.detector.api.interprocedural.CallGraph.Node,com.android.tools.lint.detector.api.interprocedural.ContextualNode> getExpansionMap();
    method public com.google.common.collect.Multimap<com.android.tools.lint.detector.api.interprocedural.ContextualNode,com.android.tools.lint.detector.api.interprocedural.ContextualEdge> getInEdgeMap();
    method public com.google.common.collect.Multimap<com.android.tools.lint.detector.api.interprocedural.ContextualNode,com.android.tools.lint.detector.api.interprocedural.ContextualEdge> getOutEdgeMap();
    method public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ContextualEdge> inEdges(com.android.tools.lint.detector.api.interprocedural.ContextualNode n);
    method public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ContextualEdge> outEdges(com.android.tools.lint.detector.api.interprocedural.ContextualNode n);
    property public java.util.ArrayList<com.android.tools.lint.detector.api.interprocedural.ContextualNode> contextualNodes;
    property public final com.google.common.collect.Multimap<com.android.tools.lint.detector.api.interprocedural.CallGraph.Node,com.android.tools.lint.detector.api.interprocedural.ContextualNode> expansionMap;
    property public final com.google.common.collect.Multimap<com.android.tools.lint.detector.api.interprocedural.ContextualNode,com.android.tools.lint.detector.api.interprocedural.ContextualEdge> inEdgeMap;
    property public final com.google.common.collect.Multimap<com.android.tools.lint.detector.api.interprocedural.ContextualNode,com.android.tools.lint.detector.api.interprocedural.ContextualEdge> outEdgeMap;
  }

  public final class ParamContext {
    ctor public ParamContext(java.util.List<? extends kotlin.Pair<? extends org.jetbrains.uast.UVariable,? extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiver>> params, com.android.tools.lint.detector.api.interprocedural.DispatchReceiver? implicitThis);
    method public java.util.List<kotlin.Pair<org.jetbrains.uast.UVariable,com.android.tools.lint.detector.api.interprocedural.DispatchReceiver>> component1();
    method public com.android.tools.lint.detector.api.interprocedural.DispatchReceiver? component2();
    method public com.android.tools.lint.detector.api.interprocedural.ParamContext copy(java.util.List<? extends kotlin.Pair<? extends org.jetbrains.uast.UVariable,? extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiver>> params, com.android.tools.lint.detector.api.interprocedural.DispatchReceiver? implicitThis);
    method public operator com.android.tools.lint.detector.api.interprocedural.DispatchReceiver? get(org.jetbrains.uast.UVariable param);
    method public com.android.tools.lint.detector.api.interprocedural.DispatchReceiver? getImplicitThis();
    method public java.util.List<kotlin.Pair<org.jetbrains.uast.UVariable,com.android.tools.lint.detector.api.interprocedural.DispatchReceiver>> getParams();
    property public final com.android.tools.lint.detector.api.interprocedural.DispatchReceiver? implicitThis;
    property public final java.util.List<kotlin.Pair<org.jetbrains.uast.UVariable,com.android.tools.lint.detector.api.interprocedural.DispatchReceiver>> params;
    field public static final com.android.tools.lint.detector.api.interprocedural.ParamContext.Companion Companion;
  }

  public static final class ParamContext.Companion {
    method public com.android.tools.lint.detector.api.interprocedural.ParamContext getEMPTY();
    property public final com.android.tools.lint.detector.api.interprocedural.ParamContext EMPTY;
  }

  public final class SimpleExpressionDispatchReceiverEvaluator extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator {
    ctor public SimpleExpressionDispatchReceiverEvaluator(com.android.tools.lint.detector.api.interprocedural.ClassHierarchy cha);
    method protected java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getOwn(org.jetbrains.uast.UElement element, com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator root);
    method protected java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getOwnForImplicitThis();
  }

}

package com.android.tools.lint.helpers {

  public class DefaultJavaEvaluator extends com.android.tools.lint.client.api.JavaEvaluator {
    ctor public DefaultJavaEvaluator(com.intellij.openapi.project.Project? myProject, com.android.tools.lint.detector.api.Project? myLintProject);
    method public boolean extendsClass(com.intellij.psi.PsiClass? cls, String className, boolean strict);
    method public com.intellij.psi.PsiAnnotation? findAnnotation(com.intellij.psi.PsiModifierListOwner? listOwner, java.lang.String... annotationNames);
    method public com.intellij.psi.PsiAnnotation? findAnnotationInHierarchy(com.intellij.psi.PsiModifierListOwner listOwner, java.lang.String... annotationNames);
    method public com.intellij.psi.PsiClass? findClass(String qualifiedName);
    method public String? findJarPath(com.intellij.psi.PsiElement element);
    method public String? findJarPath(org.jetbrains.uast.UElement element);
    method public java.util.List<org.jetbrains.uast.UAnnotation> getAllAnnotations(org.jetbrains.uast.UAnnotated owner, boolean inHierarchy);
    method public com.intellij.psi.PsiAnnotation![] getAllAnnotations(com.intellij.psi.PsiModifierListOwner owner, boolean inHierarchy);
    method public com.intellij.psi.PsiClassType? getClassType(com.intellij.psi.PsiClass? psiClass);
    method public com.android.tools.lint.model.LintModelDependencies? getDependencies();
    method public String? getInternalName(com.intellij.psi.PsiClassType psiClassType);
    method public String? getInternalName(com.intellij.psi.PsiClass psiClass);
    method public com.intellij.psi.PsiPackage? getPackage(com.intellij.psi.PsiElement node);
    method public com.intellij.psi.PsiPackage? getPackage(org.jetbrains.uast.UElement node);
    method public final com.android.tools.lint.detector.api.Project? getProject(java.io.File file);
    method public com.intellij.psi.PsiClass? getTypeClass(com.intellij.psi.PsiType? psiType);
    method public boolean implementsInterface(com.intellij.psi.PsiClass cls, String interfaceName, boolean strict);
    property public com.android.tools.lint.model.LintModelDependencies? dependencies;
  }

  public class DefaultUastParser extends com.android.tools.lint.client.api.UastParser {
    ctor public DefaultUastParser(com.android.tools.lint.detector.api.Project? project, com.intellij.openapi.project.Project ideaProject);
    method protected com.android.tools.lint.helpers.DefaultJavaEvaluator createEvaluator(com.android.tools.lint.detector.api.Project? project, com.intellij.openapi.project.Project p);
    method public com.android.tools.lint.detector.api.Location createLocation(com.intellij.psi.PsiElement element);
    method public com.android.tools.lint.detector.api.Location createLocation(org.jetbrains.uast.UElement element);
    method public com.android.tools.lint.detector.api.Location getCallLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UCallExpression call, boolean includeReceiver, boolean includeArguments);
    method public com.android.tools.lint.client.api.JavaEvaluator getEvaluator();
    method public java.io.File? getFile(com.intellij.psi.PsiFile file);
    method public CharSequence getFileContents(com.intellij.psi.PsiFile file);
    method public final com.intellij.openapi.project.Project getIdeaProject();
    method public com.android.tools.lint.detector.api.Location getLocation(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement element);
    method public com.android.tools.lint.detector.api.Location getLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement element);
    method public com.android.tools.lint.detector.api.Location getNameLocation(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement element);
    method public com.android.tools.lint.detector.api.Location getNameLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement element);
    method public com.android.tools.lint.detector.api.Location getRangeLocation(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement from, int fromDelta, com.intellij.psi.PsiElement to, int toDelta);
    method public com.android.tools.lint.detector.api.Location getRangeLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement from, int fromDelta, org.jetbrains.uast.UElement to, int toDelta);
    method public com.android.tools.lint.detector.api.Location getRangeLocation(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement from, int fromDelta, int toDelta);
    method public com.android.tools.lint.detector.api.Location getRangeLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement from, int fromDelta, int toDelta);
    method public org.jetbrains.uast.UFile? parse(com.android.tools.lint.detector.api.JavaContext context);
    property public com.android.tools.lint.client.api.JavaEvaluator evaluator;
    property public final com.intellij.openapi.project.Project ideaProject;
    field public static final com.android.tools.lint.helpers.DefaultUastParser.Companion Companion;
  }

  public static final class DefaultUastParser.Companion {
    method public boolean getWarnedAboutLargeFiles();
    method public void setWarnedAboutLargeFiles(boolean warnedAboutLargeFiles);
    property public final boolean warnedAboutLargeFiles;
  }

}

