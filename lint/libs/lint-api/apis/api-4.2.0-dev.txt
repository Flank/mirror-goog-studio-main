// Signature format: 3.0
package com.android.tools.lint.client.api {

  public final class AnnotationLookup {
    ctor public AnnotationLookup();
    method public org.jetbrains.uast.UAnnotation findRealAnnotation(com.intellij.psi.PsiAnnotation annotation, com.intellij.psi.PsiClass resolved, org.jetbrains.uast.UElement? context = null);
  }

  public final class BlameFile {
    method public com.android.utils.Pair<java.io.File,? extends org.w3c.dom.Node>? findSourceAttribute(com.android.tools.lint.client.api.LintClient client, org.w3c.dom.Attr attr);
    method public com.android.utils.Pair<java.io.File,org.w3c.dom.Node>? findSourceElement(com.android.tools.lint.client.api.LintClient client, org.w3c.dom.Element element);
    method public com.android.utils.Pair<java.io.File,? extends org.w3c.dom.Node>? findSourceNode(com.android.tools.lint.client.api.LintClient client, org.w3c.dom.Node node);
    field public static final com.android.tools.lint.client.api.BlameFile.Companion Companion;
  }

  public static final class BlameFile.Companion {
    method public com.android.tools.lint.client.api.BlameFile getNONE();
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public com.android.tools.lint.client.api.BlameFile parse(java.io.File file) throws java.io.IOException;
    method public com.android.tools.lint.client.api.BlameFile parse(com.android.manifmerger.Actions mergerActions);
    method public com.android.tools.lint.client.api.BlameFile parse(java.util.List<java.lang.String> lines);
    property public final com.android.tools.lint.client.api.BlameFile NONE;
  }

  public abstract static class BlameFile.XmlVisitor {
    ctor public BlameFile.XmlVisitor();
    method public boolean visitAttribute(org.w3c.dom.Attr attribute);
    method public boolean visitTag(org.w3c.dom.Element element, String tag);
    field public static final com.android.tools.lint.client.api.BlameFile.XmlVisitor.Companion Companion;
  }

  public static final class BlameFile.XmlVisitor.Companion {
    method public void accept(org.w3c.dom.Node node, com.android.tools.lint.client.api.BlameFile.XmlVisitor visitor);
  }

  @com.google.common.annotations.Beta public class CircularDependencyException extends java.lang.RuntimeException {
    ctor public CircularDependencyException(String);
    method public com.android.tools.lint.detector.api.Location? getLocation();
    method public com.android.tools.lint.detector.api.Project? getProject();
    method public void setLocation(com.android.tools.lint.detector.api.Location?);
    method public void setProject(com.android.tools.lint.detector.api.Project?);
  }

  public class CompositeIssueRegistry extends com.android.tools.lint.client.api.IssueRegistry {
    ctor public CompositeIssueRegistry(java.util.List<? extends com.android.tools.lint.client.api.IssueRegistry> registries);
    method public java.util.List<com.android.tools.lint.detector.api.Issue> getIssues();
    property public int api;
    property public boolean isUpToDate;
    property public java.util.List<com.android.tools.lint.detector.api.Issue> issues;
  }

  @com.google.common.annotations.Beta public abstract class Configuration {
    ctor public Configuration();
    method public void finishBulkEditing();
    method public abstract java.io.File? getBaselineFile();
    method public abstract java.io.File getDir();
    method public java.util.List<java.io.File> getLintJars();
    method public abstract String? getOption(com.android.tools.lint.detector.api.Issue issue, String name, String? p = null);
    method public final boolean getOptionAsBoolean(com.android.tools.lint.detector.api.Issue issue, String name, boolean p);
    method public abstract java.io.File? getOptionAsFile(com.android.tools.lint.detector.api.Issue issue, String name, java.io.File? p = null);
    method public final int getOptionAsInt(com.android.tools.lint.detector.api.Issue issue, String name, int p);
    method public boolean getProjectLevel();
    method public com.android.tools.lint.detector.api.Severity getSeverity(com.android.tools.lint.detector.api.Issue issue);
    method public abstract void ignore(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Location? location, String message);
    method public abstract void ignore(com.android.tools.lint.detector.api.Issue issue, java.io.File file);
    method public abstract void ignore(String issueId, java.io.File file);
    method public boolean isEnabled(com.android.tools.lint.detector.api.Issue issue);
    method public boolean isIgnored(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Location? location, String message);
    method public abstract void setBaselineFile(java.io.File? p);
    method public void setProjectLevel(boolean p);
    method public abstract void setSeverity(com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Severity? severity);
    method public void startBulkEditing();
    method public void validateIssueIds(com.android.tools.lint.client.api.LintClient client, com.android.tools.lint.client.api.LintDriver driver, com.android.tools.lint.detector.api.Project project, com.android.tools.lint.client.api.IssueRegistry registry);
    property public abstract java.io.File? baselineFile;
    property public abstract java.io.File dir;
    property public boolean projectLevel;
  }

  public class ConfigurationHierarchy {
    ctor public ConfigurationHierarchy(com.android.tools.lint.client.api.LintClient client, java.io.File? rootDir);
    method public final com.android.tools.lint.client.api.Configuration getConfigurationForFile(java.io.File xmlFile, kotlin.jvm.functions.Function2<? super com.android.tools.lint.client.api.LintClient,? super java.io.File,? extends com.android.tools.lint.client.api.Configuration> create = com.android.tools.lint.client.api.ConfigurationHierarchy.lintXmlCreator);
    method public final com.android.tools.lint.client.api.Configuration? getConfigurationForFolder(java.io.File? dir, com.android.tools.lint.client.api.Configuration? p = null);
    method public final com.android.tools.lint.client.api.Configuration getConfigurationForProject(com.android.tools.lint.detector.api.Project project, kotlin.jvm.functions.Function2<? super com.android.tools.lint.client.api.LintClient,? super java.io.File,? extends com.android.tools.lint.client.api.Configuration> create = com.android.tools.lint.client.api.ConfigurationHierarchy.lintXmlCreator);
    method public final com.android.tools.lint.client.api.Configuration? getParentConfiguration(com.android.tools.lint.client.api.Configuration configuration);
    method public java.io.File? getParentFolder(java.io.File folder);
    method public final java.io.File? getRootDir();
    method public final void setParent(com.android.tools.lint.client.api.Configuration child, com.android.tools.lint.client.api.Configuration parent);
    method public final void setRootDir(java.io.File? p);
    field public static final com.android.tools.lint.client.api.ConfigurationHierarchy.Companion Companion;
  }

  public static final class ConfigurationHierarchy.Companion {
  }

  public class FlagConfiguration extends com.android.tools.lint.client.api.LintXmlConfiguration {
    ctor public FlagConfiguration(com.android.tools.lint.client.api.LintClient client, com.android.tools.lint.detector.api.Project project);
    ctor public FlagConfiguration(com.android.tools.lint.client.api.LintClient client, java.io.File lintFile, java.io.File dir);
    method public boolean allowSuppress();
    method public java.util.Set<com.android.tools.lint.detector.api.Category>? disabledCategories();
    method public java.util.Set<java.lang.String> disabledIds();
    method public java.util.Set<com.android.tools.lint.detector.api.Category>? enabledCategories();
    method public java.util.Set<java.lang.String> enabledIds();
    method public java.util.Set<com.android.tools.lint.detector.api.Category>? exactCategories();
    method public java.util.Set<java.lang.String>? exactCheckedIds();
    method public boolean fatalOnly();
    method public boolean isCheckAllWarnings();
    method public boolean isIgnoreWarnings();
    method public boolean isWarningsAsErrors();
    method public com.android.tools.lint.detector.api.Severity? severityOverride(com.android.tools.lint.detector.api.Issue issue);
  }

  public class GradleVisitor {
    ctor public GradleVisitor();
    method public com.android.tools.lint.detector.api.Location createLocation(com.android.tools.lint.detector.api.GradleContext context, Object cookie);
    method @Deprecated public Object getPropertyKeyCookie(Object cookie);
    method @Deprecated public Object getPropertyPairCookie(Object cookie);
    method public int getStartOffset(com.android.tools.lint.detector.api.GradleContext context, Object cookie);
    method public void visitBuildScript(com.android.tools.lint.detector.api.GradleContext context, java.util.List<? extends com.android.tools.lint.detector.api.GradleScanner> detectors);
  }

  @com.google.common.annotations.Beta public abstract class IssueRegistry {
    ctor protected IssueRegistry();
    method protected boolean cacheable();
    method public int getApi();
    method public final java.util.List<com.android.tools.lint.detector.api.Category> getCategories();
    method public final java.util.List<java.lang.String> getIdSpellingSuggestions(String id);
    method public final com.android.tools.lint.detector.api.Issue? getIssue(String id);
    method protected int getIssueCapacity(java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scope);
    method public abstract java.util.List<com.android.tools.lint.detector.api.Issue> getIssues();
    method protected java.util.List<com.android.tools.lint.detector.api.Issue> getIssuesForScope(java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scope);
    method public int getMinApi();
    method public final boolean isCategoryName(String name);
    method public final boolean isIssueId(String id);
    method public boolean isUpToDate();
    property public int api;
    property public boolean isUpToDate;
    property public abstract java.util.List<com.android.tools.lint.detector.api.Issue> issues;
    property public int minApi;
    field public static final com.android.tools.lint.detector.api.Issue BASELINE;
    field public static final com.android.tools.lint.detector.api.Issue CANCELLED;
    field public static final com.android.tools.lint.client.api.IssueRegistry.Companion Companion;
    field public static final com.android.tools.lint.detector.api.Issue LINT_ERROR;
    field public static final com.android.tools.lint.detector.api.Issue LINT_WARNING;
    field public static final com.android.tools.lint.detector.api.Issue OBSOLETE_LINT_CHECK;
    field public static final com.android.tools.lint.detector.api.Issue PARSER_ERROR;
    field public static final com.android.tools.lint.detector.api.Issue UNKNOWN_ISSUE_ID;
  }

  public static final class IssueRegistry.Companion {
    method public void reset();
  }

  public final class JarFileIssueRegistry extends com.android.tools.lint.client.api.IssueRegistry {
    method public java.util.List<com.android.tools.lint.detector.api.Issue> getIssues();
    method public java.io.File getJarFile();
    property public int api;
    property public boolean isUpToDate;
    property public java.util.List<com.android.tools.lint.detector.api.Issue> issues;
    field public static final com.android.tools.lint.client.api.JarFileIssueRegistry.Factory Factory;
  }

  public static final class JarFileIssueRegistry.Factory {
    method public void clearCache();
    method public java.util.List<com.android.tools.lint.client.api.JarFileIssueRegistry> get(com.android.tools.lint.client.api.LintClient client, java.util.Collection<? extends java.io.File> jarFiles, com.android.tools.lint.detector.api.Project? currentProject);
    method public com.android.tools.lint.client.api.IssueRegistry join(com.android.tools.lint.client.api.IssueRegistry... registries);
  }

  public abstract class JavaEvaluator {
    ctor public JavaEvaluator();
    method public boolean areSignaturesEqual(com.intellij.psi.PsiMethod method1, com.intellij.psi.PsiMethod method2);
    method public java.util.Map<org.jetbrains.uast.UExpression,com.intellij.psi.PsiParameter> computeArgumentMapping(org.jetbrains.uast.UCallExpression call, com.intellij.psi.PsiMethod method);
    method public String? constructMethodDescription(String method, boolean includeName = false, com.intellij.psi.PsiType![] argumentTypes, com.intellij.psi.PsiType? returnType = null, boolean includeReturn = false);
    method public com.intellij.psi.PsiType? erasure(com.intellij.psi.PsiType? type);
    method public abstract boolean extendsClass(com.intellij.psi.PsiClass? cls, String className, boolean strict = false);
    method public com.intellij.psi.PsiAnnotation![] filterRelevantAnnotations(com.intellij.psi.PsiAnnotation![] annotations);
    method public abstract com.intellij.psi.PsiAnnotation? findAnnotation(com.intellij.psi.PsiModifierListOwner? listOwner, java.lang.String... annotationNames);
    method public abstract com.intellij.psi.PsiAnnotation? findAnnotationInHierarchy(com.intellij.psi.PsiModifierListOwner listOwner, java.lang.String... annotationNames);
    method public abstract com.intellij.psi.PsiClass? findClass(String qualifiedName);
    method public abstract String? findJarPath(com.intellij.psi.PsiElement element);
    method public abstract String? findJarPath(org.jetbrains.uast.UElement element);
    method public com.android.tools.lint.model.LintModelLibrary? findOwnerLibrary(String jarFile);
    method public abstract java.util.List<org.jetbrains.uast.UAnnotation> getAllAnnotations(org.jetbrains.uast.UAnnotated owner, boolean inHierarchy);
    method public abstract com.intellij.psi.PsiAnnotation![] getAllAnnotations(com.intellij.psi.PsiModifierListOwner owner, boolean inHierarchy);
    method public abstract com.intellij.psi.PsiClassType? getClassType(com.intellij.psi.PsiClass? psiClass);
    method public abstract com.android.tools.lint.model.LintModelDependencies? getDependencies();
    method @Deprecated public String? getInternalDescription(com.intellij.psi.PsiMethod method, boolean includeName, boolean includeReturn);
    method @Deprecated public String? getInternalName(com.intellij.psi.PsiClass psiClass);
    method @Deprecated public String? getInternalName(com.intellij.psi.PsiClassType psiClassType);
    method public com.android.tools.lint.model.LintModelMavenName? getLibrary(com.intellij.psi.PsiElement element);
    method public com.android.tools.lint.model.LintModelMavenName? getLibrary(org.jetbrains.uast.UElement element);
    method public com.android.tools.lint.model.LintModelMavenName? getLibrary(org.jetbrains.uast.UMethod element);
    method public final com.android.tools.lint.model.LintModelMavenName? getLibrary(java.io.File file);
    method public String? getMethodDescription(com.intellij.psi.PsiMethod method, boolean includeName, boolean includeReturn);
    method public abstract com.intellij.psi.PsiPackage? getPackage(com.intellij.psi.PsiElement node);
    method public abstract com.intellij.psi.PsiPackage? getPackage(org.jetbrains.uast.UElement node);
    method public com.intellij.psi.PsiPackage? getPackage(org.jetbrains.uast.UMethod node);
    method public int getParameterCount(com.intellij.psi.PsiMethod method);
    method public com.android.tools.lint.detector.api.Project? getProject(com.intellij.psi.PsiElement element);
    method public String? getQualifiedName(com.intellij.psi.PsiClass psiClass);
    method public String? getQualifiedName(com.intellij.psi.PsiClassType psiClassType);
    method public com.intellij.psi.PsiMethod? getSuperMethod(com.intellij.psi.PsiMethod? method);
    method public abstract com.intellij.psi.PsiClass? getTypeClass(com.intellij.psi.PsiType? psiType);
    method public boolean hasModifier(com.intellij.psi.PsiModifierListOwner? owner, org.jetbrains.kotlin.lexer.KtModifierKeywordToken keyword);
    method public abstract boolean implementsInterface(com.intellij.psi.PsiClass cls, String interfaceName, boolean strict = false);
    method public boolean inheritsFrom(com.intellij.psi.PsiClass? cls, String className, boolean strict = false);
    method public boolean isAbstract(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isData(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isFinal(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isInfix(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isInherited(com.intellij.psi.PsiAnnotation annotation, com.intellij.psi.PsiModifierListOwner owner);
    method public boolean isInherited(org.jetbrains.uast.UAnnotation annotation, com.intellij.psi.PsiModifierListOwner owner);
    method public boolean isInherited(org.jetbrains.uast.UAnnotation annotation, org.jetbrains.uast.UAnnotated owner);
    method public boolean isInline(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isInternal(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isLateInit(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isMemberInClass(com.intellij.psi.PsiMember? member, String className);
    method public boolean isMemberInSubClassOf(com.intellij.psi.PsiMember member, String className, boolean strict = false);
    method public boolean isOperator(com.intellij.psi.PsiModifierListOwner? owner);
    method public final boolean isOverride(org.jetbrains.uast.UMethod method, boolean includeInterfaces = true);
    method public final boolean isOverride(com.intellij.psi.PsiMethod method, boolean includeInterfaces = true);
    method public boolean isPrivate(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isProtected(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isPublic(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isSealed(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isStatic(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean isSuspend(com.intellij.psi.PsiModifierListOwner? owner);
    method public boolean methodMatches(com.intellij.psi.PsiMethod method, String? className, boolean allowInherit, java.lang.String... argumentTypes);
    method public boolean parameterHasType(com.intellij.psi.PsiMethod? method, int parameterIndex, String typeName);
    method public boolean parametersMatch(com.intellij.psi.PsiMethod method, java.lang.String... argumentTypes);
    method public com.intellij.psi.PsiElement? resolve(com.intellij.psi.PsiElement element);
    method public boolean typeMatches(com.intellij.psi.PsiType? type, String typeName);
    property public abstract com.android.tools.lint.model.LintModelDependencies? dependencies;
    field public static final com.android.tools.lint.client.api.JavaEvaluator.Companion Companion;
  }

  public static final class JavaEvaluator.Companion {
    method public String? getPrimitiveSignature(String typeName);
  }

  public final class JavaEvaluatorKt {
    field public static final String TYPE_BOOLEAN = "boolean";
    field public static final String TYPE_BOOLEAN_WRAPPER = "java.lang.Boolean";
    field public static final String TYPE_BYTE = "byte";
    field public static final String TYPE_BYTE_WRAPPER = "java.lang.Byte";
    field public static final String TYPE_CHAR = "char";
    field public static final String TYPE_CHARACTER_WRAPPER = "java.lang.Character";
    field public static final String TYPE_DOUBLE = "double";
    field public static final String TYPE_DOUBLE_WRAPPER = "java.lang.Double";
    field public static final String TYPE_FLOAT = "float";
    field public static final String TYPE_FLOAT_WRAPPER = "java.lang.Float";
    field public static final String TYPE_INT = "int";
    field public static final String TYPE_INTEGER_WRAPPER = "java.lang.Integer";
    field public static final String TYPE_LONG = "long";
    field public static final String TYPE_LONG_WRAPPER = "java.lang.Long";
    field public static final String TYPE_NULL = "null";
    field public static final String TYPE_OBJECT = "java.lang.Object";
    field public static final String TYPE_SHORT = "short";
    field public static final String TYPE_SHORT_WRAPPER = "java.lang.Short";
    field public static final String TYPE_STRING = "java.lang.String";
  }

  @Deprecated @com.google.common.annotations.Beta public abstract class JavaParser {
    ctor @Deprecated public JavaParser();
    field @Deprecated public static final String TYPE_BOOLEAN = "boolean";
    field @Deprecated public static final String TYPE_BOOLEAN_WRAPPER = "java.lang.Boolean";
    field @Deprecated public static final String TYPE_BYTE = "byte";
    field @Deprecated public static final String TYPE_BYTE_WRAPPER = "java.lang.Byte";
    field @Deprecated public static final String TYPE_CHAR = "char";
    field @Deprecated public static final String TYPE_CHARACTER_WRAPPER = "java.lang.Character";
    field @Deprecated public static final String TYPE_DOUBLE = "double";
    field @Deprecated public static final String TYPE_DOUBLE_WRAPPER = "java.lang.Double";
    field @Deprecated public static final String TYPE_FLOAT = "float";
    field @Deprecated public static final String TYPE_FLOAT_WRAPPER = "java.lang.Float";
    field @Deprecated public static final String TYPE_INT = "int";
    field @Deprecated public static final String TYPE_INTEGER_WRAPPER = "java.lang.Integer";
    field @Deprecated public static final String TYPE_LONG = "long";
    field @Deprecated public static final String TYPE_LONG_WRAPPER = "java.lang.Long";
    field @Deprecated public static final String TYPE_NULL = "null";
    field @Deprecated public static final String TYPE_OBJECT = "java.lang.Object";
    field @Deprecated public static final String TYPE_SHORT = "short";
    field @Deprecated public static final String TYPE_SHORT_WRAPPER = "java.lang.Short";
    field @Deprecated public static final String TYPE_STRING = "java.lang.String";
  }

  public final class LintBaseline {
    ctor public LintBaseline(com.android.tools.lint.client.api.LintClient? client, java.io.File file);
    method public void close();
    method public boolean findAndMark(com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Location location, String message, com.android.tools.lint.detector.api.Severity? severity, com.android.tools.lint.detector.api.Project? project);
    method public String? getAttribute(String name);
    method public java.io.File getFile();
    method public int getFixedCount();
    method public int getFoundErrorCount();
    method public int getFoundWarningCount();
    method public boolean getRemoveFixed();
    method public int getTotalCount();
    method public boolean getWriteOnClose();
    method public void setAttribute(String name, String value);
    method public void setRemoveFixed(boolean p);
    method public void setWriteOnClose(boolean writeOnClose);
    property public final int fixedCount;
    property public final int foundErrorCount;
    property public final int foundWarningCount;
    property public final boolean removeFixed;
    property public final int totalCount;
    property public final boolean writeOnClose;
    field public static final com.android.tools.lint.client.api.LintBaseline.Companion Companion;
    field public static final String VARIANT_ALL = "all";
    field public static final String VARIANT_FATAL = "fatal";
  }

  public static final class LintBaseline.Companion {
    method public String describeBaselineFilter(int errors, int warnings, String baselineDisplayPath);
    method public boolean isFilteredMessage(String errorMessage, com.android.tools.lint.detector.api.TextFormat format);
    method public boolean isFixedMessage(String errorMessage, com.android.tools.lint.detector.api.TextFormat format);
    method public boolean isSamePathSuffix(String path, String suffix);
    method public boolean stringsEquivalent(String s1, String s2, int start1 = 0, int start2 = 0);
  }

  @com.google.common.annotations.Beta public abstract class LintClient {
    ctor protected LintClient(String clientName);
    ctor protected LintClient();
    method public com.android.tools.lint.client.api.IssueRegistry addCustomLintRules(com.android.tools.lint.client.api.IssueRegistry registry);
    method public boolean checkForSuppressComments();
    method public void closeConnection(java.net.URLConnection connection);
    method protected com.android.tools.lint.detector.api.Project createProject(java.io.File dir, java.io.File referenceDir);
    method public com.android.tools.lint.detector.api.Location.Handle createResourceItemHandle(com.android.ide.common.resources.ResourceItem item);
    method public java.util.Map<java.lang.String,java.lang.String> createSuperClassMap(com.android.tools.lint.detector.api.Project project);
    method public ClassLoader createUrlClassLoader(java.net.URL![] urls, ClassLoader parent);
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public org.xmlpull.v1.XmlPullParser? createXmlPullParser(com.android.ide.common.util.PathString resourcePath) throws java.io.IOException;
    method protected void disposeProjects(java.util.Collection<? extends com.android.tools.lint.detector.api.Project> knownProjects);
    method public java.util.List<java.io.File> findGlobalRuleJars();
    method public com.android.tools.lint.detector.api.Location? findManifestSourceLocation(org.w3c.dom.Node mergedNode);
    method public com.android.utils.Pair<java.io.File,? extends org.w3c.dom.Node>? findManifestSourceNode(org.w3c.dom.Node mergedNode);
    method public java.io.File? findResource(String relativePath);
    method public Iterable<java.io.File> findRuleJars(com.android.tools.lint.detector.api.Project project);
    method public java.util.List<java.io.File> getAssetFolders(com.android.tools.lint.detector.api.Project project);
    method public com.android.repository.Revision? getBuildToolsRevision(com.android.tools.lint.detector.api.Project project);
    method public java.io.File? getCacheDir(String? name, boolean create);
    method protected com.android.tools.lint.client.api.LintClient.ClassPathInfo getClassPath(com.android.tools.lint.detector.api.Project project);
    method public String? getClientDisplayRevision();
    method public static final String getClientName();
    method public String? getClientRevision();
    method public com.android.sdklib.IAndroidTarget? getCompileTarget(com.android.tools.lint.detector.api.Project project);
    method public com.android.tools.lint.client.api.Configuration getConfiguration(com.android.tools.lint.detector.api.Project project, com.android.tools.lint.client.api.LintDriver? driver);
    method public com.android.tools.lint.client.api.Configuration? getConfiguration(java.io.File file);
    method public com.android.tools.lint.client.api.ConfigurationHierarchy getConfigurations();
    method public java.util.Set<com.android.tools.lint.detector.api.Desugaring> getDesugaring(com.android.tools.lint.detector.api.Project project);
    method protected final java.util.Map<java.io.File,com.android.tools.lint.detector.api.Project> getDirToProject();
    method public String getDisplayPath(java.io.File file, com.android.tools.lint.detector.api.Project? project = null, com.android.tools.lint.detector.api.TextFormat format = com.android.tools.lint.detector.api.TextFormat.RAW);
    method public java.util.List<java.io.File> getExternalAnnotations(java.util.Collection<? extends com.android.tools.lint.detector.api.Project> projects);
    method public java.util.List<java.io.File> getGeneratedResourceFolders(com.android.tools.lint.detector.api.Project project);
    method public java.util.List<java.io.File> getGeneratedSourceFolders(com.android.tools.lint.detector.api.Project project);
    method public static final java.util.Set<com.android.tools.lint.detector.api.Desugaring> getGradleDesugaring(com.android.ide.common.repository.GradleVersion version, com.intellij.pom.java.LanguageLevel? languageLevel, boolean coreLibraryDesugaringEnabled);
    method public abstract com.android.tools.lint.client.api.GradleVisitor getGradleVisitor();
    method public final int getHighestKnownApiLevel();
    method public com.android.ide.common.repository.GradleVersion? getHighestKnownVersion(com.android.ide.common.repository.GradleCoordinate coordinate, java.util.function.Predicate<com.android.ide.common.repository.GradleVersion>? filter);
    method public java.util.List<java.io.File> getJavaClassFolders(com.android.tools.lint.detector.api.Project project);
    method public com.intellij.pom.java.LanguageLevel getJavaLanguageLevel(com.android.tools.lint.detector.api.Project project);
    method public java.util.List<java.io.File> getJavaLibraries(com.android.tools.lint.detector.api.Project project, boolean includeProvided);
    method public java.util.List<java.io.File> getJavaSourceFolders(com.android.tools.lint.detector.api.Project project);
    method public java.io.File? getJdkHome(com.android.tools.lint.detector.api.Project? project = null);
    method public final java.util.Collection<com.android.tools.lint.detector.api.Project> getKnownProjects();
    method public org.jetbrains.kotlin.config.LanguageVersionSettings getKotlinLanguageLevel(com.android.tools.lint.detector.api.Project project);
    method public org.w3c.dom.Document? getMergedManifest(com.android.tools.lint.detector.api.Project project);
    method public com.android.tools.lint.client.api.Configuration? getParentConfiguration(com.android.tools.lint.client.api.Configuration configuration);
    method public com.android.tools.lint.detector.api.Project getProject(java.io.File dir, java.io.File referenceDir);
    method protected final java.util.Set<java.io.File> getProjectDirs();
    method public String getProjectName(com.android.tools.lint.detector.api.Project project);
    method public String? getRelativePath(java.io.File? baseFile, java.io.File? file);
    method protected final java.util.Map<java.lang.Object,com.android.tools.lint.client.api.BlameFile> getReportFileCache();
    method public com.android.repository.api.ProgressIndicator getRepositoryLogger();
    method public java.util.List<java.io.File> getResourceFolders(com.android.tools.lint.detector.api.Project project);
    method public com.android.ide.common.resources.ResourceRepository? getResourceRepository(com.android.tools.lint.detector.api.Project project, boolean includeModuleDependencies, boolean includeLibraries);
    method public com.android.ide.common.repository.ResourceVisibilityLookup.Provider getResourceVisibilityProvider();
    method public com.android.sdklib.repository.AndroidSdkHandler? getSdk();
    method public java.io.File? getSdkHome();
    method public com.android.tools.lint.client.api.SdkInfo getSdkInfo(com.android.tools.lint.detector.api.Project project);
    method protected final java.util.Map<org.w3c.dom.Node,com.android.utils.Pair<java.io.File,? extends org.w3c.dom.Node>> getSourceNodeCache();
    method public String? getSuperClass(com.android.tools.lint.detector.api.Project project, String name);
    method public com.android.sdklib.IAndroidTarget![] getTargets();
    method public java.util.List<java.io.File> getTestLibraries(com.android.tools.lint.detector.api.Project project);
    method public java.util.List<java.io.File> getTestSourceFolders(com.android.tools.lint.detector.api.Project project);
    method public abstract com.android.tools.lint.client.api.UastParser getUastParser(com.android.tools.lint.detector.api.Project? project);
    method public abstract com.android.tools.lint.client.api.XmlParser getXmlParser();
    method protected void initializeProjects(java.util.Collection<? extends com.android.tools.lint.detector.api.Project> knownProjects);
    method public static final boolean isGradle();
    method public boolean isGradleProject(com.android.tools.lint.detector.api.Project project);
    method public final boolean isMergeManifestNode(org.w3c.dom.Node node);
    method public boolean isProjectDirectory(java.io.File dir);
    method public static final boolean isStudio();
    method public Boolean? isSubclassOf(com.android.tools.lint.detector.api.Project project, String name, String superClassName);
    method public static final boolean isUnitTest();
    method public void log(Throwable? exception, String? format, java.lang.Object... args);
    method public abstract void log(com.android.tools.lint.detector.api.Severity severity, Throwable? exception, String? format, java.lang.Object... args);
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public java.net.URLConnection? openConnection(java.net.URL url) throws java.io.IOException;
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public java.net.URLConnection? openConnection(java.net.URL url, int timeout) throws java.io.IOException;
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public byte[] readBytes(java.io.File file) throws java.io.IOException;
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public byte[] readBytes(com.android.ide.common.util.PathString resourcePath) throws java.io.IOException;
    method public abstract CharSequence readFile(java.io.File file);
    method public void registerProject(java.io.File dir, com.android.tools.lint.detector.api.Project project);
    method public Class<? extends com.android.tools.lint.detector.api.Detector> replaceDetector(Class<? extends com.android.tools.lint.detector.api.Detector> detectorClass);
    method public abstract void report(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Severity severity, com.android.tools.lint.detector.api.Location location, String message, com.android.tools.lint.detector.api.TextFormat format, com.android.tools.lint.detector.api.LintFix? fix);
    method public void resolveMergeManifestSources(org.w3c.dom.Document mergedManifest, Object reportFile);
    method public void runReadAction(Runnable runnable);
    method public <T> T! runReadAction(com.intellij.openapi.util.Computable<T> computable);
    method public static final void setClientName(String p);
    method public boolean supportsProjectResources();
    property public com.android.tools.lint.client.api.ConfigurationHierarchy configurations;
    property protected final java.util.Map<java.io.File,com.android.tools.lint.detector.api.Project> dirToProject;
    property public final int highestKnownApiLevel;
    property public final java.util.Collection<com.android.tools.lint.detector.api.Project> knownProjects;
    property protected final java.util.Set<java.io.File> projectDirs;
    property protected final java.util.Map<java.lang.Object,com.android.tools.lint.client.api.BlameFile> reportFileCache;
    property protected final java.util.Map<org.w3c.dom.Node,com.android.utils.Pair<java.io.File,? extends org.w3c.dom.Node>> sourceNodeCache;
    property public abstract com.android.tools.lint.client.api.XmlParser xmlParser;
    field public static final String CLIENT_CLI = "cli";
    field public static final String CLIENT_GRADLE = "gradle";
    field public static final String CLIENT_STUDIO = "studio";
    field public static final String CLIENT_UNIT_TESTS = "test";
    field public static final String CLIENT_UNKNOWN = "unknown";
    field public static final com.android.tools.lint.client.api.LintClient.Companion Companion;
    field protected static final com.android.utils.Pair<java.io.File,org.w3c.dom.Node> NOT_FOUND;
    field public static String clientName;
  }

  public static final class LintClient.ClassPathInfo {
    ctor public LintClient.ClassPathInfo(java.util.List<? extends java.io.File> sourceFolders, java.util.List<? extends java.io.File> classFolders, java.util.List<? extends java.io.File> libraries, java.util.List<? extends java.io.File> nonProvidedLibraries, java.util.List<? extends java.io.File> testSourceFolders, java.util.List<? extends java.io.File> testLibraries, java.util.List<? extends java.io.File> generatedFolders);
    method public java.util.List<java.io.File> getClassFolders();
    method public java.util.List<java.io.File> getGeneratedFolders();
    method public java.util.List<java.io.File> getLibraries(boolean includeProvided);
    method public java.util.List<java.io.File> getSourceFolders();
    method public java.util.List<java.io.File> getTestLibraries();
    method public java.util.List<java.io.File> getTestSourceFolders();
  }

  public static final class LintClient.Companion {
    method public void ensureClientNameInitialized();
    method public String getClientName();
    method public java.util.Set<com.android.tools.lint.detector.api.Desugaring> getGradleDesugaring(com.android.ide.common.repository.GradleVersion version, com.intellij.pom.java.LanguageLevel? languageLevel, boolean coreLibraryDesugaringEnabled);
    method public boolean isClientNameInitialized();
    method public boolean isGradle();
    method public boolean isStudio();
    method public boolean isUnitTest();
    method public void report(com.android.tools.lint.client.api.LintClient client, com.android.tools.lint.detector.api.Issue issue, String message, java.io.File? file = null, com.android.tools.lint.detector.api.TextFormat format = com.android.tools.lint.detector.api.TextFormat.RAW, com.android.tools.lint.detector.api.LintFix? fix = null, com.android.tools.lint.client.api.Configuration? configuration = null, com.android.tools.lint.detector.api.Severity? severity = null, com.android.tools.lint.detector.api.Context? context = null, com.android.tools.lint.detector.api.Project? project = null, com.android.tools.lint.detector.api.Project? mainProject = null, com.android.tools.lint.client.api.LintDriver? driver = null, com.android.tools.lint.detector.api.Location? location = null);
    method public void report(com.android.tools.lint.client.api.LintClient client, com.android.tools.lint.detector.api.Issue issue, String message, java.io.File file, com.android.tools.lint.detector.api.Project? project);
    method public void report(com.android.tools.lint.client.api.LintClient client, com.android.tools.lint.detector.api.Issue issue, String message, com.android.tools.lint.client.api.LintDriver driver, com.android.tools.lint.detector.api.Project project, com.android.tools.lint.detector.api.Location? location, com.android.tools.lint.detector.api.LintFix? fix);
    method public void resetClientName();
    method public void setClientName(String p);
    property public final String clientName;
    property public final boolean isGradle;
    property public final boolean isStudio;
    property public final boolean isUnitTest;
  }

  @com.google.common.annotations.Beta public final class LintDriver {
    ctor public LintDriver(com.android.tools.lint.client.api.IssueRegistry registry, com.android.tools.lint.client.api.LintClient client, com.android.tools.lint.client.api.LintRequest request);
    method public void addLintListener(com.android.tools.lint.client.api.LintListener listener);
    method public void analyze();
    method public void cancel();
    method @com.google.common.annotations.VisibleForTesting public static void clearCrashCount();
    method public org.objectweb.asm.tree.ClassNode? findClass(com.android.tools.lint.detector.api.ClassContext context, String type, int flags);
    method public com.android.tools.lint.detector.api.Project? findProjectFor(java.io.File file);
    method public boolean getAllowSuppress();
    method public long getAnalysisStartTime();
    method public com.android.tools.lint.client.api.LintBaseline? getBaseline();
    method public boolean getCheckDependencies();
    method public boolean getCheckGeneratedSources();
    method public long getCheckProjectTimeMs();
    method public boolean getCheckTestSources();
    method public com.android.tools.lint.client.api.LintClient getClient();
    method public long getComputeDetectorsTimeMs();
    method @com.google.common.annotations.VisibleForTesting public static int getCrashCount();
    method public long getDisposeProjectsTimeMs();
    method public long getExtraPhasesTimeMs();
    method public boolean getFatalOnlyMode();
    method public int getFileCount();
    method public boolean getIgnoreTestSources();
    method public long getInitializeTimeMs();
    method public int getJavaFileCount();
    method public int getKotlinFileCount();
    method public int getModuleCount();
    method public org.objectweb.asm.tree.ClassNode? getOuterClassNode(org.objectweb.asm.tree.ClassNode classNode);
    method public int getPhase();
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Platform> getPlatforms();
    method public java.util.Collection<com.android.tools.lint.detector.api.Project> getProjectRoots();
    method public java.util.List<com.android.tools.lint.detector.api.Project> getProjects();
    method public long getRegisterCustomDetectorsTimeMs();
    method public com.android.tools.lint.client.api.IssueRegistry getRegistry();
    method public long getReportBaselineIssuesTimeMs();
    method public long getReportGenerationTimeMs();
    method public com.android.tools.lint.client.api.LintRequest getRequest();
    method public int getResourceFileCount();
    method public int getResourceFolderVersion(java.io.File resourceFile);
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Scope> getScope();
    method public String? getSuperClass(String name);
    method public int getTestSourceCount();
    method public static boolean handleDetectorError(com.android.tools.lint.detector.api.Context? context, com.android.tools.lint.client.api.LintDriver driver, Throwable throwable);
    method public boolean hasParserErrors();
    method public boolean isAbbreviating();
    method public static boolean isAnnotatedWithSuppress(com.android.tools.lint.detector.api.JavaContext? context, com.android.tools.lint.detector.api.Issue issue, com.intellij.psi.PsiModifierListOwner? modifierListOwner);
    method public boolean isSubclassOf(org.objectweb.asm.tree.ClassNode classNode, String superClassName);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.Issue? issue, org.objectweb.asm.tree.ClassNode classNode, org.objectweb.asm.tree.MethodNode method, org.objectweb.asm.tree.AbstractInsnNode? instruction);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.Issue? issue, org.objectweb.asm.tree.FieldNode field);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.Issue? issue, org.objectweb.asm.tree.ClassNode classNode);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.JavaContext? context, com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UElement? scope);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.JavaContext? context, com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UCatchClause clause);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.JavaContext? context, com.android.tools.lint.detector.api.Issue issue, com.intellij.psi.PsiElement? scope);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.JavaContext? context, com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UAnnotated? scope);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.XmlContext? context, com.android.tools.lint.detector.api.Issue issue, org.w3c.dom.Node? node);
    method public static boolean isSuppressed(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UAnnotated annotated);
    method public static boolean isSuppressed(com.android.tools.lint.detector.api.Issue issue, com.intellij.psi.PsiAnnotationMemberValue? value);
    method public void removeLintListener(com.android.tools.lint.client.api.LintListener listener);
    method public void requestRepeat(com.android.tools.lint.detector.api.Detector detector, java.util.EnumSet<com.android.tools.lint.detector.api.Scope>? scope);
    method public void runLaterOutsideReadAction(Runnable runnable);
    method public void setAbbreviating(boolean p);
    method public void setAllowSuppress(boolean p);
    method public void setAnalysisStartTime(long p);
    method public void setBaseline(com.android.tools.lint.client.api.LintBaseline? p);
    method public void setCheckDependencies(boolean p);
    method public void setCheckGeneratedSources(boolean p);
    method public void setCheckProjectTimeMs(long p);
    method public void setCheckTestSources(boolean p);
    method public void setComputeDetectorsTimeMs(long p);
    method public void setDisposeProjectsTimeMs(long p);
    method public void setExtraPhasesTimeMs(long p);
    method public void setFatalOnlyMode(boolean p);
    method public void setFileCount(int p);
    method public void setHasParserErrors(boolean hasErrors);
    method public void setIgnoreTestSources(boolean p);
    method public void setInitializeTimeMs(long p);
    method public void setJavaFileCount(int p);
    method public void setKotlinFileCount(int p);
    method public void setModuleCount(int p);
    method public void setPlatforms(java.util.EnumSet<com.android.tools.lint.detector.api.Platform> p);
    method public void setRegisterCustomDetectorsTimeMs(long p);
    method public void setRegistry(com.android.tools.lint.client.api.IssueRegistry p);
    method public void setReportBaselineIssuesTimeMs(long p);
    method public void setReportGenerationTimeMs(long p);
    method public void setResourceFileCount(int p);
    method public void setScope(java.util.EnumSet<com.android.tools.lint.detector.api.Scope> p);
    method public void setTestSourceCount(int p);
    property public final boolean allowSuppress;
    property public final long analysisStartTime;
    property public final com.android.tools.lint.client.api.LintBaseline? baseline;
    property public final boolean checkDependencies;
    property public final boolean checkGeneratedSources;
    property public final long checkProjectTimeMs;
    property public final boolean checkTestSources;
    property public final com.android.tools.lint.client.api.LintClient client;
    property public final long computeDetectorsTimeMs;
    property public final long disposeProjectsTimeMs;
    property public final long extraPhasesTimeMs;
    property public final boolean fatalOnlyMode;
    property public final int fileCount;
    property public final boolean ignoreTestSources;
    property public final long initializeTimeMs;
    property public final boolean isAbbreviating;
    property public final int javaFileCount;
    property public final int kotlinFileCount;
    property public final int moduleCount;
    property public final int phase;
    property public final java.util.EnumSet<com.android.tools.lint.detector.api.Platform> platforms;
    property public final java.util.Collection<com.android.tools.lint.detector.api.Project> projectRoots;
    property public final java.util.List<com.android.tools.lint.detector.api.Project> projects;
    property public final long registerCustomDetectorsTimeMs;
    property public final long reportBaselineIssuesTimeMs;
    property public final long reportGenerationTimeMs;
    property public final int resourceFileCount;
    property public final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scope;
    property public final int testSourceCount;
    field public static final com.android.tools.lint.client.api.LintDriver.Companion Companion;
    field public static final String STUDIO_ID_PREFIX = "AndroidLint";
  }

  public static final class LintDriver.Companion {
    method public void appendStackTraceSummary(Throwable throwable, StringBuilder sb);
    method @com.google.common.annotations.VisibleForTesting public void clearCrashCount();
    method @com.google.common.annotations.VisibleForTesting public int getCrashCount();
    method public boolean handleDetectorError(com.android.tools.lint.detector.api.Context? context, com.android.tools.lint.client.api.LintDriver driver, Throwable throwable);
    method public boolean isAnnotatedWithSuppress(com.android.tools.lint.detector.api.JavaContext? context, com.android.tools.lint.detector.api.Issue issue, com.intellij.psi.PsiModifierListOwner? modifierListOwner);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UAnnotated annotated);
    method public boolean isSuppressed(com.android.tools.lint.detector.api.Issue issue, com.intellij.psi.PsiAnnotationMemberValue? value);
    property @com.google.common.annotations.VisibleForTesting public final int crashCount;
  }

  @com.google.common.annotations.Beta public interface LintListener {
    method public void update(com.android.tools.lint.client.api.LintDriver driver, com.android.tools.lint.client.api.LintListener.EventType type, com.android.tools.lint.detector.api.Project? project = null, com.android.tools.lint.detector.api.Context? context = null);
  }

  public enum LintListener.EventType {
    method public static com.android.tools.lint.client.api.LintListener.EventType valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static com.android.tools.lint.client.api.LintListener.EventType[] values();
    enum_constant public static final com.android.tools.lint.client.api.LintListener.EventType CANCELED;
    enum_constant public static final com.android.tools.lint.client.api.LintListener.EventType COMPLETED;
    enum_constant public static final com.android.tools.lint.client.api.LintListener.EventType NEW_PHASE;
    enum_constant public static final com.android.tools.lint.client.api.LintListener.EventType REGISTERED_PROJECT;
    enum_constant public static final com.android.tools.lint.client.api.LintListener.EventType SCANNING_FILE;
    enum_constant public static final com.android.tools.lint.client.api.LintListener.EventType SCANNING_LIBRARY_PROJECT;
    enum_constant public static final com.android.tools.lint.client.api.LintListener.EventType SCANNING_PROJECT;
    enum_constant public static final com.android.tools.lint.client.api.LintListener.EventType STARTING;
  }

  public class LintOptionsConfiguration extends com.android.tools.lint.client.api.FlagConfiguration {
    ctor public LintOptionsConfiguration(com.android.tools.lint.client.api.LintClient client, java.io.File lintFile, java.io.File dir, com.android.tools.lint.model.LintModelLintOptions lintOptions, boolean fatalOnly);
  }

  @com.google.common.annotations.Beta public class LintRequest {
    ctor public LintRequest(com.android.tools.lint.client.api.LintClient client, java.util.List<? extends java.io.File> files);
    method public final com.android.tools.lint.client.api.LintClient getClient();
    method public final java.util.List<java.io.File> getFiles();
    method public com.android.tools.lint.detector.api.Project getMainProject(com.android.tools.lint.detector.api.Project project);
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Platform>? getPlatform();
    method public java.util.Collection<com.android.tools.lint.detector.api.Project>? getProjects();
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Scope>? getScope();
    method public final Boolean? isReleaseMode();
    method public final com.android.tools.lint.client.api.LintRequest setPlatform(java.util.EnumSet<com.android.tools.lint.detector.api.Platform>? platform);
    method public final com.android.tools.lint.client.api.LintRequest setProjects(java.util.Collection<? extends com.android.tools.lint.detector.api.Project>? projects);
    method public final com.android.tools.lint.client.api.LintRequest setReleaseMode(Boolean? releaseMode);
    method public final com.android.tools.lint.client.api.LintRequest setScope(java.util.EnumSet<com.android.tools.lint.detector.api.Scope>? scope);
    field protected java.util.EnumSet<com.android.tools.lint.detector.api.Platform>? platform;
    field protected java.util.Collection<? extends com.android.tools.lint.detector.api.Project>? projects;
    field protected Boolean? releaseMode;
    field protected java.util.EnumSet<com.android.tools.lint.detector.api.Scope>? scope;
  }

  @com.google.common.annotations.Beta public class LintXmlConfiguration extends com.android.tools.lint.client.api.Configuration {
    ctor protected LintXmlConfiguration(com.android.tools.lint.client.api.LintClient client, java.io.File configFile, java.io.File dir, boolean projectLevel);
    ctor protected LintXmlConfiguration(com.android.tools.lint.client.api.LintClient client, com.android.tools.lint.detector.api.Project project);
    method public static final com.android.tools.lint.client.api.LintXmlConfiguration create(com.android.tools.lint.client.api.LintClient client, java.io.File lintFile);
    method public final Boolean? getAbortOnError();
    method public final Boolean? getApplySuggestions();
    method public java.io.File? getBaselineFile();
    method public final Boolean? getCheckAllWarnings();
    method public final Boolean? getCheckDependencies();
    method public final Boolean? getCheckGeneratedSources();
    method public final Boolean? getCheckTestSources();
    method public final com.android.tools.lint.client.api.LintClient getClient();
    method public final java.io.File getConfigFile();
    method protected com.android.tools.lint.detector.api.Severity getDefaultSeverity(com.android.tools.lint.detector.api.Issue issue);
    method public java.io.File getDir();
    method public final Boolean? getExplainIssues();
    method public final Boolean? getFatalOnly();
    method public final Boolean? getIgnoreTestSources();
    method public final Boolean? getIgnoreWarnings();
    method public String? getOption(com.android.tools.lint.detector.api.Issue issue, String name, String? p);
    method public java.io.File? getOptionAsFile(com.android.tools.lint.detector.api.Issue issue, String name, java.io.File? p);
    method public final Boolean? getRemoveFixedBaselineIssues();
    method public final Boolean? getWarningsAsErrors();
    method public void ignore(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Location? location, String message);
    method public void ignore(com.android.tools.lint.detector.api.Issue issue, java.io.File file);
    method public void ignore(String issueId, java.io.File file);
    method public void setBaselineFile(java.io.File? value);
    method public final void setBooleanOption(com.android.tools.lint.detector.api.Issue issue, String name, Boolean? value);
    method public final void setFileOption(com.android.tools.lint.detector.api.Issue issue, String name, java.io.File? value);
    method public final void setIntOption(com.android.tools.lint.detector.api.Issue issue, String name, Integer? value);
    method public final void setOption(com.android.tools.lint.detector.api.Issue issue, String name, String? value);
    method public void setSeverity(com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Severity? severity);
    property public java.io.File? baselineFile;
    field public static final String CONFIG_FILE_NAME = "lint.xml";
    field public static final com.android.tools.lint.client.api.LintXmlConfiguration.Companion Companion;
    field public static final String TAG_LINT = "lint";
    field public static final String VALUE_ALL = "all";
  }

  public static final class LintXmlConfiguration.Companion {
    method public com.android.tools.lint.client.api.LintXmlConfiguration create(com.android.tools.lint.client.api.LintClient client, java.io.File lintFile);
    method public String getUnknownIssueIdErrorMessage(String id, com.android.tools.lint.client.api.IssueRegistry issueRegistry);
  }

  public static final class LintXmlConfiguration.IssueData {
    ctor public LintXmlConfiguration.IssueData(com.android.tools.lint.detector.api.Severity? severity, java.util.List<java.lang.String>? paths, java.util.List<java.util.regex.Pattern>? patterns, java.util.Map<java.lang.String,java.lang.String>? options);
    ctor public LintXmlConfiguration.IssueData();
    method public com.android.tools.lint.detector.api.Severity? component1();
    method public java.util.List<java.lang.String>? component2();
    method public java.util.List<java.util.regex.Pattern>? component3();
    method public java.util.Map<java.lang.String,java.lang.String>? component4();
    method public com.android.tools.lint.client.api.LintXmlConfiguration.IssueData copy(com.android.tools.lint.detector.api.Severity? severity, java.util.List<java.lang.String>? paths, java.util.List<java.util.regex.Pattern>? patterns, java.util.Map<java.lang.String,java.lang.String>? options);
    method public java.util.Map<java.lang.String,java.lang.String>? getOptions();
    method public java.util.List<java.lang.String>? getPaths();
    method public java.util.List<java.util.regex.Pattern>? getPatterns();
    method public com.android.tools.lint.detector.api.Severity? getSeverity();
    method public boolean isEmpty();
    method public void setOptions(java.util.Map<java.lang.String,java.lang.String>? p);
    method public void setPaths(java.util.List<java.lang.String>? p);
    method public void setPatterns(java.util.List<java.util.regex.Pattern>? p);
    method public void setSeverity(com.android.tools.lint.detector.api.Severity? p);
  }

  public final class ResourceReference {
    ctor public ResourceReference(org.jetbrains.uast.UExpression node, String p, com.android.resources.ResourceType type, String name, boolean heuristic);
    method public static com.android.tools.lint.client.api.ResourceReference? get(org.jetbrains.uast.UElement element);
    method public boolean getHeuristic();
    method public String getName();
    method public org.jetbrains.uast.UExpression getNode();
    method public String getPackage();
    method public com.android.resources.ResourceType getType();
    field public static final com.android.tools.lint.client.api.ResourceReference.Companion Companion;
  }

  public static final class ResourceReference.Companion {
    method public com.android.tools.lint.client.api.ResourceReference? get(org.jetbrains.uast.UElement element);
  }

  @com.google.common.annotations.Beta public abstract class SdkInfo {
    ctor public SdkInfo();
    method public abstract String? getParentViewClass(String fqcn);
    method public abstract String? getParentViewName(String name);
    method public boolean isLayout(String tag);
    method public boolean isSubViewOf(String parentViewFqcn, String childViewFqcn);
  }

  public class UElementHandler {
    ctor public UElementHandler();
    method public void visitAnnotation(org.jetbrains.uast.UAnnotation node);
    method public void visitArrayAccessExpression(org.jetbrains.uast.UArrayAccessExpression node);
    method public void visitBinaryExpression(org.jetbrains.uast.UBinaryExpression node);
    method public void visitBinaryExpressionWithType(org.jetbrains.uast.UBinaryExpressionWithType node);
    method public void visitBlockExpression(org.jetbrains.uast.UBlockExpression node);
    method public void visitBreakExpression(org.jetbrains.uast.UBreakExpression node);
    method public void visitCallExpression(org.jetbrains.uast.UCallExpression node);
    method public void visitCallableReferenceExpression(org.jetbrains.uast.UCallableReferenceExpression node);
    method public void visitCatchClause(org.jetbrains.uast.UCatchClause node);
    method public void visitClass(org.jetbrains.uast.UClass node);
    method public void visitClassLiteralExpression(org.jetbrains.uast.UClassLiteralExpression node);
    method public void visitContinueExpression(org.jetbrains.uast.UContinueExpression node);
    method public void visitDeclaration(org.jetbrains.uast.UDeclaration node);
    method public void visitDeclarationsExpression(org.jetbrains.uast.UDeclarationsExpression node);
    method public void visitDoWhileExpression(org.jetbrains.uast.UDoWhileExpression node);
    method public void visitElement(org.jetbrains.uast.UElement node);
    method public void visitEnumConstant(org.jetbrains.uast.UEnumConstant node);
    method public void visitExpression(org.jetbrains.uast.UExpression node);
    method public void visitExpressionList(org.jetbrains.uast.UExpressionList node);
    method public void visitField(org.jetbrains.uast.UField node);
    method public void visitFile(org.jetbrains.uast.UFile node);
    method public void visitForEachExpression(org.jetbrains.uast.UForEachExpression node);
    method public void visitForExpression(org.jetbrains.uast.UForExpression node);
    method public void visitIfExpression(org.jetbrains.uast.UIfExpression node);
    method public void visitImportStatement(org.jetbrains.uast.UImportStatement node);
    method public void visitInitializer(org.jetbrains.uast.UClassInitializer node);
    method public void visitLabeledExpression(org.jetbrains.uast.ULabeledExpression node);
    method public void visitLambdaExpression(org.jetbrains.uast.ULambdaExpression node);
    method public void visitLiteralExpression(org.jetbrains.uast.ULiteralExpression node);
    method public void visitLocalVariable(org.jetbrains.uast.ULocalVariable node);
    method public void visitMethod(org.jetbrains.uast.UMethod node);
    method public void visitObjectLiteralExpression(org.jetbrains.uast.UObjectLiteralExpression node);
    method public void visitParameter(org.jetbrains.uast.UParameter node);
    method public void visitParenthesizedExpression(org.jetbrains.uast.UParenthesizedExpression node);
    method public void visitPolyadicExpression(org.jetbrains.uast.UPolyadicExpression node);
    method public void visitPostfixExpression(org.jetbrains.uast.UPostfixExpression node);
    method public void visitPrefixExpression(org.jetbrains.uast.UPrefixExpression node);
    method public void visitQualifiedReferenceExpression(org.jetbrains.uast.UQualifiedReferenceExpression node);
    method public void visitReturnExpression(org.jetbrains.uast.UReturnExpression node);
    method public void visitSimpleNameReferenceExpression(org.jetbrains.uast.USimpleNameReferenceExpression node);
    method public void visitSuperExpression(org.jetbrains.uast.USuperExpression node);
    method public void visitSwitchClauseExpression(org.jetbrains.uast.USwitchClauseExpression node);
    method public void visitSwitchExpression(org.jetbrains.uast.USwitchExpression node);
    method public void visitThisExpression(org.jetbrains.uast.UThisExpression node);
    method public void visitThrowExpression(org.jetbrains.uast.UThrowExpression node);
    method public void visitTryExpression(org.jetbrains.uast.UTryExpression node);
    method public void visitTypeReferenceExpression(org.jetbrains.uast.UTypeReferenceExpression node);
    method public void visitUnaryExpression(org.jetbrains.uast.UUnaryExpression node);
    method public void visitVariable(org.jetbrains.uast.UVariable node);
    method public void visitWhileExpression(org.jetbrains.uast.UWhileExpression node);
    method public void visitYieldExpression(org.jetbrains.uast.UYieldExpression node);
    field public static final com.android.tools.lint.client.api.UElementHandler.Companion Companion;
  }

  public static final class UElementHandler.Companion {
    method public com.android.tools.lint.client.api.UElementHandler getNONE();
    property public final com.android.tools.lint.client.api.UElementHandler NONE;
  }

  public final class UastGradleVisitor extends com.android.tools.lint.client.api.GradleVisitor {
    ctor public UastGradleVisitor(com.android.tools.lint.detector.api.JavaContext javaContext);
  }

  @com.google.common.annotations.Beta public abstract class UastParser {
    ctor public UastParser();
    method public abstract com.android.tools.lint.detector.api.Location createLocation(com.intellij.psi.PsiElement element);
    method public abstract com.android.tools.lint.detector.api.Location createLocation(org.jetbrains.uast.UElement element);
    method public abstract com.android.tools.lint.detector.api.Location getCallLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UCallExpression call, boolean includeReceiver, boolean includeArguments);
    method public abstract com.android.tools.lint.client.api.JavaEvaluator getEvaluator();
    method public abstract java.io.File? getFile(com.intellij.psi.PsiFile file);
    method public abstract CharSequence getFileContents(com.intellij.psi.PsiFile file);
    method public abstract com.android.tools.lint.detector.api.Location getLocation(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement element);
    method public abstract com.android.tools.lint.detector.api.Location getLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement element);
    method public abstract com.android.tools.lint.detector.api.Location getNameLocation(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement element);
    method public abstract com.android.tools.lint.detector.api.Location getNameLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement element);
    method public abstract com.android.tools.lint.detector.api.Location getRangeLocation(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement from, int fromDelta, com.intellij.psi.PsiElement to, int toDelta);
    method public abstract com.android.tools.lint.detector.api.Location getRangeLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement from, int fromDelta, org.jetbrains.uast.UElement to, int toDelta);
    method public abstract com.android.tools.lint.detector.api.Location getRangeLocation(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement from, int fromDelta, int toDelta);
    method public abstract com.android.tools.lint.detector.api.Location getRangeLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement from, int fromDelta, int toDelta);
    method public abstract org.jetbrains.uast.UFile? parse(com.android.tools.lint.detector.api.JavaContext context);
    method public boolean prepare(java.util.List<? extends com.android.tools.lint.detector.api.JavaContext> contexts, com.intellij.pom.java.LanguageLevel? javaLanguageLevel = null, org.jetbrains.kotlin.config.LanguageVersionSettings? kotlinLanguageLevel = null);
    property public abstract com.android.tools.lint.client.api.JavaEvaluator evaluator;
  }

  @com.google.common.annotations.Beta public abstract class XmlParser {
    ctor public XmlParser();
    method public abstract com.android.tools.lint.detector.api.Location.Handle createLocationHandle(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Node node);
    method public abstract org.w3c.dom.Node? findNodeAt(com.android.tools.lint.detector.api.XmlContext context, int offset);
    method public final com.android.tools.lint.detector.api.Location getElementLocation(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Element element, org.w3c.dom.Node? node = null, String? namespace = null, String? attribute = null);
    method public abstract com.android.tools.lint.detector.api.Location getLocation(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Node node);
    method public abstract com.android.tools.lint.detector.api.Location getLocation(java.io.File file, org.w3c.dom.Node node);
    method public abstract com.android.tools.lint.detector.api.Location getLocation(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Node node, int start, int end);
    method public abstract com.android.tools.lint.detector.api.Location getNameLocation(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Node node);
    method public abstract int getNodeEndOffset(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Node node);
    method public abstract int getNodeStartOffset(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Node node);
    method public abstract com.android.tools.lint.detector.api.Location getValueLocation(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Attr node);
    method @kotlin.jvm.Throws(exceptionClasses={IOException::class, SAXException::class, ParserConfigurationException::class}) public abstract org.w3c.dom.Document? parseXml(java.io.File file) throws java.io.IOException, javax.xml.parsers.ParserConfigurationException, org.xml.sax.SAXException;
    method public abstract org.w3c.dom.Document? parseXml(CharSequence xml, java.io.File file);
    method public abstract org.w3c.dom.Document? parseXml(com.android.tools.lint.detector.api.XmlContext context);
  }

}

package com.android.tools.lint.detector.api {

  public enum AnnotationUsageType {
    method public static com.android.tools.lint.detector.api.AnnotationUsageType valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static com.android.tools.lint.detector.api.AnnotationUsageType[] values();
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType ANNOTATION_REFERENCE;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType ASSIGNMENT;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType BINARY;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType EQUALITY;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType EXTENDS;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType FIELD_REFERENCE;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType METHOD_CALL;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType METHOD_CALL_CLASS;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType METHOD_CALL_PACKAGE;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType METHOD_CALL_PARAMETER;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType METHOD_RETURN;
    enum_constant public static final com.android.tools.lint.detector.api.AnnotationUsageType VARIABLE_REFERENCE;
  }

  public final class ApiKt {
    method public static String describeApi(int api);
    field public static final int CURRENT_API = 8; // 0x8
  }

  public interface BinaryResourceScanner extends com.android.tools.lint.detector.api.FileScanner {
    method public boolean appliesTo(com.android.resources.ResourceFolderType folderType);
    method public void checkBinaryResource(com.android.tools.lint.detector.api.ResourceContext context);
  }

  @com.google.common.annotations.Beta public final class Category implements java.lang.Comparable<com.android.tools.lint.detector.api.Category> {
    ctor public Category(com.android.tools.lint.detector.api.Category? parent, String name, int priority);
    method public int compareTo(com.android.tools.lint.detector.api.Category other);
    method public com.android.tools.lint.detector.api.Category? component1();
    method public String component2();
    method @com.google.common.annotations.Beta public com.android.tools.lint.detector.api.Category copy(com.android.tools.lint.detector.api.Category? parent, String name, int priority);
    method public static com.android.tools.lint.detector.api.Category create(String name, int priority);
    method public static com.android.tools.lint.detector.api.Category create(com.android.tools.lint.detector.api.Category? parent, String name, int priority);
    method public static com.android.tools.lint.detector.api.Category? getCategory(String name);
    method public String getFullName();
    method public String getName();
    method public com.android.tools.lint.detector.api.Category? getParent();
    property public final String fullName;
    field public static final com.android.tools.lint.detector.api.Category A11Y;
    field public static final com.android.tools.lint.detector.api.Category APP_SIZE;
    field public static final com.android.tools.lint.detector.api.Category CHROME_OS;
    field public static final com.android.tools.lint.detector.api.Category COMPLIANCE;
    field public static final com.android.tools.lint.detector.api.Category CORRECTNESS;
    field public static final com.android.tools.lint.detector.api.Category CUSTOM_LINT_CHECKS;
    field public static final com.android.tools.lint.detector.api.Category.Companion Companion;
    field public static final com.android.tools.lint.detector.api.Category I18N;
    field public static final com.android.tools.lint.detector.api.Category ICONS;
    field public static final com.android.tools.lint.detector.api.Category INTEROPERABILITY;
    field public static final com.android.tools.lint.detector.api.Category INTEROPERABILITY_JAVA;
    field public static final com.android.tools.lint.detector.api.Category INTEROPERABILITY_KOTLIN;
    field public static final com.android.tools.lint.detector.api.Category LINT;
    field public static final com.android.tools.lint.detector.api.Category MESSAGES;
    field public static final com.android.tools.lint.detector.api.Category PERFORMANCE;
    field public static final com.android.tools.lint.detector.api.Category PRODUCTIVITY;
    field public static final com.android.tools.lint.detector.api.Category RTL;
    field public static final com.android.tools.lint.detector.api.Category SECURITY;
    field public static final com.android.tools.lint.detector.api.Category TESTING;
    field public static final com.android.tools.lint.detector.api.Category TYPOGRAPHY;
    field public static final com.android.tools.lint.detector.api.Category USABILITY;
  }

  public static final class Category.Companion {
    method public com.android.tools.lint.detector.api.Category create(String name, int priority);
    method public com.android.tools.lint.detector.api.Category create(com.android.tools.lint.detector.api.Category? parent, String name, int priority);
    method public com.android.tools.lint.detector.api.Category? getCategory(String name);
  }

  @com.google.common.annotations.Beta public final class ClassContext extends com.android.tools.lint.detector.api.Context {
    ctor public ClassContext(com.android.tools.lint.client.api.LintDriver driver, com.android.tools.lint.detector.api.Project project, com.android.tools.lint.detector.api.Project? main, java.io.File file, java.io.File? jarFile, java.io.File binDir, byte[] bytecode, org.objectweb.asm.tree.ClassNode classNode, boolean isFromClassLibrary, CharSequence? sourceContents);
    method public static String createSignature(String? owner, String? name, String? desc);
    method public static int findLineNumber(org.objectweb.asm.tree.AbstractInsnNode node);
    method public static int findLineNumber(org.objectweb.asm.tree.MethodNode node);
    method public static int findLineNumber(org.objectweb.asm.tree.ClassNode node);
    method public com.intellij.psi.PsiClass? findPsiClass(org.objectweb.asm.tree.ClassNode classNode);
    method public com.intellij.psi.PsiClass? findPsiClass(String qualifiedName);
    method public byte[] getBytecode();
    method public org.objectweb.asm.tree.ClassNode getClassNode();
    method public static String getFqcn(String owner);
    method public static String getInternalName(String qualifiedName);
    method public java.io.File? getJarFile();
    method public com.android.tools.lint.detector.api.Location getLocation(org.objectweb.asm.tree.ClassNode classNode);
    method public com.android.tools.lint.detector.api.Location getLocation(org.objectweb.asm.tree.MethodNode methodNode, org.objectweb.asm.tree.ClassNode classNode);
    method public com.android.tools.lint.detector.api.Location getLocation(org.objectweb.asm.tree.AbstractInsnNode instruction);
    method public com.android.tools.lint.detector.api.Location getLocationForLine(int line, String? patternStart, String? patternEnd, com.android.tools.lint.detector.api.Location.SearchHints? hints);
    method public CharSequence getSourceContents();
    method public CharSequence? getSourceContents(boolean read);
    method public java.io.File? getSourceFile();
    method public boolean isFromClassLibrary();
    method public void report(com.android.tools.lint.detector.api.Issue issue, org.objectweb.asm.tree.MethodNode? method, org.objectweb.asm.tree.AbstractInsnNode? instruction, com.android.tools.lint.detector.api.Location location, String message);
    method public void report(com.android.tools.lint.detector.api.Issue issue, org.objectweb.asm.tree.FieldNode? field, com.android.tools.lint.detector.api.Location location, String message);
    method @Deprecated public void report(com.android.tools.lint.detector.api.Issue issue, org.objectweb.asm.tree.MethodNode? method, org.objectweb.asm.tree.AbstractInsnNode? instruction, com.android.tools.lint.detector.api.Location location, String message, Object? data);
    method @Deprecated public void report(com.android.tools.lint.detector.api.Issue issue, org.objectweb.asm.tree.FieldNode? field, com.android.tools.lint.detector.api.Location location, String message, Object? data);
    field public static final com.android.tools.lint.detector.api.ClassContext.Companion Companion;
  }

  public static final class ClassContext.Companion {
    method public String createSignature(String? owner, String? name, String? desc);
    method public int findLineNumber(org.objectweb.asm.tree.AbstractInsnNode node);
    method public int findLineNumber(org.objectweb.asm.tree.MethodNode node);
    method public int findLineNumber(org.objectweb.asm.tree.ClassNode node);
    method public String getFqcn(String owner);
    method public String getInternalName(String qualifiedName);
  }

  public interface ClassScanner extends com.android.tools.lint.detector.api.FileScanner {
    method public void checkCall(com.android.tools.lint.detector.api.ClassContext context, org.objectweb.asm.tree.ClassNode classNode, org.objectweb.asm.tree.MethodNode method, org.objectweb.asm.tree.MethodInsnNode call);
    method public void checkClass(com.android.tools.lint.detector.api.ClassContext context, org.objectweb.asm.tree.ClassNode classNode);
    method public void checkInstruction(com.android.tools.lint.detector.api.ClassContext context, org.objectweb.asm.tree.ClassNode classNode, org.objectweb.asm.tree.MethodNode method, org.objectweb.asm.tree.AbstractInsnNode instruction);
    method public int[]? getApplicableAsmNodeTypes();
    method public java.util.List<java.lang.String>? getApplicableCallNames();
    method public java.util.List<java.lang.String>? getApplicableCallOwners();
  }

  public class ConstantEvaluator {
    ctor public ConstantEvaluator();
    method public com.android.tools.lint.detector.api.ConstantEvaluator! allowFieldInitializers();
    method public com.android.tools.lint.detector.api.ConstantEvaluator! allowUnknowns();
    method public Object? evaluate(org.jetbrains.uast.UElement?);
    method public Object? evaluate(com.intellij.psi.PsiElement?);
    method public static Object? evaluate(com.android.tools.lint.detector.api.JavaContext?, com.intellij.psi.PsiElement);
    method public static Object? evaluate(com.android.tools.lint.detector.api.JavaContext?, org.jetbrains.uast.UElement);
    method public static String? evaluateString(com.android.tools.lint.detector.api.JavaContext?, com.intellij.psi.PsiElement, boolean);
    method public static String? evaluateString(com.android.tools.lint.detector.api.JavaContext?, org.jetbrains.uast.UElement, boolean);
    method public static com.intellij.psi.PsiExpression? findLastAssignment(com.intellij.psi.PsiElement, com.intellij.psi.PsiVariable);
    method public static int getArraySize(Object?);
    method public static boolean isArrayLiteral(com.intellij.psi.PsiElement?);
    method public static boolean isArrayLiteral(org.jetbrains.uast.UElement?);
  }

  public static class ConstantEvaluator.ArrayReference {
    ctor public ConstantEvaluator.ArrayReference(Class<?>?, int, int);
    ctor public ConstantEvaluator.ArrayReference(String?, int, int);
    field public final String? className;
    field public final int dimensions;
    field public final int size;
    field public final Class<?>? type;
  }

  public static class ConstantEvaluator.LastAssignmentFinder extends org.jetbrains.uast.visitor.AbstractUastVisitor {
    ctor public ConstantEvaluator.LastAssignmentFinder(com.intellij.psi.PsiVariable, org.jetbrains.uast.UElement, com.android.tools.lint.detector.api.ConstantEvaluator?, int);
    method public Object? getCurrentValue();
    method public org.jetbrains.uast.UElement? getLastAssignment();
    field public static final Object! LAST_ASSIGNMENT_VALUE_UNKNOWN;
  }

  @com.google.common.annotations.Beta public class Context {
    ctor public Context(com.android.tools.lint.client.api.LintDriver driver, com.android.tools.lint.detector.api.Project project, com.android.tools.lint.detector.api.Project? main, java.io.File file, CharSequence? contents);
    method public final boolean containsCommentSuppress();
    method protected final void doReport(com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Location location, String message, com.android.tools.lint.detector.api.LintFix? quickfixData);
    method public final com.android.tools.lint.client.api.Configuration findConfiguration(java.io.File file);
    method public final com.android.tools.lint.client.api.LintClient getClient();
    method public final com.android.tools.lint.client.api.Configuration getConfiguration();
    method public CharSequence? getContents();
    method public final com.android.tools.lint.client.api.LintDriver getDriver();
    method public final com.android.tools.lint.detector.api.Project getMainProject();
    method public final int getPhase();
    method public final com.android.tools.lint.detector.api.Project getProject();
    method public final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> getScope();
    method public final com.android.tools.lint.client.api.SdkInfo getSdkInfo();
    method protected String? getSuppressCommentPrefix();
    method public final boolean isEnabled(com.android.tools.lint.detector.api.Issue issue);
    method public final boolean isSuppressedWithComment(int startOffset, com.android.tools.lint.detector.api.Issue issue);
    method public final void log(Throwable? exception, String? format, java.lang.Object... args);
    method public void report(com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Location location, String message, com.android.tools.lint.detector.api.LintFix? quickfixData = null);
    method public void report(com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Location location, String message);
    method @Deprecated public final void report(com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Location location, String message, Object? quickfixData);
    method public final void requestRepeat(com.android.tools.lint.detector.api.Detector detector, java.util.EnumSet<com.android.tools.lint.detector.api.Scope>? scope);
    property public final com.android.tools.lint.client.api.LintClient client;
    property public final com.android.tools.lint.client.api.Configuration configuration;
    property public final com.android.tools.lint.detector.api.Project mainProject;
    property public final int phase;
    property public final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scope;
    property public final com.android.tools.lint.client.api.SdkInfo sdkInfo;
    property protected String? suppressCommentPrefix;
    field public static final com.android.tools.lint.detector.api.Context.Companion Companion;
    field public final java.io.File file;
  }

  public static final class Context.Companion {
    method @com.google.common.annotations.VisibleForTesting public boolean isSuppressedWithComment(String line, com.android.tools.lint.detector.api.Issue issue);
  }

  @com.google.common.annotations.Beta public final class DefaultPosition extends com.android.tools.lint.detector.api.Position {
    ctor public DefaultPosition(int line, int column, int offset);
    method public int component1();
    method public int component2();
    method public int component3();
    method @com.google.common.annotations.Beta public com.android.tools.lint.detector.api.DefaultPosition copy(int line, int column, int offset);
    method public int getColumn();
    method public int getLine();
    method public int getOffset();
  }

  public enum Desugaring {
    method public static com.android.tools.lint.detector.api.Desugaring valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static com.android.tools.lint.detector.api.Desugaring[] values();
    enum_constant public static final com.android.tools.lint.detector.api.Desugaring INTERFACE_METHODS;
    enum_constant public static final com.android.tools.lint.detector.api.Desugaring JAVA_8_LIBRARY;
    enum_constant public static final com.android.tools.lint.detector.api.Desugaring LAMBDAS;
    enum_constant public static final com.android.tools.lint.detector.api.Desugaring LONG_COMPARE;
    enum_constant public static final com.android.tools.lint.detector.api.Desugaring METHOD_REFERENCES;
    enum_constant public static final com.android.tools.lint.detector.api.Desugaring OBJECTS_REQUIRE_NON_NULL;
    enum_constant public static final com.android.tools.lint.detector.api.Desugaring TRY_WITH_RESOURCES;
    enum_constant public static final com.android.tools.lint.detector.api.Desugaring TYPE_ANNOTATIONS;
    field public static final com.android.tools.lint.detector.api.Desugaring.Companion Companion;
    field public static final java.util.Set<com.android.tools.lint.detector.api.Desugaring> DEFAULT;
    field public static final java.util.Set<com.android.tools.lint.detector.api.Desugaring> FULL;
    field public static final java.util.Set<com.android.tools.lint.detector.api.Desugaring> NONE;
  }

  public static final class Desugaring.Companion {
  }

  @com.google.common.annotations.Beta public abstract class Detector {
    ctor public Detector();
    method public void afterCheckEachProject(com.android.tools.lint.detector.api.Context context);
    method public void afterCheckFile(com.android.tools.lint.detector.api.Context context);
    method @Deprecated public void afterCheckLibraryProject(com.android.tools.lint.detector.api.Context context);
    method @Deprecated public void afterCheckProject(com.android.tools.lint.detector.api.Context context);
    method public void afterCheckRootProject(com.android.tools.lint.detector.api.Context context);
    method public void analyzeCallGraph(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.interprocedural.CallGraphResult callGraph);
    method public java.util.List<java.lang.String>? applicableAnnotations();
    method public java.util.List<java.lang.String>? applicableSuperClasses();
    method @Deprecated public final boolean appliesTo(com.android.tools.lint.detector.api.Context context, java.io.File file);
    method public boolean appliesTo(com.android.resources.ResourceFolderType folderType);
    method public boolean appliesToResourceRefs();
    method public void beforeCheckEachProject(com.android.tools.lint.detector.api.Context context);
    method public void beforeCheckFile(com.android.tools.lint.detector.api.Context context);
    method @Deprecated public void beforeCheckLibraryProject(com.android.tools.lint.detector.api.Context context);
    method @Deprecated public void beforeCheckProject(com.android.tools.lint.detector.api.Context context);
    method public void beforeCheckRootProject(com.android.tools.lint.detector.api.Context context);
    method public void checkBinaryResource(com.android.tools.lint.detector.api.ResourceContext context);
    method public void checkCall(com.android.tools.lint.detector.api.ClassContext context, org.objectweb.asm.tree.ClassNode classNode, org.objectweb.asm.tree.MethodNode method, org.objectweb.asm.tree.MethodInsnNode call);
    method public void checkClass(com.android.tools.lint.detector.api.ClassContext context, org.objectweb.asm.tree.ClassNode classNode);
    method public void checkClass(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiClass declaration);
    method public void checkDslPropertyAssignment(com.android.tools.lint.detector.api.GradleContext context, String property, String value, String parent, String? parentParent, Object valueCookie, Object statementCookie);
    method public void checkDslPropertyAssignment(com.android.tools.lint.detector.api.GradleContext context, String property, String value, String parent, String? parentParent, Object propertyCookie, Object valueCookie, Object statementCookie);
    method public void checkFolder(com.android.tools.lint.detector.api.ResourceContext context, String folderName);
    method public void checkInstruction(com.android.tools.lint.detector.api.ClassContext context, org.objectweb.asm.tree.ClassNode classNode, org.objectweb.asm.tree.MethodNode method, org.objectweb.asm.tree.AbstractInsnNode instruction);
    method public void checkMethodCall(com.android.tools.lint.detector.api.GradleContext context, String statement, String? parent, java.util.Map<java.lang.String,java.lang.String> namedArguments, java.util.List<java.lang.String> unnamedArguments, Object cookie);
    method public void checkMethodCall(com.android.tools.lint.detector.api.GradleContext context, String statement, String? parent, String? parentParent, java.util.Map<java.lang.String,java.lang.String> namedArguments, java.util.List<java.lang.String> unnamedArguments, Object cookie);
    method public com.intellij.psi.JavaElementVisitor? createPsiVisitor(com.android.tools.lint.detector.api.JavaContext context);
    method public com.android.tools.lint.client.api.UElementHandler? createUastHandler(com.android.tools.lint.detector.api.JavaContext context);
    method protected com.android.tools.lint.detector.api.LintFix.Builder fix();
    method public int[]? getApplicableAsmNodeTypes();
    method public java.util.Collection<java.lang.String>? getApplicableAttributes();
    method public java.util.List<java.lang.String>? getApplicableCallNames();
    method public java.util.List<java.lang.String>? getApplicableCallOwners();
    method public java.util.List<java.lang.String>? getApplicableConstructorTypes();
    method public java.util.Collection<java.lang.String>? getApplicableElements();
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Scope> getApplicableFiles();
    method public java.util.List<java.lang.String>? getApplicableMethodNames();
    method public java.util.List<java.lang.Class<? extends com.intellij.psi.PsiElement>>? getApplicablePsiTypes();
    method public java.util.List<java.lang.String>? getApplicableReferenceNames();
    method public java.util.List<java.lang.Class<? extends org.jetbrains.uast.UElement>>? getApplicableUastTypes();
    method public boolean getCustomVisitor();
    method @Deprecated public com.android.tools.lint.detector.api.Speed getSpeed(com.android.tools.lint.detector.api.Issue issue);
    method public boolean inheritAnnotation(String annotation);
    method public boolean isApplicableAnnotationUsage(com.android.tools.lint.detector.api.AnnotationUsageType type);
    method public boolean isCallGraphRequired();
    method public void run(com.android.tools.lint.detector.api.Context context);
    method public void visitAnnotationUsage(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement usage, com.android.tools.lint.detector.api.AnnotationUsageType type, org.jetbrains.uast.UAnnotation annotation, String qualifiedName, com.intellij.psi.PsiMethod? method, java.util.List<? extends org.jetbrains.uast.UAnnotation> annotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allMemberAnnotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allClassAnnotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allPackageAnnotations);
    method public void visitAnnotationUsage(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement usage, com.android.tools.lint.detector.api.AnnotationUsageType type, org.jetbrains.uast.UAnnotation annotation, String qualifiedName, com.intellij.psi.PsiMethod? method, com.intellij.psi.PsiElement? referenced, java.util.List<? extends org.jetbrains.uast.UAnnotation> annotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allMemberAnnotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allClassAnnotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allPackageAnnotations);
    method public void visitAttribute(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Attr attribute);
    method public void visitBuildScript(com.android.tools.lint.detector.api.Context context);
    method public void visitClass(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UClass declaration);
    method public void visitClass(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.ULambdaExpression lambda);
    method public void visitConstructor(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.JavaElementVisitor? visitor, com.intellij.psi.PsiNewExpression node, com.intellij.psi.PsiMethod constructor);
    method public void visitConstructor(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UCallExpression node, com.intellij.psi.PsiMethod constructor);
    method public void visitDocument(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Document document);
    method public void visitElement(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Element element);
    method public void visitElementAfter(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Element element);
    method public void visitMethod(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.JavaElementVisitor? visitor, com.intellij.psi.PsiMethodCallExpression call, com.intellij.psi.PsiMethod method);
    method @Deprecated public void visitMethod(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UCallExpression node, com.intellij.psi.PsiMethod method);
    method public void visitMethodCall(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UCallExpression node, com.intellij.psi.PsiMethod method);
    method public void visitReference(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.JavaElementVisitor? visitor, com.intellij.psi.PsiJavaCodeReferenceElement reference, com.intellij.psi.PsiElement referenced);
    method public void visitReference(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UReferenceExpression reference, com.intellij.psi.PsiElement referenced);
    method public void visitResourceReference(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.JavaElementVisitor? visitor, com.intellij.psi.PsiElement node, com.android.resources.ResourceType type, String name, boolean isFramework);
    method public void visitResourceReference(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement node, com.android.resources.ResourceType type, String name, boolean isFramework);
    property public boolean customVisitor;
  }

  public static interface Detector.BinaryResourceScanner extends com.android.tools.lint.detector.api.BinaryResourceScanner {
  }

  public static interface Detector.ClassScanner extends com.android.tools.lint.detector.api.ClassScanner {
  }

  public static interface Detector.GradleScanner extends com.android.tools.lint.detector.api.GradleScanner {
  }

  public static interface Detector.OtherFileScanner extends com.android.tools.lint.detector.api.OtherFileScanner {
  }

  public static interface Detector.ResourceFolderScanner extends com.android.tools.lint.detector.api.ResourceFolderScanner {
  }

  public static interface Detector.UastScanner extends com.android.tools.lint.detector.api.SourceCodeScanner {
  }

  public static interface Detector.XmlScanner extends com.android.tools.lint.detector.api.XmlScanner {
  }

  public interface ExternalReferenceExpression {
    method public com.intellij.psi.PsiElement? resolve(com.intellij.psi.PsiElement context);
  }

  public interface FileScanner {
    method public void afterCheckFile(com.android.tools.lint.detector.api.Context context);
    method public void beforeCheckFile(com.android.tools.lint.detector.api.Context context);
  }

  public final class GradleContext extends com.android.tools.lint.detector.api.Context {
    ctor public GradleContext(com.android.tools.lint.client.api.GradleVisitor gradleVisitor, com.android.tools.lint.client.api.LintDriver driver, com.android.tools.lint.detector.api.Project project, com.android.tools.lint.detector.api.Project? main, java.io.File file);
    method public com.android.tools.lint.client.api.GradleVisitor getGradleVisitor();
    method public com.android.tools.lint.detector.api.Location getLocation(Object cookie);
    method @Deprecated public Object getPropertyKeyCookie(Object cookie);
    method @Deprecated public Object getPropertyPairCookie(Object cookie);
    method public boolean isSuppressedWithComment(Object cookie, com.android.tools.lint.detector.api.Issue issue);
    method public void report(com.android.tools.lint.detector.api.Issue issue, Object cookie, com.android.tools.lint.detector.api.Location location, String message, com.android.tools.lint.detector.api.LintFix? fix = null);
    field public static final com.android.tools.lint.detector.api.GradleContext.Companion Companion;
  }

  public static final class GradleContext.Companion {
    method public int getIntLiteralValue(String value, int defaultValue);
    method public String? getStringLiteralValue(String value);
    method public boolean isNonNegativeInteger(String token);
    method public boolean isStringLiteral(String token);
  }

  public interface GradleScanner extends com.android.tools.lint.detector.api.FileScanner {
    method @Deprecated public void checkDslPropertyAssignment(com.android.tools.lint.detector.api.GradleContext context, String property, String value, String parent, String? parentParent, Object valueCookie, Object statementCookie);
    method public void checkDslPropertyAssignment(com.android.tools.lint.detector.api.GradleContext context, String property, String value, String parent, String? parentParent, Object propertyCookie, Object valueCookie, Object statementCookie);
    method @Deprecated public void checkMethodCall(com.android.tools.lint.detector.api.GradleContext context, String statement, String? parent, java.util.Map<java.lang.String,java.lang.String> namedArguments, java.util.List<java.lang.String> unnamedArguments, Object cookie);
    method public void checkMethodCall(com.android.tools.lint.detector.api.GradleContext context, String statement, String? parent, String? parentParent, java.util.Map<java.lang.String,java.lang.String> namedArguments, java.util.List<java.lang.String> unnamedArguments, Object cookie);
    method public boolean getCustomVisitor();
    method public void visitBuildScript(com.android.tools.lint.detector.api.Context context);
    property public abstract boolean customVisitor;
  }

  @com.google.common.annotations.Beta public class Implementation {
    ctor public Implementation(Class<? extends com.android.tools.lint.detector.api.Detector>, java.util.EnumSet<com.android.tools.lint.detector.api.Scope!>);
    ctor @java.lang.SafeVarargs public Implementation(Class<? extends com.android.tools.lint.detector.api.Detector>, java.util.EnumSet<com.android.tools.lint.detector.api.Scope!>, java.util.EnumSet<com.android.tools.lint.detector.api.Scope!>!...);
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Scope!>![] getAnalysisScopes();
    method public Class<? extends com.android.tools.lint.detector.api.Detector> getDetectorClass();
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Scope!> getScope();
    method public boolean isAdequate(java.util.EnumSet<com.android.tools.lint.detector.api.Scope!>);
  }

  @com.google.common.annotations.Beta public final class Issue implements java.lang.Comparable<com.android.tools.lint.detector.api.Issue> {
    method public com.android.tools.lint.detector.api.Issue addMoreInfo(String moreInfoUrl);
    method public int compareTo(com.android.tools.lint.detector.api.Issue other);
    method public static com.android.tools.lint.detector.api.Issue create(String id, String briefDescription, String explanation, com.android.tools.lint.detector.api.Category category, int priority, com.android.tools.lint.detector.api.Severity severity, com.android.tools.lint.detector.api.Implementation implementation);
    method public String getBriefDescription(com.android.tools.lint.detector.api.TextFormat format);
    method public com.android.tools.lint.detector.api.Category getCategory();
    method public com.android.tools.lint.detector.api.Severity getDefaultSeverity();
    method public String getExplanation(com.android.tools.lint.detector.api.TextFormat format);
    method public String getId();
    method public com.android.tools.lint.detector.api.Implementation getImplementation();
    method public java.util.List<java.lang.String> getMoreInfo();
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Platform> getPlatforms();
    method public int getPriority();
    method public java.util.Collection<java.lang.String>? getSuppressNames();
    method public boolean isAndroidSpecific();
    method public boolean isEnabledByDefault();
    method public com.android.tools.lint.detector.api.Issue setAndroidSpecific(boolean value);
    method public com.android.tools.lint.detector.api.Issue setEnabledByDefault(boolean enabledByDefault);
    method public void setImplementation(com.android.tools.lint.detector.api.Implementation p);
    property public final java.util.List<java.lang.String> moreInfo;
    property public final java.util.EnumSet<com.android.tools.lint.detector.api.Platform> platforms;
    field public static final com.android.tools.lint.detector.api.Issue.Companion Companion;
  }

  public static final class Issue.Companion {
    method public com.android.tools.lint.detector.api.Issue create(String id, String briefDescription, String explanation, com.android.tools.lint.detector.api.Category category, int priority, com.android.tools.lint.detector.api.Severity severity, com.android.tools.lint.detector.api.Implementation implementation);
    method public com.android.tools.lint.detector.api.Issue create(String id, String briefDescription, String explanation, com.android.tools.lint.detector.api.Implementation implementation, String? moreInfo = null, com.android.tools.lint.detector.api.Category category = com.android.tools.lint.detector.api.Category.CORRECTNESS, int priority = 5, com.android.tools.lint.detector.api.Severity severity = com.android.tools.lint.detector.api.Severity.WARNING, boolean enabledByDefault = true, Boolean? androidSpecific = null, java.util.EnumSet<com.android.tools.lint.detector.api.Platform>? platforms = null, java.util.Collection<java.lang.String>? suppressAnnotations = null);
  }

  public class JavaContext extends com.android.tools.lint.detector.api.Context {
    ctor public JavaContext(com.android.tools.lint.client.api.LintDriver driver, com.android.tools.lint.detector.api.Project project, com.android.tools.lint.detector.api.Project? main, java.io.File file);
    method public static final com.intellij.psi.PsiElement? findNameElement(com.intellij.psi.PsiElement element);
    method public static final org.jetbrains.uast.UElement? findNameElement(org.jetbrains.uast.UElement element);
    method public final com.android.tools.lint.detector.api.Location getCallLocation(org.jetbrains.uast.UCallExpression call, boolean includeReceiver, boolean includeArguments);
    method public final com.android.tools.lint.client.api.JavaEvaluator getEvaluator();
    method @Deprecated public final com.intellij.psi.PsiJavaFile? getJavaFile();
    method public final com.android.tools.lint.detector.api.Location getLocation(com.intellij.psi.PsiElement node);
    method public final com.android.tools.lint.detector.api.Location getLocation(org.jetbrains.uast.UElement element);
    method public final com.android.tools.lint.detector.api.Location getLocation(org.jetbrains.uast.UMethod element);
    method public final com.android.tools.lint.detector.api.Location getLocation(org.jetbrains.uast.UField element);
    method public static final String? getMethodName(org.jetbrains.uast.UElement call);
    method public final com.android.tools.lint.detector.api.Location getNameLocation(com.intellij.psi.PsiElement element);
    method public final com.android.tools.lint.detector.api.Location getNameLocation(org.jetbrains.uast.UElement element);
    method public final com.android.tools.lint.detector.api.Location getNameLocation(org.jetbrains.uast.UDeclaration cls);
    method public final com.android.tools.lint.detector.api.Location getNameLocation(org.jetbrains.uast.UClass cls);
    method public final com.android.tools.lint.detector.api.Location getNameLocation(org.jetbrains.uast.UMethod cls);
    method public final com.intellij.psi.PsiFile? getPsiFile();
    method public final com.android.tools.lint.detector.api.Location getRangeLocation(com.intellij.psi.PsiElement from, int fromDelta, com.intellij.psi.PsiElement to, int toDelta);
    method public final com.android.tools.lint.detector.api.Location getRangeLocation(org.jetbrains.uast.UElement from, int fromDelta, org.jetbrains.uast.UElement to, int toDelta);
    method public final com.android.tools.lint.detector.api.Location getRangeLocation(org.jetbrains.uast.UDeclaration from, int fromDelta, org.jetbrains.uast.UDeclaration to, int toDelta);
    method public final com.android.tools.lint.detector.api.Location getRangeLocation(com.intellij.psi.PsiElement from, int fromDelta, int length);
    method public final com.android.tools.lint.detector.api.Location getRangeLocation(org.jetbrains.uast.UElement from, int fromDelta, int length);
    method @Deprecated public final org.jetbrains.uast.UastContext getUastContext();
    method public final org.jetbrains.uast.UFile? getUastFile();
    method public final com.android.tools.lint.client.api.UastParser getUastParser();
    method public final boolean isGeneratedSource();
    method public final boolean isSuppressedWithComment(com.intellij.psi.PsiElement scope, com.android.tools.lint.detector.api.Issue issue);
    method public final boolean isSuppressedWithComment(org.jetbrains.uast.UElement scope, com.android.tools.lint.detector.api.Issue issue);
    method public final boolean isTestSource();
    method public final void report(com.android.tools.lint.detector.api.Issue issue, com.intellij.psi.PsiElement? scope, com.android.tools.lint.detector.api.Location location, String message, com.android.tools.lint.detector.api.LintFix? quickfixData = null);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, com.intellij.psi.PsiElement? scope, com.android.tools.lint.detector.api.Location location, String message);
    method @Deprecated public final void report(com.android.tools.lint.detector.api.Issue issue, com.intellij.psi.PsiElement? scope, com.android.tools.lint.detector.api.Location location, String message, Object? quickfixData);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UElement? scope, com.android.tools.lint.detector.api.Location location, String message, com.android.tools.lint.detector.api.LintFix? quickfixData = null);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UElement? scope, com.android.tools.lint.detector.api.Location location, String message);
    method @Deprecated public final void report(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UElement? scope, com.android.tools.lint.detector.api.Location location, String message, Object? quickfixData);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UClass? scopeClass, com.android.tools.lint.detector.api.Location location, String message);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UClass? scopeClass, com.android.tools.lint.detector.api.Location location, String message, com.android.tools.lint.detector.api.LintFix? quickfixData);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UMethod? scopeClass, com.android.tools.lint.detector.api.Location location, String message);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UMethod? scopeClass, com.android.tools.lint.detector.api.Location location, String message, com.android.tools.lint.detector.api.LintFix? quickfixData);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UField? scopeClass, com.android.tools.lint.detector.api.Location location, String message);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.jetbrains.uast.UField? scopeClass, com.android.tools.lint.detector.api.Location location, String message, com.android.tools.lint.detector.api.LintFix? quickfixData);
    method public final void setGeneratedSource(boolean p);
    method public final void setJavaFile(com.intellij.psi.PsiFile? javaFile);
    method public final void setTestSource(boolean p);
    method public final void setUastFile(org.jetbrains.uast.UFile? p);
    method public final void setUastParser(com.android.tools.lint.client.api.UastParser p);
    property public final com.android.tools.lint.client.api.JavaEvaluator evaluator;
    property public final boolean isGeneratedSource;
    property public final boolean isTestSource;
    property @Deprecated public final com.intellij.psi.PsiJavaFile? javaFile;
    property public final com.intellij.psi.PsiFile? psiFile;
    property protected String? suppressCommentPrefix;
    property @Deprecated public final org.jetbrains.uast.UastContext uastContext;
    property public final org.jetbrains.uast.UFile? uastFile;
    property public final com.android.tools.lint.client.api.UastParser uastParser;
    field public static final com.android.tools.lint.detector.api.JavaContext.Companion Companion;
    field public com.android.tools.lint.client.api.UastParser uastParser;
  }

  public static final class JavaContext.Companion {
    method public com.intellij.psi.PsiElement? findNameElement(com.intellij.psi.PsiElement element);
    method public org.jetbrains.uast.UElement? findNameElement(org.jetbrains.uast.UElement element);
    method public String? getMethodName(org.jetbrains.uast.UElement call);
  }

  @com.google.common.annotations.Beta public abstract class LayoutDetector extends com.android.tools.lint.detector.api.ResourceXmlDetector {
    ctor public LayoutDetector();
  }

  public final class Lint {
    method public static boolean assertionsEnabled();
    method @java.lang.SafeVarargs public static <T> T? coalesce(T?... ts);
    method public static java.util.Map<org.jetbrains.uast.UExpression,com.intellij.psi.PsiParameter>? computeKotlinArgumentMapping(org.jetbrains.uast.UCallExpression call, com.intellij.psi.PsiMethod method);
    method public static String computeResourceName(String prefix, String name, com.android.resources.ResourceFolderType? folderType = null);
    method public static String describeCounts(int errorCount, int warningCount, boolean comma, boolean capitalize);
    method public static int editDistance(String s, String t, int max = 2147483647);
    method public static boolean endsWith(String string, String suffix);
    method public static String? findSubstring(String string, String? prefix, String? suffix);
    method public static String formatList(java.util.List<java.lang.String> strings, int maxItems = 2147483647);
    method public static String formatList(java.util.List<java.lang.String> strings, int maxItems = 2147483647, boolean sort = true, boolean useConjunction = false);
    method public static String? getAutoBoxedType(String primitive);
    method public static String getBaseName(String fileName);
    method public static int getChildCount(org.w3c.dom.Node node);
    method public static java.util.List<org.w3c.dom.Element> getChildren(org.w3c.dom.Node node);
    method public static java.io.File? getCommonParent(java.util.List<? extends java.io.File> files);
    method public static java.io.File? getCommonParent(java.io.File file1, java.io.File file2);
    method @kotlin.jvm.Throws(exceptionClasses=IOException::class) public static CharSequence getEncodedString(com.android.tools.lint.client.api.LintClient client, java.io.File file, boolean createString) throws java.io.IOException;
    method public static CharSequence getEncodedString(byte[]? data, boolean createString);
    method public static String getFileNameWithParent(com.android.tools.lint.client.api.LintClient client, java.io.File file);
    method public static String getFileNameWithParent(com.android.tools.lint.client.api.LintClient client, com.android.ide.common.util.PathString file);
    method public static java.util.List<java.lang.String> getFormattedParameters(String format, String errorMessage);
    method public static java.util.List<com.android.ide.common.rendering.api.StyleResourceValue>? getInheritedStyles(com.android.tools.lint.detector.api.Project project, com.android.tools.lint.client.api.LintClient client, String styleUrl);
    method public static String getInternalMethodName(com.intellij.psi.PsiMethod method);
    method public static String? getInternalName(com.intellij.psi.PsiClass psiClass);
    method public static com.intellij.pom.java.LanguageLevel getLanguageLevel(org.jetbrains.uast.UElement element, com.intellij.pom.java.LanguageLevel defaultLevel);
    method public static com.intellij.pom.java.LanguageLevel getLanguageLevel(com.intellij.psi.PsiElement element, com.intellij.pom.java.LanguageLevel defaultLevel);
    method public static com.intellij.pom.java.LanguageLevel getLanguageLevel(com.android.tools.lint.detector.api.Project project, com.intellij.pom.java.LanguageLevel defaultLevel);
    method public static String getLayoutName(java.io.File layoutFile);
    method public static com.android.ide.common.resources.configuration.LocaleQualifier? getLocale(String parent);
    method public static com.android.ide.common.resources.configuration.LocaleQualifier? getLocale(com.android.tools.lint.detector.api.XmlContext context);
    method public static String? getLocaleAndRegion(String folderName);
    method public static String? getMethodName(org.jetbrains.uast.UCallExpression call);
    method public static org.objectweb.asm.tree.AbstractInsnNode? getNextInstruction(org.objectweb.asm.tree.AbstractInsnNode node);
    method public static int getNextOpcode(org.objectweb.asm.tree.AbstractInsnNode node);
    method public static org.objectweb.asm.tree.AbstractInsnNode? getPrevInstruction(org.objectweb.asm.tree.AbstractInsnNode node);
    method public static int getPrevOpcode(org.objectweb.asm.tree.AbstractInsnNode node);
    method public static String? getPrimitiveType(String autoBoxedType);
    method public static java.util.List<com.android.ide.common.rendering.api.ResourceValue>? getStyleAttributes(com.android.tools.lint.detector.api.Project project, com.android.tools.lint.client.api.LintClient client, String styleUrl, String namespaceUri, String attribute);
    method public static org.jetbrains.uast.UMethod? getUMethod(com.intellij.psi.PsiMethod);
    method public static com.android.tools.lint.detector.api.Location guessGradleLocation(com.android.tools.lint.detector.api.Project project);
    method public static com.android.tools.lint.detector.api.Location guessGradleLocation(com.android.tools.lint.client.api.LintClient client, java.io.File projectDir, String? string);
    method public static boolean idReferencesMatch(String? id1, String? id2);
    method public static boolean isAnonymousClass(org.objectweb.asm.tree.ClassNode classNode);
    method public static boolean isDataBindingExpression(String expression);
    method public static boolean isEditableTo(String s, String t, int max);
    method public static boolean isEnglishResource(com.android.tools.lint.detector.api.XmlContext context, boolean assumeForBase);
    method public static boolean isFalseLiteral(com.intellij.psi.PsiElement? element);
    method public static boolean isFileBasedResourceType(com.android.resources.ResourceType type);
    method public static boolean isJava(com.intellij.psi.PsiElement? element);
    method public static boolean isJava(com.intellij.lang.Language? language);
    method public static boolean isJavaKeyword(String keyword);
    method public static boolean isJdkFolder(java.io.File homePath);
    method public static boolean isJreFolder(java.io.File homePath);
    method public static boolean isKotlin(com.intellij.psi.PsiElement? element);
    method public static boolean isKotlin(com.intellij.lang.Language? language);
    method public static boolean isKotlinHardKeyword(String keyword);
    method public static boolean isLayoutMarkerTag(org.w3c.dom.Element element);
    method public static boolean isLayoutMarkerTag(String tagName);
    method public static boolean isManifestFolder(java.io.File? dir);
    method public static boolean isManifestPlaceHolderExpression(String expression);
    method public static boolean isModelOlderThan(com.android.tools.lint.detector.api.Project project, int major, int minor, int micro, boolean defaultForNonGradleProjects = false);
    method public static boolean isNullLiteral(com.intellij.psi.PsiElement? element);
    method public static boolean isNumberString(String? s);
    method public static boolean isRootElement(org.w3c.dom.Element element);
    method public static boolean isSameResourceFile(java.io.File? file1, java.io.File? file2);
    method public static boolean isStaticInnerClass(org.objectweb.asm.tree.ClassNode classNode);
    method public static boolean isString(com.intellij.psi.PsiType type);
    method public static boolean isTrueLiteral(com.intellij.psi.PsiElement? element);
    method public static boolean isXmlFile(java.io.File file);
    method public static com.intellij.psi.PsiElement? nextNonWhitespace(com.intellij.psi.PsiElement? element);
    method public static com.intellij.psi.PsiElement? prevNonWhitespace(com.intellij.psi.PsiElement? element);
    method public static byte[]? readUrlData(com.android.tools.lint.client.api.LintClient client, String query, int timeout);
    method public static String? readUrlDataAsString(com.android.tools.lint.client.api.LintClient client, String query, int timeout);
    method public static String resolveManifestName(org.w3c.dom.Element element);
    method public static String? resolvePlaceHolder(com.android.tools.lint.detector.api.Project? project, String name);
    method public static String? resolvePlaceHolders(com.android.tools.lint.detector.api.Project? project, String value, java.util.Map<java.lang.String,java.lang.String>? fallbacks = null);
    method public static com.intellij.psi.PsiElement? skipParentheses(com.intellij.psi.PsiElement? element);
    method public static org.jetbrains.uast.UElement? skipParentheses(org.jetbrains.uast.UElement? element);
    method public static Iterable<java.lang.String> splitPath(String path);
    method public static boolean startsWith(String string, String prefix, int offset);
    method @Deprecated public static String stripIdPrefix(String? id);
  }

  public class LintFix {
    ctor protected LintFix(String?);
    ctor protected LintFix(String?, String?);
    method public com.android.tools.lint.detector.api.LintFix! autoFix(boolean, boolean);
    method public com.android.tools.lint.detector.api.LintFix! autoFix();
    method public static com.android.tools.lint.detector.api.LintFix.Builder create();
    method public static <T> T? getData(com.android.tools.lint.detector.api.LintFix?, Class<T!>);
    method @org.jetbrains.annotations.Nls public String? getDisplayName();
    method public String? getFamilyName();
    field public static final String TODO = "TODO";
    field @org.jetbrains.annotations.Nls protected final String? displayName;
    field @org.jetbrains.annotations.Nls protected final String? familyName;
    field public boolean independent;
    field public boolean robot;
  }

  public static class LintFix.Builder {
    method public com.android.tools.lint.detector.api.LintFix.GroupBuilder! alternatives();
    method public com.android.tools.lint.detector.api.LintFix! alternatives(com.android.tools.lint.detector.api.LintFix!...);
    method public com.android.tools.lint.detector.api.LintFix.GroupBuilder! composite();
    method public com.android.tools.lint.detector.api.LintFix! composite(com.android.tools.lint.detector.api.LintFix!...);
    method public com.android.tools.lint.detector.api.LintFix data(java.lang.Object!...);
    method public com.android.tools.lint.detector.api.LintFix.Builder! family(String!);
    method public com.android.tools.lint.detector.api.LintFix.GroupBuilder! group();
    method public com.android.tools.lint.detector.api.LintFix! group(com.android.tools.lint.detector.api.LintFix!...);
    method public com.android.tools.lint.detector.api.LintFix.FixMapBuilder! map();
    method public com.android.tools.lint.detector.api.LintFix.FixMapBuilder map(java.lang.Object!...);
    method public com.android.tools.lint.detector.api.LintFix.Builder! name(String);
    method public com.android.tools.lint.detector.api.LintFix.Builder! name(String, String);
    method public com.android.tools.lint.detector.api.LintFix.Builder! name(String, boolean);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder! replace();
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! set();
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! set(String?, String, String?);
    method public com.android.tools.lint.detector.api.LintFix.Builder! sharedName(String);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! unset();
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! unset(String?, String);
    field @org.jetbrains.annotations.Nls protected String! displayName;
    field @org.jetbrains.annotations.Nls protected String? familyName;
  }

  public static class LintFix.DataMap extends com.android.tools.lint.detector.api.LintFix implements java.lang.Iterable {
    method public <T> T? get(Class<T!>);
    method public Object? get(String);
    method public java.util.Iterator iterator();
    method public java.util.Set<java.lang.Object!>! keys();
  }

  public static class LintFix.FixMapBuilder {
    method public com.android.tools.lint.detector.api.LintFix build();
    method public <T> com.android.tools.lint.detector.api.LintFix.FixMapBuilder! put(T?);
    method public <T> com.android.tools.lint.detector.api.LintFix.FixMapBuilder! put(Class<? extends T>, T?);
    method public com.android.tools.lint.detector.api.LintFix.FixMapBuilder! put(String, Object?);
    field @org.jetbrains.annotations.Nls protected final String! displayName;
    field @org.jetbrains.annotations.Nls protected final String! familyName;
  }

  public static class LintFix.GroupBuilder {
    method public com.android.tools.lint.detector.api.LintFix.GroupBuilder! add(com.android.tools.lint.detector.api.LintFix);
    method public com.android.tools.lint.detector.api.LintFix build();
    method public com.android.tools.lint.detector.api.LintFix.GroupBuilder! join(com.android.tools.lint.detector.api.LintFix!...);
    method public com.android.tools.lint.detector.api.LintFix.GroupBuilder! name(String!);
    method public com.android.tools.lint.detector.api.LintFix.GroupBuilder! name(String, String);
    method public com.android.tools.lint.detector.api.LintFix.GroupBuilder! sharedName(String);
    method public com.android.tools.lint.detector.api.LintFix.GroupBuilder! type(com.android.tools.lint.detector.api.LintFix.GroupType);
    field @org.jetbrains.annotations.Nls protected String? familyName;
  }

  public enum LintFix.GroupType {
    enum_constant public static final com.android.tools.lint.detector.api.LintFix.GroupType ALTERNATIVES;
    enum_constant public static final com.android.tools.lint.detector.api.LintFix.GroupType COMPOSITE;
  }

  public static class LintFix.LintFixGroup extends com.android.tools.lint.detector.api.LintFix {
    ctor public LintFix.LintFixGroup(String?, String?, com.android.tools.lint.detector.api.LintFix.GroupType, java.util.List<com.android.tools.lint.detector.api.LintFix!>);
    field public final java.util.List<com.android.tools.lint.detector.api.LintFix!> fixes;
    field public final com.android.tools.lint.detector.api.LintFix.GroupType type;
  }

  public static class LintFix.ReplaceString extends com.android.tools.lint.detector.api.LintFix {
    method public String! expandBackReferences(java.util.regex.Matcher);
    method public static String! expandBackReferences(String, java.util.regex.Matcher);
    field public static final String INSERT_BEGINNING = "_lint_insert_begin_";
    field public static final String INSERT_END = "_lint_insert_end_";
    field @org.intellij.lang.annotations.Language("RegExp") public final String? oldPattern;
    field public final String? oldString;
    field public final com.android.tools.lint.detector.api.Location? range;
    field public final boolean reformat;
    field public final String replacement;
    field public final String? selectPattern;
    field public final boolean shortenNames;
  }

  public static class LintFix.ReplaceStringBuilder {
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder! all();
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder! autoFix(boolean, boolean);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder! autoFix();
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder! beginning();
    method public com.android.tools.lint.detector.api.LintFix build();
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder! end();
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder! independent(boolean);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder! name(String!);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder! name(String, String);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder! pattern(@org.intellij.lang.annotations.Language("RegExp") String!);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder! range(com.android.tools.lint.detector.api.Location);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder! reformat(boolean);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder! robot(boolean);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder! select(@org.intellij.lang.annotations.RegExp String?);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder! sharedName(String);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder! shortenNames();
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder! text(String!);
    method public com.android.tools.lint.detector.api.LintFix.ReplaceStringBuilder! with(String!);
    field @org.jetbrains.annotations.Nls protected String! displayName;
    field @org.jetbrains.annotations.Nls protected String? familyName;
  }

  public static class LintFix.SetAttribute extends com.android.tools.lint.detector.api.LintFix {
    field public final String attribute;
    field public final int dot;
    field public final int mark;
    field public final String? namespace;
    field public final com.android.tools.lint.detector.api.Location? range;
    field public final String? value;
  }

  public static class LintFix.SetAttributeBuilder {
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! android();
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! attribute(String);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! autoFix(boolean, boolean);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! autoFix();
    method public com.android.tools.lint.detector.api.LintFix build();
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! caret(int);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! caretBegin();
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! caretEnd();
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! independent(boolean);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! name(String!);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! name(String, String);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! namespace(String?);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! range(com.android.tools.lint.detector.api.Location);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! remove(String);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! robot(boolean);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! select(int, int);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! selectAll();
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! sharedName(String);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! todo(String?, String, String?, String?);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! todo(String?, String);
    method public com.android.tools.lint.detector.api.LintFix.SetAttributeBuilder! value(String?);
    field @org.jetbrains.annotations.Nls protected String! displayName;
    field @org.jetbrains.annotations.Nls protected String? familyName;
  }

  public class LintModelModuleAndroidLibraryProject extends com.android.tools.lint.detector.api.LintModelModuleLibraryProject {
    ctor public LintModelModuleAndroidLibraryProject(com.android.tools.lint.client.api.LintClient client, java.io.File dir, java.io.File referenceDir, com.android.tools.lint.model.LintModelDependency dependency, com.android.tools.lint.model.LintModelAndroidLibrary androidLibrary);
    method public final boolean hasDependency(com.android.tools.lint.model.LintModelDependency, String name);
  }

  public class LintModelModuleJavaLibraryProject extends com.android.tools.lint.detector.api.LintModelModuleLibraryProject {
    ctor public LintModelModuleJavaLibraryProject(com.android.tools.lint.client.api.LintClient client, java.io.File dir, java.io.File referenceDir, com.android.tools.lint.model.LintModelDependency dependency, com.android.tools.lint.model.LintModelJavaLibrary javaLibrary);
  }

  public class LintModelModuleLibraryProject extends com.android.tools.lint.detector.api.Project {
    ctor public LintModelModuleLibraryProject(com.android.tools.lint.client.api.LintClient client, java.io.File dir, java.io.File referenceDir, com.android.tools.lint.model.LintModelDependency dependency);
    method public final void addDirectLibrary(com.android.tools.lint.detector.api.Project project);
    method public final com.android.tools.lint.model.LintModelDependency getDependency();
    method public final void setExternalLibrary(boolean external);
    method public final void setMavenCoordinates(com.android.tools.lint.model.LintModelMavenName mc);
  }

  public class LintModelModuleProject extends com.android.tools.lint.detector.api.Project {
    ctor public LintModelModuleProject(com.android.tools.lint.client.api.LintClient client, java.io.File dir, java.io.File referenceDir, com.android.tools.lint.model.LintModelVariant variant, java.io.File? mergedManifest);
    method public final void addDirectLibrary(com.android.tools.lint.detector.api.Project project);
    method public final void setExternalLibrary(boolean external);
    method public final void setMavenCoordinates(com.android.tools.lint.model.LintModelMavenName mc);
  }

  public final class LintModelModuleProjectKt {
    method public static void addJars(com.android.tools.lint.model.LintModelExternalLibrary, java.util.List<java.io.File> list, boolean skipProvided);
  }

  public final class LintUtils {
    method @Deprecated public static boolean assertionsEnabled();
    method @Deprecated @java.lang.SafeVarargs public static <T> T? coalesce(T?... ts);
    method @Deprecated public static String computeResourceName(String prefix, String name, com.android.resources.ResourceFolderType? folderType = null);
    method @Deprecated public static String computeResourceName(String prefix, String name);
    method @Deprecated public static String describeCounts(int errorCount, int warningCount, boolean comma, boolean capitalize);
    method @Deprecated public static int editDistance(String s, String t, int max = 2147483647);
    method @Deprecated public static int editDistance(String s, String t);
    method @Deprecated public static boolean endsWith(String string, String suffix);
    method @Deprecated public static String? findSubstring(String string, String? prefix, String? suffix);
    method @Deprecated public static String formatList(java.util.List<java.lang.String> strings, int maxItems);
    method @Deprecated public static String formatList(java.util.List<java.lang.String> strings, int maxItems, boolean sort);
    method @Deprecated public static String? getAutoBoxedType(String primitive);
    method @Deprecated public static String getBaseName(String fileName);
    method @Deprecated public static int getChildCount(org.w3c.dom.Node node);
    method @Deprecated public static java.util.List<org.w3c.dom.Element> getChildren(org.w3c.dom.Node node);
    method @Deprecated public static java.io.File? getCommonParent(java.util.List<? extends java.io.File> files);
    method @Deprecated public static java.io.File? getCommonParent(java.io.File file1, java.io.File file2);
    method @Deprecated @kotlin.jvm.Throws(exceptionClasses=IOException::class) public static CharSequence getEncodedString(com.android.tools.lint.client.api.LintClient client, java.io.File file, boolean createString) throws java.io.IOException;
    method @Deprecated public static CharSequence getEncodedString(byte[]? data, boolean createString);
    method @Deprecated public static String getFileNameWithParent(com.android.tools.lint.client.api.LintClient client, java.io.File file);
    method @Deprecated public static String getFileNameWithParent(com.android.tools.lint.client.api.LintClient client, com.android.ide.common.util.PathString file);
    method @Deprecated public static java.util.List<java.lang.String> getFormattedParameters(String format, String errorMessage);
    method @Deprecated public static java.util.List<com.android.ide.common.rendering.api.StyleResourceValue>? getInheritedStyles(com.android.tools.lint.detector.api.Project project, com.android.tools.lint.client.api.LintClient client, String styleUrl);
    method @Deprecated public static String getInternalMethodName(com.intellij.psi.PsiMethod method);
    method @Deprecated public static String? getInternalName(com.intellij.psi.PsiClass psiClass);
    method @Deprecated public static com.intellij.pom.java.LanguageLevel getLanguageLevel(org.jetbrains.uast.UElement element, com.intellij.pom.java.LanguageLevel defaultLevel);
    method @Deprecated public static com.intellij.pom.java.LanguageLevel getLanguageLevel(com.intellij.psi.PsiElement element, com.intellij.pom.java.LanguageLevel defaultLevel);
    method @Deprecated public static String getLayoutName(java.io.File layoutFile);
    method @Deprecated public static com.android.ide.common.resources.configuration.LocaleQualifier? getLocale(String parent);
    method @Deprecated public static com.android.ide.common.resources.configuration.LocaleQualifier? getLocale(com.android.tools.lint.detector.api.XmlContext context);
    method @Deprecated public static String? getLocaleAndRegion(String folderName);
    method @Deprecated public static String? getMethodName(org.jetbrains.uast.UCallExpression call);
    method @Deprecated public static org.objectweb.asm.tree.AbstractInsnNode? getNextInstruction(org.objectweb.asm.tree.AbstractInsnNode node);
    method @Deprecated public static int getNextOpcode(org.objectweb.asm.tree.AbstractInsnNode node);
    method @Deprecated public static org.objectweb.asm.tree.AbstractInsnNode? getPrevInstruction(org.objectweb.asm.tree.AbstractInsnNode node);
    method @Deprecated public static int getPrevOpcode(org.objectweb.asm.tree.AbstractInsnNode node);
    method @Deprecated public static String? getPrimitiveType(String autoBoxedType);
    method @Deprecated public static java.util.List<com.android.ide.common.rendering.api.ResourceValue>? getStyleAttributes(com.android.tools.lint.detector.api.Project project, com.android.tools.lint.client.api.LintClient client, String styleUrl, String namespaceUri, String attribute);
    method @Deprecated public static com.android.tools.lint.detector.api.Location guessGradleLocation(com.android.tools.lint.detector.api.Project project);
    method @Deprecated public static com.android.tools.lint.detector.api.Location guessGradleLocation(com.android.tools.lint.client.api.LintClient client, java.io.File projectDir, String? string);
    method @Deprecated public static boolean idReferencesMatch(String? id1, String? id2);
    method @Deprecated public static boolean isAnonymousClass(org.objectweb.asm.tree.ClassNode classNode);
    method @Deprecated public static boolean isDataBindingExpression(String expression);
    method @Deprecated public static boolean isEditableTo(String s, String t, int max);
    method @Deprecated public static boolean isEnglishResource(com.android.tools.lint.detector.api.XmlContext context, boolean assumeForBase);
    method @Deprecated public static boolean isFalseLiteral(com.intellij.psi.PsiElement? element);
    method @Deprecated public static boolean isFileBasedResourceType(com.android.resources.ResourceType type);
    method @Deprecated public static boolean isJavaKeyword(String keyword);
    method @Deprecated public static boolean isKotlin(com.intellij.psi.PsiElement? element);
    method @Deprecated public static boolean isKotlin(com.intellij.lang.Language? language);
    method @Deprecated public static boolean isManifestFolder(java.io.File? dir);
    method @Deprecated public static boolean isManifestPlaceHolderExpression(String expression);
    method @Deprecated public static boolean isModelOlderThan(com.android.tools.lint.detector.api.Project project, int major, int minor, int micro, boolean defaultForNonGradleProjects = false);
    method @Deprecated public static boolean isModelOlderThan(com.android.tools.lint.detector.api.Project project, int major, int minor, int micro);
    method @Deprecated public static boolean isNullLiteral(com.intellij.psi.PsiElement? element);
    method @Deprecated public static boolean isRootElement(org.w3c.dom.Element element);
    method @Deprecated public static boolean isSameResourceFile(java.io.File? file1, java.io.File? file2);
    method @Deprecated public static boolean isStaticInnerClass(org.objectweb.asm.tree.ClassNode classNode);
    method @Deprecated public static boolean isString(com.intellij.psi.PsiType type);
    method @Deprecated public static boolean isTrueLiteral(com.intellij.psi.PsiElement? element);
    method @Deprecated public static boolean isXmlFile(java.io.File file);
    method @Deprecated public static com.intellij.psi.PsiElement? nextNonWhitespace(com.intellij.psi.PsiElement? element);
    method @Deprecated public static com.intellij.psi.PsiElement? prevNonWhitespace(com.intellij.psi.PsiElement? element);
    method @Deprecated @kotlin.jvm.Throws(exceptionClasses=IOException::class) public static byte[]? readUrlData(com.android.tools.lint.client.api.LintClient client, String query, int timeout) throws java.io.IOException;
    method @Deprecated @kotlin.jvm.Throws(exceptionClasses=IOException::class) public static String? readUrlDataAsString(com.android.tools.lint.client.api.LintClient client, String query, int timeout) throws java.io.IOException;
    method @Deprecated public static String resolveManifestName(org.w3c.dom.Element element);
    method @Deprecated public static com.intellij.psi.PsiElement? skipParentheses(com.intellij.psi.PsiElement? element);
    method @Deprecated public static org.jetbrains.uast.UElement? skipParentheses(org.jetbrains.uast.UElement? element);
    method @Deprecated public static Iterable<java.lang.String> splitPath(String path);
    method @Deprecated public static boolean startsWith(String string, String prefix, int offset);
    method @Deprecated public static String stripIdPrefix(String? id);
    field public static final com.android.tools.lint.detector.api.LintUtils INSTANCE;
  }

  @com.google.common.annotations.Beta public class Location {
    ctor protected Location(java.io.File file, com.android.tools.lint.detector.api.Position? start, com.android.tools.lint.detector.api.Position? end);
    method public static final com.android.tools.lint.detector.api.Location create(java.io.File file);
    method public static final com.android.tools.lint.detector.api.Location create(java.io.File file, com.android.ide.common.blame.SourcePosition position);
    method public static final com.android.tools.lint.detector.api.Location create(java.io.File file, com.android.tools.lint.detector.api.Position start, com.android.tools.lint.detector.api.Position? end);
    method public static final com.android.tools.lint.detector.api.Location create(java.io.File file, CharSequence? contents, int startOffset, int endOffset);
    method public static final com.android.tools.lint.detector.api.Location create(java.io.File file, String contents, int line);
    method public static final com.android.tools.lint.detector.api.Location create(java.io.File file, CharSequence contents, int line, String? patternStart, String? patternEnd, com.android.tools.lint.detector.api.Location.SearchHints? hints);
    method public final Object? getClientData();
    method public final com.android.tools.lint.detector.api.Position? getEnd();
    method public final java.io.File getFile();
    method public final String? getMessage();
    method public com.android.tools.lint.detector.api.Location? getSecondary();
    method public final Object? getSource();
    method public final <T> T? getSource(Class<T> clz);
    method public final com.android.tools.lint.detector.api.Position? getStart();
    method public boolean getVisible();
    method public final boolean isSelfExplanatory();
    method public final boolean isSingleLine();
    method public static final com.android.tools.lint.detector.api.Location reverse(com.android.tools.lint.detector.api.Location location);
    method public final void setClientData(Object? p);
    method public com.android.tools.lint.detector.api.Location setData(Object? clientData);
    method public final void setMessage(String? value);
    method public com.android.tools.lint.detector.api.Location setMessage(String message, boolean selfExplanatory);
    method public void setSecondary(com.android.tools.lint.detector.api.Location? p);
    method public com.android.tools.lint.detector.api.Location setSelfExplanatory(boolean selfExplanatory);
    method public final void setSource(Object? p);
    method public final com.android.tools.lint.detector.api.Location setSource(Object? source);
    method public void setVisible(boolean p);
    method public final com.android.tools.lint.detector.api.Location withSecondary(com.android.tools.lint.detector.api.Location secondary, String message, boolean selfExplanatory = false);
    method public final com.android.tools.lint.detector.api.Location withSecondary(com.android.tools.lint.detector.api.Location secondary, String message);
    method public final com.android.tools.lint.detector.api.Location withSource(Object source);
    property public final Object? clientData;
    property public final String? message;
    property public com.android.tools.lint.detector.api.Location? secondary;
    property public final Object? source;
    property public boolean visible;
    field public static final com.android.tools.lint.detector.api.Location.Companion Companion;
    field public static final com.android.tools.lint.detector.api.Location NONE;
  }

  public static final class Location.Companion {
    method public com.android.tools.lint.detector.api.Location create(java.io.File file);
    method public com.android.tools.lint.detector.api.Location create(java.io.File file, com.android.ide.common.blame.SourcePosition position);
    method public com.android.tools.lint.detector.api.Location create(java.io.File file, com.android.tools.lint.detector.api.Position start, com.android.tools.lint.detector.api.Position? end);
    method public com.android.tools.lint.detector.api.Location create(java.io.File file, CharSequence? contents, int startOffset, int endOffset);
    method public com.android.tools.lint.detector.api.Location create(java.io.File file, String contents, int line);
    method public com.android.tools.lint.detector.api.Location create(java.io.File file, CharSequence contents, int line, String? patternStart, String? patternEnd, com.android.tools.lint.detector.api.Location.SearchHints? hints);
    method public com.android.tools.lint.detector.api.Location reverse(com.android.tools.lint.detector.api.Location location);
  }

  public static final class Location.DefaultLocationHandle implements com.android.tools.lint.detector.api.Location.Handle {
    ctor public Location.DefaultLocationHandle(com.android.tools.lint.detector.api.Context context, int startOffset, int endOffset);
    method public Object? getClientData();
    method public com.android.tools.lint.detector.api.Location resolve();
    method public void setClientData(Object? p);
    property public Object? clientData;
  }

  public static interface Location.Handle {
    method public Object? getClientData();
    method public com.android.tools.lint.detector.api.Location resolve();
    method public void setClientData(Object? p);
    property public abstract Object? clientData;
  }

  public static final class Location.ResourceItemHandle implements com.android.tools.lint.detector.api.Location.Handle {
    ctor public Location.ResourceItemHandle(com.android.ide.common.resources.ResourceItem item);
    method public Object? getClientData();
    method public com.android.tools.lint.detector.api.Location resolve();
    method public void setClientData(Object? clientData);
    property public Object? clientData;
  }

  public enum Location.SearchDirection {
    method public static com.android.tools.lint.detector.api.Location.SearchDirection valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static com.android.tools.lint.detector.api.Location.SearchDirection[] values();
    enum_constant public static final com.android.tools.lint.detector.api.Location.SearchDirection BACKWARD;
    enum_constant public static final com.android.tools.lint.detector.api.Location.SearchDirection EOL_BACKWARD;
    enum_constant public static final com.android.tools.lint.detector.api.Location.SearchDirection EOL_NEAREST;
    enum_constant public static final com.android.tools.lint.detector.api.Location.SearchDirection FORWARD;
    enum_constant public static final com.android.tools.lint.detector.api.Location.SearchDirection NEAREST;
  }

  public static final class Location.SearchHints {
    method public static com.android.tools.lint.detector.api.Location.SearchHints create(com.android.tools.lint.detector.api.Location.SearchDirection direction);
    method public com.android.tools.lint.detector.api.Location.SearchDirection getDirection();
    method public boolean isConstructor();
    method public boolean isJavaSymbol();
    method public boolean isWholeWord();
    method public com.android.tools.lint.detector.api.Location.SearchHints matchConstructor();
    method public com.android.tools.lint.detector.api.Location.SearchHints matchJavaSymbol();
    method public com.android.tools.lint.detector.api.Location.SearchHints matchWholeWord();
    property public final boolean isConstructor;
    property public final boolean isJavaSymbol;
    property public final boolean isWholeWord;
    field public static final com.android.tools.lint.detector.api.Location.SearchHints.Companion Companion;
  }

  public static final class Location.SearchHints.Companion {
    method public com.android.tools.lint.detector.api.Location.SearchHints create(com.android.tools.lint.detector.api.Location.SearchDirection direction);
  }

  public interface OtherFileScanner extends com.android.tools.lint.detector.api.FileScanner {
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Scope> getApplicableFiles();
  }

  @com.google.common.annotations.Beta public enum Platform {
    method public static com.android.tools.lint.detector.api.Platform valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static com.android.tools.lint.detector.api.Platform[] values();
    enum_constant public static final com.android.tools.lint.detector.api.Platform ANDROID;
    enum_constant public static final com.android.tools.lint.detector.api.Platform JDK;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Platform> ANDROID_SET;
    field public static final com.android.tools.lint.detector.api.Platform.Companion Companion;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Platform> JDK_SET;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Platform> UNSPECIFIED;
  }

  public static final class Platform.Companion {
  }

  @com.google.common.annotations.Beta public abstract class Position {
    ctor public Position();
    method public abstract int getColumn();
    method public abstract int getLine();
    method public abstract int getOffset();
    method public boolean sameLine(com.android.tools.lint.detector.api.Position end);
    property public abstract int column;
    property public abstract int line;
    property public abstract int offset;
  }

  @com.google.common.annotations.Beta public class Project {
    ctor protected Project(com.android.tools.lint.client.api.LintClient, java.io.File, java.io.File);
    method public void addFile(java.io.File);
    method public static com.android.tools.lint.detector.api.Project create(com.android.tools.lint.client.api.LintClient, java.io.File, java.io.File);
    method public Boolean? dependsOn(String);
    method public java.util.List<com.android.tools.lint.detector.api.Project!> getAllLibraries();
    method public java.util.List<java.lang.String!>? getApplicableDensities();
    method public String? getApplicationId();
    method public java.util.List<java.io.File!> getAssetFolders();
    method public com.android.tools.lint.model.LintModelAndroidLibrary! getBuildLibraryModel();
    method public com.android.tools.lint.model.LintModelModule? getBuildModule();
    method public int getBuildSdk();
    method public com.android.sdklib.IAndroidTarget? getBuildTarget();
    method public String? getBuildTargetHash();
    method public com.android.repository.Revision? getBuildToolsRevision();
    method public com.android.tools.lint.model.LintModelVariant? getBuildVariant();
    method public com.android.tools.lint.client.api.LintClient getClient();
    method public com.android.tools.lint.client.api.Configuration getConfiguration(com.android.tools.lint.client.api.LintDriver?);
    method public java.util.Set<com.android.tools.lint.detector.api.Desugaring!>! getDesugaring();
    method public java.io.File getDir();
    method public java.util.List<com.android.tools.lint.detector.api.Project!> getDirectLibraries();
    method public String getDisplayPath(java.io.File);
    method public java.util.List<java.io.File!> getGeneratedResourceFolders();
    method public java.util.List<java.io.File!> getGeneratedSourceFolders();
    method public java.util.List<java.io.File!> getGradleBuildScripts();
    method public com.android.ide.common.repository.GradleVersion? getGradleModelVersion();
    method public com.intellij.openapi.project.Project? getIdeaProject();
    method public java.util.List<java.io.File!> getJavaClassFolders();
    method public com.intellij.pom.java.LanguageLevel getJavaLanguageLevel();
    method public java.util.List<java.io.File!> getJavaLibraries(boolean);
    method public java.util.List<java.io.File!> getJavaSourceFolders();
    method public org.jetbrains.kotlin.config.LanguageVersionSettings getKotlinLanguageLevel();
    method public java.util.List<java.io.File!> getManifestFiles();
    method public com.android.tools.lint.model.LintModelMavenName? getMavenCoordinate();
    method public org.w3c.dom.Document? getMergedManifest();
    method public int getMinSdk();
    method public com.android.sdklib.AndroidVersion getMinSdkVersion();
    method public String getName();
    method public String? getPackage();
    method public java.util.List<java.io.File!> getProguardFiles();
    method public java.util.List<java.io.File!> getPropertyFiles();
    method public java.io.File getReferenceDir();
    method public String getRelativePath(java.io.File);
    method public static String getRelativePath(java.io.File?, java.io.File);
    method public boolean getReportIssues();
    method public java.util.List<java.io.File!> getResourceFolders();
    method public com.android.ide.common.rendering.api.ResourceNamespace getResourceNamespace();
    method public com.android.ide.common.repository.ResourceVisibilityLookup getResourceVisibility();
    method public com.android.tools.lint.client.api.SdkInfo getSdkInfo();
    method public java.util.List<java.io.File!>? getSubset();
    method public java.util.Map<java.lang.String!,java.lang.String!> getSuperClassMap();
    method public int getTargetSdk();
    method public com.android.sdklib.AndroidVersion getTargetSdkVersion();
    method public java.util.List<java.io.File!> getTestLibraries();
    method public java.util.List<java.io.File!> getTestSourceFolders();
    method public com.android.tools.lint.model.LintModelModuleType getType();
    method public boolean hasDynamicFeatures();
    method protected void initialize();
    method public boolean isAndroidProject();
    method public static boolean isAospBuildEnvironment();
    method public static boolean isAospFrameworksProject(java.io.File);
    method public static boolean isAospFrameworksRelatedProject(java.io.File);
    method public boolean isCoreLibraryDesugaringEnabled();
    method public boolean isDesugaring(com.android.tools.lint.detector.api.Desugaring!);
    method public boolean isExternalLibrary();
    method public boolean isGradleProject();
    method public boolean isLibrary();
    method public boolean isMergingManifests();
    method public void mergeFolders(com.android.tools.lint.detector.api.Project);
    method public void readManifest(org.w3c.dom.Document);
    method public void setBuildTargetHash(String!);
    method public void setDirectLibraries(java.util.List<com.android.tools.lint.detector.api.Project!>);
    method public void setIdeaProject(com.intellij.openapi.project.Project?);
    method public void setName(String);
    method public void setReportIssues(boolean);
    field protected java.util.List<com.android.tools.lint.detector.api.Project!>! allLibraries;
    field protected Boolean! appCompat;
    field protected java.util.List<java.io.File!>! assetFolders;
    field protected int buildSdk;
    field protected String! buildTargetHash;
    field protected final com.android.tools.lint.client.api.LintClient! client;
    field protected com.android.tools.lint.client.api.Configuration! configuration;
    field protected java.util.Set<com.android.tools.lint.detector.api.Desugaring!>! desugaring;
    field protected final java.io.File! dir;
    field protected java.util.List<com.android.tools.lint.detector.api.Project!>! directLibraries;
    field protected boolean externalLibrary;
    field protected java.util.List<java.io.File!>! files;
    field protected java.util.List<java.io.File!>! generatedResourceFolders;
    field protected java.util.List<java.io.File!>! generatedSourceFolders;
    field protected java.util.List<java.io.File!>! gradleFiles;
    field public Boolean! gradleProject;
    field protected java.util.List<java.io.File!>! javaClassFolders;
    field protected com.intellij.pom.java.LanguageLevel! javaLanguageLevel;
    field protected java.util.List<java.io.File!>! javaLibraries;
    field protected java.util.List<java.io.File!>! javaSourceFolders;
    field protected org.jetbrains.kotlin.config.LanguageVersionSettings! kotlinLanguageLevel;
    field protected Boolean! leanback;
    field protected boolean library;
    field protected java.util.List<java.io.File!>! manifestFiles;
    field protected com.android.sdklib.AndroidVersion! manifestMinSdk;
    field protected com.android.sdklib.AndroidVersion! manifestTargetSdk;
    field protected com.android.tools.lint.model.LintModelMavenName! mavenCoordinates;
    field protected boolean mergeManifests;
    field protected String! name;
    field protected java.util.List<java.io.File!>! nonProvidedJavaLibraries;
    field protected String! pkg;
    field protected java.util.List<java.io.File!>! proguardFiles;
    field protected String! proguardPath;
    field protected final java.io.File! referenceDir;
    field protected boolean reportIssues;
    field protected java.util.List<java.io.File!>! resourceFolders;
    field protected com.android.tools.lint.client.api.SdkInfo! sdkInfo;
    field protected Boolean! supportLib;
    field protected com.android.sdklib.IAndroidTarget! target;
    field protected java.util.List<java.io.File!>! testLibraries;
    field protected java.util.List<java.io.File!>! testSourceFolders;
  }

  @com.google.common.annotations.Beta public class ResourceContext extends com.android.tools.lint.detector.api.Context {
    ctor public ResourceContext(com.android.tools.lint.client.api.LintDriver driver, com.android.tools.lint.detector.api.Project project, com.android.tools.lint.detector.api.Project? main, java.io.File file, com.android.resources.ResourceFolderType? resourceFolderType, String? contents);
    method public final com.android.ide.common.resources.configuration.FolderConfiguration? getFolderConfiguration();
    method public final int getFolderVersion();
    method protected java.io.File? getResourceFolder();
    method public final com.android.resources.ResourceFolderType? getResourceFolderType();
    property public final int folderVersion;
    property protected java.io.File? resourceFolder;
  }

  public class ResourceEvaluator {
    ctor public ResourceEvaluator(com.android.tools.lint.client.api.JavaEvaluator?);
    method public com.android.tools.lint.detector.api.ResourceEvaluator! allowDereference(boolean);
    method public static java.util.EnumSet<com.android.resources.ResourceType!>! getAnyRes();
    method public static com.android.resources.ResourceUrl? getResource(com.android.tools.lint.client.api.JavaEvaluator?, com.intellij.psi.PsiElement);
    method public static com.android.resources.ResourceUrl? getResource(com.android.tools.lint.client.api.JavaEvaluator, org.jetbrains.uast.UElement);
    method public com.android.resources.ResourceUrl? getResource(org.jetbrains.uast.UElement?);
    method public com.android.resources.ResourceUrl? getResource(com.intellij.psi.PsiElement?);
    method public static com.android.resources.ResourceUrl? getResourceConstant(com.intellij.psi.PsiElement);
    method public static com.android.resources.ResourceUrl? getResourceConstant(org.jetbrains.uast.UElement);
    method public static java.util.EnumSet<com.android.resources.ResourceType!>? getResourceTypes(com.android.tools.lint.client.api.JavaEvaluator?, com.intellij.psi.PsiElement);
    method public static java.util.EnumSet<com.android.resources.ResourceType!>? getResourceTypes(com.android.tools.lint.client.api.JavaEvaluator?, org.jetbrains.uast.UElement);
    method public java.util.EnumSet<com.android.resources.ResourceType!>? getResourceTypes(org.jetbrains.uast.UElement?);
    method public java.util.EnumSet<com.android.resources.ResourceType!>? getResourceTypes(com.intellij.psi.PsiElement?);
    method public static com.android.resources.ResourceType? getTypeFromAnnotationSignature(String);
    method public static java.util.EnumSet<com.android.resources.ResourceType!>? getTypesFromAnnotations(com.intellij.psi.PsiAnnotation![]);
    method public static java.util.EnumSet<com.android.resources.ResourceType!>? getTypesFromAnnotations(java.util.List<org.jetbrains.uast.UAnnotation!>);
    field public static final com.android.support.AndroidxName! ANIMATOR_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! ANIM_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! ANY_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! ARRAY_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! ATTR_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! BOOL_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! COLOR_INT_ANNOTATION;
    field public static final com.android.resources.ResourceType COLOR_INT_MARKER_TYPE;
    field public static final com.android.support.AndroidxName! COLOR_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! DIMENSION_ANNOTATION;
    field public static final com.android.resources.ResourceType DIMENSION_MARKER_TYPE;
    field public static final com.android.support.AndroidxName! DIMEN_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! DRAWABLE_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! FONT_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! FRACTION_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! ID_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! INTEGER_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! INTERPOLATOR_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! LAYOUT_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! MENU_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! NAVIGATION_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! PLURALS_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! PX_ANNOTATION;
    field public static final com.android.support.AndroidxName! RAW_RES_ANNOTATION;
    field public static final String RES_SUFFIX = "Res";
    field public static final com.android.support.AndroidxName! STRING_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! STYLEABLE_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! STYLE_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! TRANSITION_RES_ANNOTATION;
    field public static final com.android.support.AndroidxName! XML_RES_ANNOTATION;
  }

  public interface ResourceFolderScanner {
    method public boolean appliesTo(com.android.resources.ResourceFolderType folderType);
    method public void checkFolder(com.android.tools.lint.detector.api.ResourceContext context, String folderName);
  }

  @com.google.common.annotations.Beta public abstract class ResourceXmlDetector extends com.android.tools.lint.detector.api.Detector implements com.android.tools.lint.detector.api.XmlScanner {
    ctor public ResourceXmlDetector();
  }

  @com.google.common.annotations.Beta public enum Scope {
    method public static final boolean checkSingleFile(java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scopes);
    method public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> infer(java.util.Collection<? extends com.android.tools.lint.detector.api.Project>? projects);
    method public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> intersect(java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scope1, java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scope2);
    method public static com.android.tools.lint.detector.api.Scope valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static com.android.tools.lint.detector.api.Scope[] values();
    enum_constant public static final com.android.tools.lint.detector.api.Scope ALL_CLASS_FILES;
    enum_constant public static final com.android.tools.lint.detector.api.Scope ALL_JAVA_FILES;
    enum_constant public static final com.android.tools.lint.detector.api.Scope ALL_RESOURCE_FILES;
    enum_constant public static final com.android.tools.lint.detector.api.Scope BINARY_RESOURCE_FILE;
    enum_constant public static final com.android.tools.lint.detector.api.Scope CLASS_FILE;
    enum_constant public static final com.android.tools.lint.detector.api.Scope GRADLE_FILE;
    enum_constant public static final com.android.tools.lint.detector.api.Scope JAVA_FILE;
    enum_constant public static final com.android.tools.lint.detector.api.Scope JAVA_LIBRARIES;
    enum_constant public static final com.android.tools.lint.detector.api.Scope MANIFEST;
    enum_constant public static final com.android.tools.lint.detector.api.Scope OTHER;
    enum_constant public static final com.android.tools.lint.detector.api.Scope PROGUARD_FILE;
    enum_constant public static final com.android.tools.lint.detector.api.Scope PROPERTY_FILE;
    enum_constant public static final com.android.tools.lint.detector.api.Scope RESOURCE_FILE;
    enum_constant public static final com.android.tools.lint.detector.api.Scope RESOURCE_FOLDER;
    enum_constant public static final com.android.tools.lint.detector.api.Scope TEST_SOURCES;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> ALL;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> ALL_CLASSES_AND_LIBRARIES;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> ALL_RESOURCES_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> BINARY_RESOURCE_FILE_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> CLASS_AND_ALL_RESOURCE_FILES;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> CLASS_FILE_SCOPE;
    field public static final com.android.tools.lint.detector.api.Scope.Companion Companion;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> EMPTY;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> GRADLE_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> JAVA_AND_RESOURCE_FILES;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> JAVA_FILE_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> JAVA_LIBRARY_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> MANIFEST_AND_RESOURCE_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> MANIFEST_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> OTHER_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> PROGUARD_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> PROPERTY_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> RESOURCE_FILE_SCOPE;
    field public static final java.util.EnumSet<com.android.tools.lint.detector.api.Scope> RESOURCE_FOLDER_SCOPE;
  }

  public static final class Scope.Companion {
    method public boolean checkSingleFile(java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scopes);
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Scope> infer(java.util.Collection<? extends com.android.tools.lint.detector.api.Project>? projects);
    method public java.util.EnumSet<com.android.tools.lint.detector.api.Scope> intersect(java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scope1, java.util.EnumSet<com.android.tools.lint.detector.api.Scope> scope2);
  }

  @com.google.common.annotations.Beta public enum Severity {
    method public static final com.android.tools.lint.detector.api.Severity? fromName(String name);
    method public final String getDescription();
    method public final boolean isError();
    method public static final com.android.tools.lint.detector.api.Severity max(com.android.tools.lint.detector.api.Severity severity1, com.android.tools.lint.detector.api.Severity severity2);
    method public static final com.android.tools.lint.detector.api.Severity min(com.android.tools.lint.detector.api.Severity severity1, com.android.tools.lint.detector.api.Severity severity2);
    method public static com.android.tools.lint.detector.api.Severity valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static com.android.tools.lint.detector.api.Severity[] values();
    property public final boolean isError;
    enum_constant public static final com.android.tools.lint.detector.api.Severity ERROR;
    enum_constant public static final com.android.tools.lint.detector.api.Severity FATAL;
    enum_constant public static final com.android.tools.lint.detector.api.Severity IGNORE;
    enum_constant public static final com.android.tools.lint.detector.api.Severity INFORMATIONAL;
    enum_constant public static final com.android.tools.lint.detector.api.Severity WARNING;
    field public static final com.android.tools.lint.detector.api.Severity.Companion Companion;
  }

  public static final class Severity.Companion {
    method public com.android.tools.lint.detector.api.Severity? fromName(String name);
    method public com.android.tools.lint.detector.api.Severity max(com.android.tools.lint.detector.api.Severity severity1, com.android.tools.lint.detector.api.Severity severity2);
    method public com.android.tools.lint.detector.api.Severity min(com.android.tools.lint.detector.api.Severity severity1, com.android.tools.lint.detector.api.Severity severity2);
  }

  public interface SourceCodeScanner extends com.android.tools.lint.detector.api.FileScanner {
    method public void analyzeCallGraph(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.interprocedural.CallGraphResult callGraph);
    method public java.util.List<java.lang.String>? applicableAnnotations();
    method public java.util.List<java.lang.String>? applicableSuperClasses();
    method public boolean appliesToResourceRefs();
    method public com.android.tools.lint.client.api.UElementHandler? createUastHandler(com.android.tools.lint.detector.api.JavaContext context);
    method public java.util.List<java.lang.String>? getApplicableConstructorTypes();
    method public java.util.List<java.lang.String>? getApplicableMethodNames();
    method public java.util.List<java.lang.String>? getApplicableReferenceNames();
    method public java.util.List<java.lang.Class<? extends org.jetbrains.uast.UElement>>? getApplicableUastTypes();
    method public boolean inheritAnnotation(String annotation);
    method public boolean isApplicableAnnotationUsage(com.android.tools.lint.detector.api.AnnotationUsageType type);
    method public boolean isCallGraphRequired();
    method @Deprecated public void visitAnnotationUsage(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement usage, com.android.tools.lint.detector.api.AnnotationUsageType type, org.jetbrains.uast.UAnnotation annotation, String qualifiedName, com.intellij.psi.PsiMethod? method, java.util.List<? extends org.jetbrains.uast.UAnnotation> annotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allMemberAnnotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allClassAnnotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allPackageAnnotations);
    method @Deprecated public void visitAnnotationUsage(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement usage, com.android.tools.lint.detector.api.AnnotationUsageType type, org.jetbrains.uast.UAnnotation annotation, String qualifiedName, com.intellij.psi.PsiMethod? method, com.intellij.psi.PsiElement? referenced, java.util.List<? extends org.jetbrains.uast.UAnnotation> annotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allMemberAnnotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allClassAnnotations, java.util.List<? extends org.jetbrains.uast.UAnnotation> allPackageAnnotations);
    method public void visitClass(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UClass declaration);
    method public void visitClass(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.ULambdaExpression lambda);
    method public void visitConstructor(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UCallExpression node, com.intellij.psi.PsiMethod constructor);
    method @Deprecated public void visitMethod(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UCallExpression node, com.intellij.psi.PsiMethod method);
    method public void visitMethodCall(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UCallExpression node, com.intellij.psi.PsiMethod method);
    method public void visitReference(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UReferenceExpression reference, com.intellij.psi.PsiElement referenced);
    method public void visitResourceReference(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement node, com.android.resources.ResourceType type, String name, boolean isFramework);
  }

  @com.google.common.annotations.Beta public enum Speed {
    method public String getDisplayName();
    enum_constant public static final com.android.tools.lint.detector.api.Speed FAST;
    enum_constant public static final com.android.tools.lint.detector.api.Speed NORMAL;
    enum_constant public static final com.android.tools.lint.detector.api.Speed REALLY_SLOW;
    enum_constant public static final com.android.tools.lint.detector.api.Speed SLOW;
  }

  public enum TextFormat {
    method public final String convertTo(String message, com.android.tools.lint.detector.api.TextFormat to);
    method public final String toHtml(String text);
    method public final String toText(String text);
    method public static com.android.tools.lint.detector.api.TextFormat valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static com.android.tools.lint.detector.api.TextFormat[] values();
    enum_constant public static final com.android.tools.lint.detector.api.TextFormat HTML;
    enum_constant public static final com.android.tools.lint.detector.api.TextFormat HTML_WITH_UNICODE;
    enum_constant public static final com.android.tools.lint.detector.api.TextFormat RAW;
    enum_constant public static final com.android.tools.lint.detector.api.TextFormat TEXT;
    field public static final com.android.tools.lint.detector.api.TextFormat.Companion Companion;
    field public static final String HTTPS_PREFIX = "https://";
    field public static final String HTTP_PREFIX = "http://";
  }

  public static final class TextFormat.Companion {
    method public int findUrlEnd(String text, int start);
  }

  public class TypeEvaluator {
    ctor public TypeEvaluator(com.android.tools.lint.detector.api.JavaContext?);
    method public com.intellij.psi.PsiType? evaluate(com.intellij.psi.PsiElement?);
    method public static com.intellij.psi.PsiType? evaluate(org.jetbrains.uast.UElement?);
    method public static com.intellij.psi.PsiType? evaluate(com.android.tools.lint.detector.api.JavaContext, com.intellij.psi.PsiElement);
  }

  public final class UastLintUtils {
    ctor public UastLintUtils();
    method public static boolean areIdentifiersEqual(org.jetbrains.uast.UExpression first, org.jetbrains.uast.UExpression second);
    method public static boolean containsAnnotation(java.util.List<? extends org.jetbrains.uast.UAnnotation> list, org.jetbrains.uast.UAnnotation annotation);
    method public static boolean containsAnnotation(java.util.List<? extends org.jetbrains.uast.UAnnotation> list, String qualifiedName);
    method public static org.jetbrains.uast.UExpression? findLastAssignment(com.intellij.psi.PsiVariable variable, org.jetbrains.uast.UElement call);
    method public static Object? findLastValue(com.intellij.psi.PsiVariable variable, org.jetbrains.uast.UElement call, com.android.tools.lint.detector.api.ConstantEvaluator evaluator);
    method public static Boolean? getAnnotationBooleanValue(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public static boolean getAnnotationBooleanValue(org.jetbrains.uast.UAnnotation? annotation, String name, boolean defaultValue);
    method public static Double? getAnnotationDoubleValue(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public static double getAnnotationDoubleValue(org.jetbrains.uast.UAnnotation? annotation, String name, double defaultValue);
    method public static Long? getAnnotationLongValue(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public static long getAnnotationLongValue(org.jetbrains.uast.UAnnotation? annotation, String name, long defaultValue);
    method public static String? getAnnotationStringValue(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public static String![]? getAnnotationStringValues(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public static org.jetbrains.uast.UExpression? getAnnotationValue(org.jetbrains.uast.UAnnotation annotation);
    method public static boolean getBoolean(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UAnnotation annotation, String name, boolean defaultValue);
    method public static String getClassName(com.intellij.psi.PsiClassType type);
    method public static String getClassName(com.intellij.psi.PsiClass psiClass);
    method public static com.intellij.psi.PsiFile? getContainingFile(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement? element);
    method public static com.intellij.psi.PsiFile? getContainingFile(com.intellij.psi.PsiElement? element);
    method public static double getDoubleAttribute(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UAnnotation annotation, String name, double defaultValue);
    method public static String? getIdentifier(org.jetbrains.uast.UExpression expression);
    method public static long getLongAttribute(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UAnnotation annotation, String name, long defaultValue);
    method public static com.intellij.psi.PsiFile? getPsiFile(org.jetbrains.uast.UFile? file);
    method public static String? getQualifiedName(com.intellij.psi.PsiElement element);
    method public static String? getReferenceName(org.jetbrains.uast.UReferenceExpression expression);
    method public static boolean isMinusOne(org.jetbrains.uast.UElement argument);
    method public static boolean isNumber(org.jetbrains.uast.UElement argument);
    method public static boolean isZero(org.jetbrains.uast.UElement argument);
    method public static com.intellij.psi.PsiElement? resolve(com.android.tools.lint.detector.api.ExternalReferenceExpression expression, org.jetbrains.uast.UElement context);
    method public static com.android.tools.lint.client.api.ResourceReference? toAndroidReferenceViaResolve(org.jetbrains.uast.UElement element);
    method public static org.jetbrains.uast.UDeclaration? tryResolveUDeclaration(org.jetbrains.uast.UElement);
    field public static final com.android.tools.lint.detector.api.UastLintUtils.Companion Companion;
  }

  public static final class UastLintUtils.Companion {
    method public boolean areIdentifiersEqual(org.jetbrains.uast.UExpression first, org.jetbrains.uast.UExpression second);
    method public boolean containsAnnotation(java.util.List<? extends org.jetbrains.uast.UAnnotation> list, org.jetbrains.uast.UAnnotation annotation);
    method public boolean containsAnnotation(java.util.List<? extends org.jetbrains.uast.UAnnotation> list, String qualifiedName);
    method public org.jetbrains.uast.UExpression? findLastAssignment(com.intellij.psi.PsiVariable variable, org.jetbrains.uast.UElement call);
    method public Object? findLastValue(com.intellij.psi.PsiVariable variable, org.jetbrains.uast.UElement call, com.android.tools.lint.detector.api.ConstantEvaluator evaluator);
    method public Boolean? getAnnotationBooleanValue(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public boolean getAnnotationBooleanValue(org.jetbrains.uast.UAnnotation? annotation, String name, boolean defaultValue);
    method public Double? getAnnotationDoubleValue(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public double getAnnotationDoubleValue(org.jetbrains.uast.UAnnotation? annotation, String name, double defaultValue);
    method public Long? getAnnotationLongValue(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public long getAnnotationLongValue(org.jetbrains.uast.UAnnotation? annotation, String name, long defaultValue);
    method public String? getAnnotationStringValue(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public String![]? getAnnotationStringValues(org.jetbrains.uast.UAnnotation? annotation, String name);
    method public org.jetbrains.uast.UExpression? getAnnotationValue(org.jetbrains.uast.UAnnotation annotation);
    method public boolean getBoolean(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UAnnotation annotation, String name, boolean defaultValue);
    method public String getClassName(com.intellij.psi.PsiClassType type);
    method public String getClassName(com.intellij.psi.PsiClass psiClass);
    method public com.intellij.psi.PsiFile? getContainingFile(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement? element);
    method public com.intellij.psi.PsiFile? getContainingFile(com.intellij.psi.PsiElement? element);
    method public double getDoubleAttribute(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UAnnotation annotation, String name, double defaultValue);
    method public String? getIdentifier(org.jetbrains.uast.UExpression expression);
    method public long getLongAttribute(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UAnnotation annotation, String name, long defaultValue);
    method public com.intellij.psi.PsiFile? getPsiFile(org.jetbrains.uast.UFile? file);
    method public String? getQualifiedName(com.intellij.psi.PsiElement element);
    method public String? getReferenceName(org.jetbrains.uast.UReferenceExpression expression);
    method public boolean isMinusOne(org.jetbrains.uast.UElement argument);
    method public boolean isNumber(org.jetbrains.uast.UElement argument);
    method public boolean isZero(org.jetbrains.uast.UElement argument);
    method public com.intellij.psi.PsiElement? resolve(com.android.tools.lint.detector.api.ExternalReferenceExpression expression, org.jetbrains.uast.UElement context);
    method public com.android.tools.lint.client.api.ResourceReference? toAndroidReferenceViaResolve(org.jetbrains.uast.UElement element);
    method public org.jetbrains.uast.UDeclaration? tryResolveUDeclaration(org.jetbrains.uast.UElement);
  }

  @com.google.common.annotations.Beta public class XmlContext extends com.android.tools.lint.detector.api.ResourceContext {
    ctor public XmlContext(com.android.tools.lint.client.api.LintDriver driver, com.android.tools.lint.detector.api.Project project, com.android.tools.lint.detector.api.Project? main, java.io.File file, com.android.resources.ResourceFolderType? folderType, com.android.tools.lint.client.api.XmlParser parser, String contents, org.w3c.dom.Document document);
    method public final com.android.tools.lint.detector.api.Location.Handle createLocationHandle(org.w3c.dom.Node node);
    method public final com.android.tools.lint.detector.api.Location getElementLocation(org.w3c.dom.Element element, org.w3c.dom.Node? node = null, String? namespace = null, String? attribute = null);
    method public final com.android.tools.lint.detector.api.Location getElementLocation(org.w3c.dom.Element element);
    method public final com.android.tools.lint.detector.api.Location getLocation(org.w3c.dom.Node node);
    method public final com.android.tools.lint.detector.api.Location getLocation(org.w3c.dom.Node textNode, int begin, int end);
    method public final com.android.tools.lint.detector.api.Location getNameLocation(org.w3c.dom.Node node);
    method public final com.android.tools.lint.client.api.XmlParser getParser();
    method public final com.android.tools.lint.detector.api.Location getValueLocation(org.w3c.dom.Attr node);
    method public final boolean isSuppressedWithComment(org.w3c.dom.Node node, com.android.tools.lint.detector.api.Issue issue);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.w3c.dom.Node? scope, com.android.tools.lint.detector.api.Location location, String message, com.android.tools.lint.detector.api.LintFix? quickfixData = null);
    method public final void report(com.android.tools.lint.detector.api.Issue issue, org.w3c.dom.Node? scope, com.android.tools.lint.detector.api.Location location, String message);
    method @Deprecated public final void report(com.android.tools.lint.detector.api.Issue issue, org.w3c.dom.Node? scope, com.android.tools.lint.detector.api.Location location, String message, Object? quickfixData);
    property protected java.io.File? resourceFolder;
    property protected String? suppressCommentPrefix;
    field public final org.w3c.dom.Document document;
  }

  public interface XmlScanner extends com.android.tools.lint.detector.api.FileScanner com.android.tools.lint.detector.api.XmlScannerConstants {
    method public boolean appliesTo(com.android.resources.ResourceFolderType folderType);
    method public java.util.Collection<java.lang.String>? getApplicableAttributes();
    method public java.util.Collection<java.lang.String>? getApplicableElements();
    method public void visitAttribute(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Attr attribute);
    method public void visitDocument(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Document document);
    method public void visitElement(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Element element);
    method public void visitElementAfter(com.android.tools.lint.detector.api.XmlContext context, org.w3c.dom.Element element);
  }

  public interface XmlScannerConstants {
    field public static final java.util.List<java.lang.String!> ALL;
  }

  public final class XmlScannerKt {
  }

}

package com.android.tools.lint.detector.api.interprocedural {

  public interface CallGraph {
    method public default String dump(kotlin.jvm.functions.Function1<? super com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge,java.lang.Boolean> filter = { return true });
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph.Node getNode(org.jetbrains.uast.UElement element);
    method public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.CallGraph.Node> getNodes();
    method public default void outputToDotFile(String file, kotlin.jvm.functions.Function1<? super com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge,java.lang.Boolean> filter = { return true });
    property public abstract java.util.Collection<com.android.tools.lint.detector.api.interprocedural.CallGraph.Node> nodes;
  }

  public static final class CallGraph.Edge {
    ctor public CallGraph.Edge(com.android.tools.lint.detector.api.interprocedural.CallGraph.Node? node, org.jetbrains.uast.UCallExpression? call, com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind kind);
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph.Node? component1();
    method public org.jetbrains.uast.UCallExpression? component2();
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind component3();
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge copy(com.android.tools.lint.detector.api.interprocedural.CallGraph.Node? node, org.jetbrains.uast.UCallExpression? call, com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind kind);
    method public org.jetbrains.uast.UCallExpression? getCall();
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind getKind();
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph.Node? getNode();
    method public boolean isLikely();
    property public final boolean isLikely;
  }

  public enum CallGraph.Edge.Kind {
    method public final boolean isLikely();
    method public static com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind valueOf(String name) throws java.lang.IllegalArgumentException;
    method public static com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind[] values();
    property public final boolean isLikely;
    enum_constant public static final com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind BASE;
    enum_constant public static final com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind DIRECT;
    enum_constant public static final com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind INVOKE;
    enum_constant public static final com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind NON_UNIQUE_OVERRIDE;
    enum_constant public static final com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind TYPE_EVIDENCED;
    enum_constant public static final com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge.Kind UNIQUE;
  }

  public static interface CallGraph.Node {
    method public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge> getEdges();
    method public default java.util.Collection<com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge> getLikelyEdges();
    method public com.android.tools.lint.detector.api.interprocedural.CallTarget getTarget();
    property public abstract java.util.Collection<com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge> edges;
    property public default java.util.Collection<com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge> likelyEdges;
    property public abstract com.android.tools.lint.detector.api.interprocedural.CallTarget target;
  }

  public final class CallGraphKt {
    method public static com.android.tools.lint.detector.api.interprocedural.ContextualCallGraph buildContextualCallGraph(com.android.tools.lint.detector.api.interprocedural.CallGraph, com.android.tools.lint.detector.api.interprocedural.IntraproceduralDispatchReceiverEvaluator nonContextualReceiverEval);
    method public static java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ParamContext> buildParamContextsFromCall(com.android.tools.lint.detector.api.interprocedural.CallTarget callee, org.jetbrains.uast.UCallExpression call, java.util.Collection<? extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> implicitThisDispatchReceivers, com.android.tools.lint.detector.api.interprocedural.ContextualDispatchReceiverEvaluator receiverEval);
    method public static java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ContextualEdge> computeEdges(com.android.tools.lint.detector.api.interprocedural.ContextualNode, com.android.tools.lint.detector.api.interprocedural.CallGraph callGraph, com.android.tools.lint.detector.api.interprocedural.IntraproceduralDispatchReceiverEvaluator nonContextualReceiverEval);
    method public static String getShortName(com.android.tools.lint.detector.api.interprocedural.CallGraph.Node?);
    method public static java.util.Collection<java.util.List<com.android.tools.lint.detector.api.interprocedural.ContextualEdge>> searchForContextualPaths(com.android.tools.lint.detector.api.interprocedural.ContextualCallGraph, java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ContextualNode> contextualSources, java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ContextualNode> contextualSinks);
    method public static <T> java.util.Collection<java.util.List<T>> searchForPaths(java.util.Collection<? extends T> sources, kotlin.jvm.functions.Function1<? super T,java.lang.Boolean> isSink, kotlin.jvm.functions.Function1<? super T,? extends java.util.Collection<? extends T>> getNeighbors);
    method public static java.util.Collection<java.util.List<com.android.tools.lint.detector.api.interprocedural.ContextualEdge>> searchForPaths(com.android.tools.lint.detector.api.interprocedural.ContextualCallGraph, java.util.Collection<? extends com.android.tools.lint.detector.api.interprocedural.CallGraph.Node> sources, java.util.Collection<? extends com.android.tools.lint.detector.api.interprocedural.CallGraph.Node> sinks);
    field public static final int GRAPH_EXPANSION_LIMIT = 1000; // 0x3e8
  }

  public final class CallGraphResult {
    ctor public CallGraphResult(com.android.tools.lint.detector.api.interprocedural.CallGraph callGraph, com.android.tools.lint.detector.api.interprocedural.IntraproceduralDispatchReceiverEvaluator receiverEval);
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph component1();
    method public com.android.tools.lint.detector.api.interprocedural.IntraproceduralDispatchReceiverEvaluator component2();
    method public com.android.tools.lint.detector.api.interprocedural.CallGraphResult copy(com.android.tools.lint.detector.api.interprocedural.CallGraph callGraph, com.android.tools.lint.detector.api.interprocedural.IntraproceduralDispatchReceiverEvaluator receiverEval);
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph getCallGraph();
    method public com.android.tools.lint.detector.api.interprocedural.IntraproceduralDispatchReceiverEvaluator getReceiverEval();
  }

  public final class CallGraphVisitor extends org.jetbrains.uast.visitor.AbstractUastVisitor {
    ctor public CallGraphVisitor(com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator receiverEval, com.android.tools.lint.detector.api.interprocedural.ClassHierarchy classHierarchy, boolean conservative);
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph getCallGraph();
    property public final com.android.tools.lint.detector.api.interprocedural.CallGraph callGraph;
  }

  public abstract sealed class CallTarget {
    method public abstract org.jetbrains.uast.UElement getElement();
    property public abstract org.jetbrains.uast.UElement element;
  }

  public static final class CallTarget.DefaultCtor extends com.android.tools.lint.detector.api.interprocedural.CallTarget {
    ctor public CallTarget.DefaultCtor(org.jetbrains.uast.UClass element);
    method public org.jetbrains.uast.UClass component1();
    method public com.android.tools.lint.detector.api.interprocedural.CallTarget.DefaultCtor copy(org.jetbrains.uast.UClass element);
    method public org.jetbrains.uast.UClass getElement();
  }

  public static final class CallTarget.Lambda extends com.android.tools.lint.detector.api.interprocedural.CallTarget {
    ctor public CallTarget.Lambda(org.jetbrains.uast.ULambdaExpression element);
    method public org.jetbrains.uast.ULambdaExpression component1();
    method public com.android.tools.lint.detector.api.interprocedural.CallTarget.Lambda copy(org.jetbrains.uast.ULambdaExpression element);
    method public org.jetbrains.uast.ULambdaExpression getElement();
  }

  public static final class CallTarget.Method extends com.android.tools.lint.detector.api.interprocedural.CallTarget {
    ctor public CallTarget.Method(org.jetbrains.uast.UMethod element);
    method public org.jetbrains.uast.UMethod component1();
    method public com.android.tools.lint.detector.api.interprocedural.CallTarget.Method copy(org.jetbrains.uast.UMethod element);
    method public org.jetbrains.uast.UMethod getElement();
  }

  public interface ClassHierarchy {
    method public default kotlin.sequences.Sequence<org.jetbrains.uast.UClass> allInheritorsOf(org.jetbrains.uast.UClass superClass);
    method public default kotlin.sequences.Sequence<org.jetbrains.uast.UMethod> allOverridesOf(org.jetbrains.uast.UMethod superMethod);
    method public kotlin.sequences.Sequence<org.jetbrains.uast.UClass> directInheritorsOf(org.jetbrains.uast.UClass superClass);
    method public kotlin.sequences.Sequence<org.jetbrains.uast.UMethod> directOverridesOf(org.jetbrains.uast.UMethod superMethod);
  }

  public final class ClassHierarchyVisitor extends org.jetbrains.uast.visitor.AbstractUastVisitor {
    ctor public ClassHierarchyVisitor();
    method public com.android.tools.lint.detector.api.interprocedural.ClassHierarchy getClassHierarchy();
    property public final com.android.tools.lint.detector.api.interprocedural.ClassHierarchy classHierarchy;
  }

  public interface ContextualCallGraph {
    method public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ContextualNode> getContextualNodes();
    method public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ContextualEdge> inEdges(com.android.tools.lint.detector.api.interprocedural.ContextualNode n);
    method public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ContextualEdge> outEdges(com.android.tools.lint.detector.api.interprocedural.ContextualNode n);
    property public abstract java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ContextualNode> contextualNodes;
  }

  public final class ContextualDispatchReceiverEvaluator extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator {
    ctor public ContextualDispatchReceiverEvaluator(com.android.tools.lint.detector.api.interprocedural.ParamContext paramContext, com.android.tools.lint.detector.api.interprocedural.IntraproceduralDispatchReceiverEvaluator nonContextualEval);
    method protected java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getOwn(org.jetbrains.uast.UElement element, com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator root);
    method protected java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getOwnForImplicitThis();
  }

  public final class ContextualEdge {
    ctor public ContextualEdge(com.android.tools.lint.detector.api.interprocedural.ContextualNode contextualNode, org.jetbrains.uast.UElement cause);
    method public com.android.tools.lint.detector.api.interprocedural.ContextualNode component1();
    method public org.jetbrains.uast.UElement component2();
    method public com.android.tools.lint.detector.api.interprocedural.ContextualEdge copy(com.android.tools.lint.detector.api.interprocedural.ContextualNode contextualNode, org.jetbrains.uast.UElement cause);
    method public org.jetbrains.uast.UElement getCause();
    method public com.android.tools.lint.detector.api.interprocedural.ContextualNode getContextualNode();
  }

  public final class ContextualNode {
    ctor public ContextualNode(com.android.tools.lint.detector.api.interprocedural.CallGraph.Node node, com.android.tools.lint.detector.api.interprocedural.ParamContext paramContext);
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph.Node component1();
    method public com.android.tools.lint.detector.api.interprocedural.ParamContext component2();
    method public com.android.tools.lint.detector.api.interprocedural.ContextualNode copy(com.android.tools.lint.detector.api.interprocedural.CallGraph.Node node, com.android.tools.lint.detector.api.interprocedural.ParamContext paramContext);
    method public com.android.tools.lint.detector.api.interprocedural.CallGraph.Node getNode();
    method public com.android.tools.lint.detector.api.interprocedural.ParamContext getParamContext();
  }

  public abstract sealed class DispatchReceiver {
    method public abstract org.jetbrains.uast.UElement getElement();
    property public abstract org.jetbrains.uast.UElement element;
  }

  public static final class DispatchReceiver.Class extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiver {
    ctor public DispatchReceiver.Class(org.jetbrains.uast.UClass element);
    method public org.jetbrains.uast.UClass component1();
    method public com.android.tools.lint.detector.api.interprocedural.DispatchReceiver.Class copy(org.jetbrains.uast.UClass element);
    method public org.jetbrains.uast.UClass getElement();
    method public com.android.tools.lint.detector.api.interprocedural.CallTarget.Method? refineToTarget(org.jetbrains.uast.UMethod method);
  }

  public abstract static sealed class DispatchReceiver.Functional extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiver {
    method public org.jetbrains.uast.UElement getElement();
    method public abstract com.android.tools.lint.detector.api.interprocedural.CallTarget? toTarget();
  }

  public static final class DispatchReceiver.Functional.Lambda extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiver.Functional {
    ctor public DispatchReceiver.Functional.Lambda(org.jetbrains.uast.ULambdaExpression element, com.android.tools.lint.detector.api.interprocedural.ParamContext captureContext);
    method public org.jetbrains.uast.ULambdaExpression component1();
    method public com.android.tools.lint.detector.api.interprocedural.ParamContext component2();
    method public com.android.tools.lint.detector.api.interprocedural.DispatchReceiver.Functional.Lambda copy(org.jetbrains.uast.ULambdaExpression element, com.android.tools.lint.detector.api.interprocedural.ParamContext captureContext);
    method public com.android.tools.lint.detector.api.interprocedural.ParamContext getCaptureContext();
    method public org.jetbrains.uast.ULambdaExpression getElement();
    method public com.android.tools.lint.detector.api.interprocedural.CallTarget.Lambda toTarget();
  }

  public static final class DispatchReceiver.Functional.Reference extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiver.Functional {
    ctor public DispatchReceiver.Functional.Reference(org.jetbrains.uast.UCallableReferenceExpression element, com.android.tools.lint.detector.api.interprocedural.DispatchReceiver.Class? receiver);
    method public org.jetbrains.uast.UCallableReferenceExpression component1();
    method public com.android.tools.lint.detector.api.interprocedural.DispatchReceiver.Class? component2();
    method public com.android.tools.lint.detector.api.interprocedural.DispatchReceiver.Functional.Reference copy(org.jetbrains.uast.UCallableReferenceExpression element, com.android.tools.lint.detector.api.interprocedural.DispatchReceiver.Class? receiver);
    method public org.jetbrains.uast.UCallableReferenceExpression getElement();
    method public com.android.tools.lint.detector.api.interprocedural.DispatchReceiver.Class? getReceiver();
    method public com.android.tools.lint.detector.api.interprocedural.CallTarget.Method? toTarget();
  }

  public abstract class DispatchReceiverEvaluator {
    ctor public DispatchReceiverEvaluator(com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator? delegate);
    ctor public DispatchReceiverEvaluator();
    method public final operator java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> get(org.jetbrains.uast.UElement element, com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator root = this);
    method public final java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getForImplicitThis();
    method protected abstract java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getOwn(org.jetbrains.uast.UElement element, com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator root);
    method protected abstract java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getOwnForImplicitThis();
  }

  public final class DispatchReceiverEvaluatorKt {
    method public static java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getDispatchReceivers(org.jetbrains.uast.UCallExpression, com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator receiverEval);
    method public static com.android.tools.lint.detector.api.interprocedural.CallTarget? getTarget(org.jetbrains.uast.UCallExpression, com.android.tools.lint.detector.api.interprocedural.DispatchReceiver dispatchReceiver);
    method public static java.util.List<com.android.tools.lint.detector.api.interprocedural.CallTarget> getTargets(org.jetbrains.uast.UCallExpression, com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator receiverEval);
  }

  public final class IntraproceduralDispatchReceiverEvaluator extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator {
    ctor public IntraproceduralDispatchReceiverEvaluator(com.android.tools.lint.detector.api.interprocedural.SimpleExpressionDispatchReceiverEvaluator simpleExprEval, com.google.common.collect.Multimap<org.jetbrains.uast.UVariable,com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> varMap, com.google.common.collect.Multimap<org.jetbrains.uast.UMethod,com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> methodMap);
    method protected java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getOwn(org.jetbrains.uast.UElement element, com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator root);
    method protected java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getOwnForImplicitThis();
  }

  public final class IntraproceduralDispatchReceiverVisitor extends org.jetbrains.uast.visitor.AbstractUastVisitor {
    ctor public IntraproceduralDispatchReceiverVisitor(com.android.tools.lint.detector.api.interprocedural.ClassHierarchy cha);
    method public com.android.tools.lint.detector.api.interprocedural.IntraproceduralDispatchReceiverEvaluator getReceiverEval();
    property public final com.android.tools.lint.detector.api.interprocedural.IntraproceduralDispatchReceiverEvaluator receiverEval;
  }

  public final class MutableCallGraph implements com.android.tools.lint.detector.api.interprocedural.CallGraph {
    ctor public MutableCallGraph();
    method public com.android.tools.lint.detector.api.interprocedural.MutableCallGraph.MutableNode getNode(org.jetbrains.uast.UElement element);
    method public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.MutableCallGraph.MutableNode>! getNodes();
    property public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.MutableCallGraph.MutableNode>! nodes;
  }

  public static final class MutableCallGraph.MutableNode implements com.android.tools.lint.detector.api.interprocedural.CallGraph.Node {
    ctor public MutableCallGraph.MutableNode(com.android.tools.lint.detector.api.interprocedural.CallTarget target, java.util.Collection<com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge> edges);
    method public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.CallGraph.Edge> getEdges();
    method public com.android.tools.lint.detector.api.interprocedural.CallTarget getTarget();
  }

  public final class MutableClassHierarchy implements com.android.tools.lint.detector.api.interprocedural.ClassHierarchy {
    ctor public MutableClassHierarchy();
    method public void addClass(org.jetbrains.uast.UClass subClass);
    method public void addMethod(org.jetbrains.uast.UMethod subMethod);
    method public kotlin.sequences.Sequence<org.jetbrains.uast.UClass> directInheritorsOf(org.jetbrains.uast.UClass superClass);
    method public kotlin.sequences.Sequence<org.jetbrains.uast.UMethod> directOverridesOf(org.jetbrains.uast.UMethod superMethod);
  }

  public final class MutableContextualCallGraph implements com.android.tools.lint.detector.api.interprocedural.ContextualCallGraph {
    ctor public MutableContextualCallGraph();
    method public java.util.ArrayList<com.android.tools.lint.detector.api.interprocedural.ContextualNode> getContextualNodes();
    method public com.google.common.collect.Multimap<com.android.tools.lint.detector.api.interprocedural.CallGraph.Node,com.android.tools.lint.detector.api.interprocedural.ContextualNode> getExpansionMap();
    method public com.google.common.collect.Multimap<com.android.tools.lint.detector.api.interprocedural.ContextualNode,com.android.tools.lint.detector.api.interprocedural.ContextualEdge> getInEdgeMap();
    method public com.google.common.collect.Multimap<com.android.tools.lint.detector.api.interprocedural.ContextualNode,com.android.tools.lint.detector.api.interprocedural.ContextualEdge> getOutEdgeMap();
    method public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ContextualEdge> inEdges(com.android.tools.lint.detector.api.interprocedural.ContextualNode n);
    method public java.util.Collection<com.android.tools.lint.detector.api.interprocedural.ContextualEdge> outEdges(com.android.tools.lint.detector.api.interprocedural.ContextualNode n);
    property public java.util.ArrayList<com.android.tools.lint.detector.api.interprocedural.ContextualNode> contextualNodes;
    property public final com.google.common.collect.Multimap<com.android.tools.lint.detector.api.interprocedural.CallGraph.Node,com.android.tools.lint.detector.api.interprocedural.ContextualNode> expansionMap;
    property public final com.google.common.collect.Multimap<com.android.tools.lint.detector.api.interprocedural.ContextualNode,com.android.tools.lint.detector.api.interprocedural.ContextualEdge> inEdgeMap;
    property public final com.google.common.collect.Multimap<com.android.tools.lint.detector.api.interprocedural.ContextualNode,com.android.tools.lint.detector.api.interprocedural.ContextualEdge> outEdgeMap;
  }

  public final class ParamContext {
    ctor public ParamContext(java.util.List<? extends kotlin.Pair<? extends org.jetbrains.uast.UVariable,? extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiver>> params, com.android.tools.lint.detector.api.interprocedural.DispatchReceiver? implicitThis);
    method public java.util.List<kotlin.Pair<org.jetbrains.uast.UVariable,com.android.tools.lint.detector.api.interprocedural.DispatchReceiver>> component1();
    method public com.android.tools.lint.detector.api.interprocedural.DispatchReceiver? component2();
    method public com.android.tools.lint.detector.api.interprocedural.ParamContext copy(java.util.List<? extends kotlin.Pair<? extends org.jetbrains.uast.UVariable,? extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiver>> params, com.android.tools.lint.detector.api.interprocedural.DispatchReceiver? implicitThis);
    method public operator com.android.tools.lint.detector.api.interprocedural.DispatchReceiver? get(org.jetbrains.uast.UVariable param);
    method public com.android.tools.lint.detector.api.interprocedural.DispatchReceiver? getImplicitThis();
    method public java.util.List<kotlin.Pair<org.jetbrains.uast.UVariable,com.android.tools.lint.detector.api.interprocedural.DispatchReceiver>> getParams();
    field public static final com.android.tools.lint.detector.api.interprocedural.ParamContext.Companion Companion;
  }

  public static final class ParamContext.Companion {
    method public com.android.tools.lint.detector.api.interprocedural.ParamContext getEMPTY();
    property public final com.android.tools.lint.detector.api.interprocedural.ParamContext EMPTY;
  }

  public final class SimpleExpressionDispatchReceiverEvaluator extends com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator {
    ctor public SimpleExpressionDispatchReceiverEvaluator(com.android.tools.lint.detector.api.interprocedural.ClassHierarchy cha);
    method protected java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getOwn(org.jetbrains.uast.UElement element, com.android.tools.lint.detector.api.interprocedural.DispatchReceiverEvaluator root);
    method protected java.util.Collection<com.android.tools.lint.detector.api.interprocedural.DispatchReceiver> getOwnForImplicitThis();
  }

}

package com.android.tools.lint.helpers {

  public class DefaultJavaEvaluator extends com.android.tools.lint.client.api.JavaEvaluator {
    ctor public DefaultJavaEvaluator(com.intellij.openapi.project.Project? myProject, com.android.tools.lint.detector.api.Project? myLintProject);
    method public boolean extendsClass(com.intellij.psi.PsiClass? cls, String className, boolean strict);
    method public com.intellij.psi.PsiAnnotation? findAnnotation(com.intellij.psi.PsiModifierListOwner? listOwner, java.lang.String... annotationNames);
    method public com.intellij.psi.PsiAnnotation? findAnnotationInHierarchy(com.intellij.psi.PsiModifierListOwner listOwner, java.lang.String... annotationNames);
    method public com.intellij.psi.PsiClass? findClass(String qualifiedName);
    method public String? findJarPath(com.intellij.psi.PsiElement element);
    method public String? findJarPath(org.jetbrains.uast.UElement element);
    method public java.util.List<org.jetbrains.uast.UAnnotation> getAllAnnotations(org.jetbrains.uast.UAnnotated owner, boolean inHierarchy);
    method public com.intellij.psi.PsiAnnotation![] getAllAnnotations(com.intellij.psi.PsiModifierListOwner owner, boolean inHierarchy);
    method public com.intellij.psi.PsiClassType? getClassType(com.intellij.psi.PsiClass? psiClass);
    method public com.android.tools.lint.model.LintModelDependencies? getDependencies();
    method public String? getInternalName(com.intellij.psi.PsiClassType psiClassType);
    method public String? getInternalName(com.intellij.psi.PsiClass psiClass);
    method public com.intellij.psi.PsiPackage? getPackage(com.intellij.psi.PsiElement node);
    method public com.intellij.psi.PsiPackage? getPackage(org.jetbrains.uast.UElement node);
    method public final com.android.tools.lint.detector.api.Project? getProject(java.io.File file);
    method public com.intellij.psi.PsiClass? getTypeClass(com.intellij.psi.PsiType? psiType);
    method public boolean implementsInterface(com.intellij.psi.PsiClass cls, String interfaceName, boolean strict);
    property public com.android.tools.lint.model.LintModelDependencies? dependencies;
  }

  public class DefaultUastParser extends com.android.tools.lint.client.api.UastParser {
    ctor public DefaultUastParser(com.android.tools.lint.detector.api.Project? project, com.intellij.openapi.project.Project ideaProject);
    method protected com.android.tools.lint.helpers.DefaultJavaEvaluator createEvaluator(com.android.tools.lint.detector.api.Project? project, com.intellij.openapi.project.Project p);
    method public com.android.tools.lint.detector.api.Location createLocation(com.intellij.psi.PsiElement element);
    method public com.android.tools.lint.detector.api.Location createLocation(org.jetbrains.uast.UElement element);
    method public com.android.tools.lint.detector.api.Location getCallLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UCallExpression call, boolean includeReceiver, boolean includeArguments);
    method public com.android.tools.lint.client.api.JavaEvaluator getEvaluator();
    method public java.io.File? getFile(com.intellij.psi.PsiFile file);
    method public CharSequence getFileContents(com.intellij.psi.PsiFile file);
    method public final com.intellij.openapi.project.Project getIdeaProject();
    method public com.android.tools.lint.detector.api.Location getLocation(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement element);
    method public com.android.tools.lint.detector.api.Location getLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement element);
    method public com.android.tools.lint.detector.api.Location getNameLocation(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement element);
    method public com.android.tools.lint.detector.api.Location getNameLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement element);
    method public com.android.tools.lint.detector.api.Location getRangeLocation(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement from, int fromDelta, com.intellij.psi.PsiElement to, int toDelta);
    method public com.android.tools.lint.detector.api.Location getRangeLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement from, int fromDelta, org.jetbrains.uast.UElement to, int toDelta);
    method public com.android.tools.lint.detector.api.Location getRangeLocation(com.android.tools.lint.detector.api.JavaContext context, com.intellij.psi.PsiElement from, int fromDelta, int toDelta);
    method public com.android.tools.lint.detector.api.Location getRangeLocation(com.android.tools.lint.detector.api.JavaContext context, org.jetbrains.uast.UElement from, int fromDelta, int toDelta);
    method public org.jetbrains.uast.UFile? parse(com.android.tools.lint.detector.api.JavaContext context);
    property public com.android.tools.lint.client.api.JavaEvaluator evaluator;
    field public static final com.android.tools.lint.helpers.DefaultUastParser.Companion Companion;
  }

  public static final class DefaultUastParser.Companion {
    method public boolean getWarnedAboutLargeFiles();
    method public void setWarnedAboutLargeFiles(boolean p);
    property public final boolean warnedAboutLargeFiles;
  }

}

