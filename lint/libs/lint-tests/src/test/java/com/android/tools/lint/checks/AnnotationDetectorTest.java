/*
 * Copyright (C) 2012 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.tools.lint.checks;

import static com.android.tools.lint.checks.AnnotationDetector.SWITCH_TYPE_DEF;
import static com.android.tools.lint.checks.AnnotationDetector.getMissingCases;
import static com.android.tools.lint.detector.api.TextFormat.TEXT;

import com.android.annotations.NonNull;
import com.android.tools.lint.detector.api.Context;
import com.android.tools.lint.detector.api.Detector;
import com.android.tools.lint.detector.api.Issue;
import com.android.tools.lint.detector.api.Location;
import com.android.tools.lint.detector.api.Severity;
import com.android.tools.lint.detector.api.TextFormat;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@SuppressWarnings({"javadoc", "ClassNameDiffersFromFileName", "UnnecessaryLocalVariable",
        "ConstantConditionalExpression", "StatementWithEmptyBody", "RedundantCast",
        "MethodMayBeStatic", "OnDemandImport"})
public class AnnotationDetectorTest extends AbstractCheckTest {

    public void test() throws Exception {
        //noinspection all // Sample code
        assertEquals(""
                + "src/test/pkg/WrongAnnotation.java:9: Error: The @SuppressLint annotation cannot be used on a local variable with the lint check 'NewApi': move out to the surrounding method [LocalSuppress]\n"
                + "    public static void foobar(View view, @SuppressLint(\"NewApi\") int foo) { // Invalid: class-file check\n"
                + "                                         ~~~~~~~~~~~~~~~~~~~~~~~\n"
                + "src/test/pkg/WrongAnnotation.java:10: Error: The @SuppressLint annotation cannot be used on a local variable with the lint check 'NewApi': move out to the surrounding method [LocalSuppress]\n"
                + "        @SuppressLint(\"NewApi\") // Invalid\n"
                + "        ~~~~~~~~~~~~~~~~~~~~~~~\n"
                + "src/test/pkg/WrongAnnotation.java:12: Error: The @SuppressLint annotation cannot be used on a local variable with the lint check 'NewApi': move out to the surrounding method [LocalSuppress]\n"
                + "        @SuppressLint({\"SdCardPath\", \"NewApi\"}) // Invalid: class-file based check on local variable\n"
                + "        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
                + "src/test/pkg/WrongAnnotation.java:14: Error: The @SuppressLint annotation cannot be used on a local variable with the lint check 'NewApi': move out to the surrounding method [LocalSuppress]\n"
                + "        @android.annotation.SuppressLint({\"SdCardPath\", \"NewApi\"}) // Invalid (FQN)\n"
                + "        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
                + "src/test/pkg/WrongAnnotation.java:28: Error: The @SuppressLint annotation cannot be used on a local variable with the lint check 'NewApi': move out to the surrounding method [LocalSuppress]\n"
                + "        @SuppressLint(\"NewApi\")\n"
                + "        ~~~~~~~~~~~~~~~~~~~~~~~\n"
                + "src/test/pkg/WrongAnnotation.java:33: Error: The @SuppressLint annotation cannot be used on a local variable with the lint check 'NewApi': move out to the surrounding method [LocalSuppress]\n"
                + "        @SuppressLint(\"NewApi\") // Invalid\n"
                + "        ~~~~~~~~~~~~~~~~~~~~~~~\n"
                + "6 errors, 0 warnings\n",

            lintProject(
                java(""
                            + "package test.pkg;\n"
                            + "\n"
                            + "import android.annotation.SuppressLint;\n"
                            + "import android.view.View;\n"
                            + "\n"
                            + "public class WrongAnnotation {\n"
                            + "\n"
                            + "    @SuppressLint(\"NewApi\") // Valid: class-file check on method\n"
                            + "    public static void foobar(View view, @SuppressLint(\"NewApi\") int foo) { // Invalid: class-file check\n"
                            + "        @SuppressLint(\"NewApi\") // Invalid\n"
                            + "        boolean a;\n"
                            + "        @SuppressLint({\"SdCardPath\", \"NewApi\"}) // Invalid: class-file based check on local variable\n"
                            + "        boolean b;\n"
                            + "        @android.annotation.SuppressLint({\"SdCardPath\", \"NewApi\"}) // Invalid (FQN)\n"
                            + "        boolean c;\n"
                            + "        @SuppressLint(\"SdCardPath\") // Valid: AST-based check\n"
                            + "        boolean d;\n"
                            + "    }\n"
                            + "\n"
                            + "    @SuppressLint(\"NewApi\")\n"
                            + "    private int field1;\n"
                            + "\n"
                            + "    @SuppressLint(\"NewApi\")\n"
                            + "    private int field2 = 5;\n"
                            + "\n"
                            + "    static {\n"
                            + "        // Local variable outside method: invalid\n"
                            + "        @SuppressLint(\"NewApi\")\n"
                            + "        int localvar = 5;\n"
                            + "    }\n"
                            + "\n"
                            + "    private static void test() {\n"
                            + "        @SuppressLint(\"NewApi\") // Invalid\n"
                            + "        int a = View.MEASURED_STATE_MASK;\n"
                            + "    }\n"
                            + "}\n")
            ));
    }

    @SuppressWarnings("ClassNameDiffersFromFileName")
    public void testUniqueValues() throws Exception {
        assertEquals(""
                + "src/test/pkg/IntDefTest.java:9: Error: Constants STYLE_NO_INPUT and STYLE_NO_FRAME specify the same exact value (2); this is usually a cut & paste or merge error [UniqueConstants]\n"
                + "    @IntDef({STYLE_NORMAL, STYLE_NO_TITLE, STYLE_NO_FRAME, STYLE_NO_INPUT})\n"
                + "                                                           ~~~~~~~~~~~~~~\n"
                + "    src/test/pkg/IntDefTest.java:9: Previous same value\n"
                + "src/test/pkg/IntDefTest.java:28: Error: Constants FLAG3 and FLAG2 specify the same exact value (562949953421312); this is usually a cut & paste or merge error [UniqueConstants]\n"
                + "    @IntDef({FLAG2, FLAG3, FLAG1})\n"
                + "                    ~~~~~\n"
                + "    src/test/pkg/IntDefTest.java:28: Previous same value\n"
                + "2 errors, 0 warnings\n",

                lintProject(
                        java("src/test/pkg/IntDefTest.java", ""
                                + "package test.pkg;\n"
                                + "import android.support.annotation.IntDef;\n"
                                + "import android.annotation.SuppressLint;\n"
                                + "import java.lang.annotation.Retention;\n"
                                + "import java.lang.annotation.RetentionPolicy;\n"
                                + "\n"
                                + "@SuppressLint(\"UnusedDeclaration\")\n"
                                + "public class IntDefTest {\n"
                                + "    @IntDef({STYLE_NORMAL, STYLE_NO_TITLE, STYLE_NO_FRAME, STYLE_NO_INPUT})\n"
                                + "    @Retention(RetentionPolicy.SOURCE)\n"
                                + "    private @interface DialogStyle {}\n"
                                + "\n"
                                + "    public static final int STYLE_NORMAL = 0;\n"
                                + "    public static final int STYLE_NO_TITLE = 1;\n"
                                + "    public static final int STYLE_NO_FRAME = 2;\n"
                                + "    public static final int STYLE_NO_INPUT = 2;\n"
                                + "\n"
                                + "    @IntDef({STYLE_NORMAL, STYLE_NO_TITLE, STYLE_NO_FRAME, STYLE_NO_INPUT})\n"
                                + "    @SuppressWarnings(\"UniqueConstants\")\n"
                                + "    @Retention(RetentionPolicy.SOURCE)\n"
                                + "    private @interface SuppressedDialogStyle {}\n"
                                + "\n"
                                + "\n"
                                + "    public static final long FLAG1 = 0x100000000000L;\n"
                                + "    public static final long FLAG2 = 0x0002000000000000L;\n"
                                + "    public static final long FLAG3 = 0x2000000000000L;\n"
                                + "\n"
                                + "    @IntDef({FLAG2, FLAG3, FLAG1})\n"
                                + "    @Retention(RetentionPolicy.SOURCE)\n"
                                + "    private @interface Flags {}\n"
                                + "\n"

                                + ""
                                + "}"),
                        mSupportClasspath,
                        mSupportJar));
    }

    @SuppressWarnings("ClassNameDiffersFromFileName")
    public void testFlagStyle() throws Exception {
        assertEquals(""
                + "src/test/pkg/IntDefTest.java:13: Warning: Consider declaring this constant using 1 << 44 instead [ShiftFlags]\n"
                + "    public static final long FLAG5 = 0x100000000000L;\n"
                + "                                     ~~~~~~~~~~~~~~~\n"
                + "src/test/pkg/IntDefTest.java:14: Warning: Consider declaring this constant using 1 << 49 instead [ShiftFlags]\n"
                + "    public static final long FLAG6 = 0x0002000000000000L;\n"
                + "                                     ~~~~~~~~~~~~~~~~~~~\n"
                + "src/test/pkg/IntDefTest.java:15: Warning: Consider declaring this constant using 1 << 3 instead [ShiftFlags]\n"
                + "    public static final long FLAG7 = 8L;\n"
                + "                                     ~~\n"
                + "0 errors, 3 warnings\n",
                lintProject(
                        java("src/test/pkg/IntDefTest.java", ""
                                + "package test.pkg;\n"
                                + "import android.support.annotation.IntDef;\n"
                                + "\n"
                                + "import java.lang.annotation.Retention;\n"
                                + "import java.lang.annotation.RetentionPolicy;\n"
                                + "\n"
                                + "@SuppressWarnings(\"unused\")\n"
                                + "public class IntDefTest {\n"
                                + "    public static final long FLAG1 = 1;\n"
                                + "    public static final long FLAG2 = 2;\n"
                                + "    public static final long FLAG3 = 1 << 2;\n"
                                + "    public static final long FLAG4 = 1 << 3;\n"
                                + "    public static final long FLAG5 = 0x100000000000L;\n"
                                + "    public static final long FLAG6 = 0x0002000000000000L;\n"
                                + "    public static final long FLAG7 = 8L;\n"
                                + "    public static final long FLAG8 = 9L;\n"
                                + "    public static final long FLAG9 = 0;\n"
                                + "    public static final long FLAG10 = 1;\n"
                                + "    public static final long FLAG11 = -1;\n"
                                + "\n"
                                // Not a flag (missing flag=true)
                                + "    @IntDef({FLAG1, FLAG2, FLAG3})\n"
                                + "    @Retention(RetentionPolicy.SOURCE)\n"
                                + "    private @interface Flags1 {}\n"
                                + "\n"
                                // OK: Too few values
                                + "    @IntDef(flag = true, value={FLAG1, FLAG2})\n"
                                + "    @Retention(RetentionPolicy.SOURCE)\n"
                                + "    private @interface Flags2 {}\n"
                                + "\n"
                                // OK: Allow 0, 1, -1
                                + "    @IntDef(flag = true, value={FLAG9, FLAG10, FLAG11})\n"
                                + "    @Retention(RetentionPolicy.SOURCE)\n"
                                + "    private @interface Flags3 {}\n"
                                + "\n"
                                // OK: Already using shifts
                                + "    @IntDef(flag = true, value={FLAG1, FLAG3, FLAG4})\n"
                                + "    @Retention(RetentionPolicy.SOURCE)\n"
                                + "    private @interface Flags4 {}\n"
                                + "\n"
                                // Wrong: should be flagged
                                + "    @IntDef(flag = true, value={FLAG5, FLAG6, FLAG7, FLAG8})\n"
                                + "    @Retention(RetentionPolicy.SOURCE)\n"
                                + "    private @interface Flags5 {}\n"
                                + "\n"
                                // Repeated: make sure we don't flag initializers twice!
                                + "    @IntDef(flag = true, value={FLAG5, FLAG6, FLAG7, FLAG8})\n"
                                + "    @Retention(RetentionPolicy.SOURCE)\n"
                                + "    private @interface Flags6 {}\n"
                                + "}"),
                        mSupportClasspath,
                        mSupportJar));
    }

    public void testMissingIntDefSwitchConstants() throws Exception {
        assertEquals(""
                + "src/test/pkg/X.java:40: Warning: Don't use a constant here; expected one of: LENGTH_INDEFINITE, LENGTH_LONG, LENGTH_SHORT [SwitchIntDef]\n"
                + "            case 5:\n"
                + "                 ~\n"
                + "src/test/pkg/X.java:47: Warning: Switch statement on an int with known associated constant missing case LENGTH_LONG [SwitchIntDef]\n"
                + "        switch (duration) {\n"
                + "        ~~~~~~\n"
                + "src/test/pkg/X.java:56: Warning: Switch statement on an int with known associated constant missing case LENGTH_INDEFINITE, LENGTH_LONG, LENGTH_SHORT [SwitchIntDef]\n"
                + "        switch (duration) {\n"
                + "        ~~~~~~\n"
                + "src/test/pkg/X.java:66: Warning: Switch statement on an int with known associated constant missing case LENGTH_SHORT [SwitchIntDef]\n"
                + "        switch (duration) {\n"
                + "        ~~~~~~\n"
                + "src/test/pkg/X.java:75: Warning: Switch statement on an int with known associated constant missing case LENGTH_SHORT [SwitchIntDef]\n"
                + "        switch ((int)getDuration()) {\n"
                + "        ~~~~~~\n"
                + "src/test/pkg/X.java:85: Warning: Switch statement on an int with known associated constant missing case LENGTH_SHORT [SwitchIntDef]\n"
                + "        switch (true ? getDuration() : 0) {\n"
                + "        ~~~~~~\n"
                + "src/test/pkg/X.java:95: Warning: Switch statement on an int with known associated constant missing case X.LENGTH_SHORT [SwitchIntDef]\n"
                + "            switch (X.getDuration()) {\n"
                + "            ~~~~~~\n"
                + "src/test/pkg/X.java:104: Warning: Switch statement on an int with known associated constant missing case LENGTH_INDEFINITE [SwitchIntDef]\n"
                + "        switch (duration) {\n"
                + "        ~~~~~~\n"
                + "0 errors, 8 warnings\n",

                lintProject(
                        java("src/test/pkg/X.java", ""
                                + "package test.pkg;\n"
                                + "\n"
                                + "import android.annotation.SuppressLint;\n"
                                + "import android.support.annotation.IntDef;\n"
                                + "\n"
                                + "import java.lang.annotation.Retention;\n"
                                + "import java.lang.annotation.RetentionPolicy;\n"
                                + "\n"
                                + "@SuppressWarnings({\"UnusedParameters\", \"unused\", \"SpellCheckingInspection\", \"RedundantCast\"})\n"
                                + "public class X {\n"
                                + "    @IntDef({LENGTH_INDEFINITE, LENGTH_SHORT, LENGTH_LONG})\n"
                                + "    @Retention(RetentionPolicy.SOURCE)\n"
                                + "    public @interface Duration {\n"
                                + "    }\n"
                                + "\n"
                                + "    public static final int LENGTH_INDEFINITE = -2;\n"
                                + "    public static final int LENGTH_SHORT = -1;\n"
                                + "    public static final int LENGTH_LONG = 0;\n"
                                + "\n"
                                + "    public void setDuration(@Duration int duration) {\n"
                                + "    }\n"
                                + "\n"
                                + "    @Duration\n"
                                + "    public static int getDuration() {\n"
                                + "        return LENGTH_INDEFINITE;\n"
                                + "    }\n"
                                + "\n"
                                + "    public static void testOk(@Duration int duration) {\n"
                                + "        switch (duration) {\n"
                                + "            case LENGTH_SHORT:\n"
                                + "            case LENGTH_LONG:\n"
                                + "            case LENGTH_INDEFINITE:\n"
                                + "                break;\n"
                                + "        }\n"
                                + "    }\n"
                                + "\n"
                                + "    public static void testLiteral(@Duration int duration) {\n"
                                + "        switch (duration) {\n"
                                + "            case LENGTH_SHORT:\n"
                                + "            case 5:\n"
                                + "            case LENGTH_INDEFINITE:\n"
                                + "                break;\n"
                                + "        }\n"
                                + "    }\n"
                                + "\n"
                                + "    public static void testParameter(@Duration int duration) {\n"
                                + "        switch (duration) {\n"
                                + "            case LENGTH_SHORT:\n"
                                + "            case LENGTH_INDEFINITE:\n"
                                + "                break;\n"
                                + "        }\n"
                                + "    }\n"
                                + "\n"
                                + "    public static void testMissingAll(@Duration int duration) {\n"
                                + "        // We don't flag these; let the IDE's normal \"empty switch\" check flag it\n"
                                + "        switch (duration) {\n"
                                + "        }\n"
                                + "    }\n"
                                + "\n"
                                + "    @SuppressWarnings(\"UnnecessaryLocalVariable\")\n"
                                + "    public static void testLocalVariableFlow() {\n"
                                + "        int intermediate = getDuration();\n"
                                + "        int duration = intermediate;\n"
                                + "\n"
                                + "        // Missing LENGTH_SHORT\n"
                                + "        switch (duration) {\n"
                                + "            case LENGTH_LONG:\n"
                                + "            case LENGTH_INDEFINITE:\n"
                                + "                break;\n"
                                + "        }\n"
                                + "    }\n"
                                + "\n"
                                + "    public static void testMethodCall() {\n"
                                + "        // Missing LENGTH_SHORT\n"
                                + "        switch ((int)getDuration()) {\n"
                                + "            case LENGTH_LONG:\n"
                                + "            case LENGTH_INDEFINITE:\n"
                                + "                break;\n"
                                + "        }\n"
                                + "    }\n"
                                + "\n"
                                + "    @SuppressWarnings(\"ConstantConditionalExpression\")\n"
                                + "    public static void testInline() {\n"
                                + "        // Missing LENGTH_SHORT\n"
                                + "        switch (true ? getDuration() : 0) {\n"
                                + "            case LENGTH_LONG:\n"
                                + "            case LENGTH_INDEFINITE:\n"
                                + "                break;\n"
                                + "        }\n"
                                + "    }\n"
                                + "\n"
                                + "    private static class SomeOtherClass {\n"
                                + "        private void method() {\n"
                                + "            // Missing LENGTH_SHORT\n"
                                + "            switch (X.getDuration()) {\n"
                                + "                case LENGTH_LONG:\n"
                                + "                case LENGTH_INDEFINITE:\n"
                                + "                    break;\n"
                                + "            }\n"
                                + "        }\n"
                                + "    }\n"
                                + "\n"
                                + "    public static void testMissingWithDefault(@Duration int duration) {\n"
                                + "        switch (duration) {\n"
                                + "            case LENGTH_SHORT:\n"
                                + "            case LENGTH_LONG:\n"
                                + "            default:\n"
                                + "                break;\n"
                                + "        }\n"
                                + "    }\n"
                                + "\n"
                                + "    @SuppressLint(\"SwitchIntDef\")\n"
                                + "    public static void testSuppressAnnotation(@Duration int duration) {\n"
                                + "        switch (duration) {\n"
                                + "            case LENGTH_SHORT:\n"
                                + "            case LENGTH_INDEFINITE:\n"
                                + "                break;\n"
                                + "        }\n"
                                + "    }\n"
                                + "\n"
                                + "    public static void testSuppressComment(@Duration int duration) {\n"
                                + "        //noinspection AndroidLintSwitchIntDef\n"
                                + "        switch (duration) {\n"
                                + "            case LENGTH_SHORT:\n"
                                + "            case LENGTH_INDEFINITE:\n"
                                + "                break;\n"
                                + "        }\n"
                                + "    }\n"
                                + "}\n"),
                        mSupportClasspath,
                        mSupportJar
        ));
    }

    public void testMissingSwitchFailingIntDef() throws Exception {
        assertEquals(""
                + "src/test/pkg/X.java:8: Warning: Switch statement on an int with known associated constant missing case MeasureSpec.EXACTLY, MeasureSpec.UNSPECIFIED [SwitchIntDef]\n"
                + "        switch (val) {\n"
                + "        ~~~~~~\n"
                + "0 errors, 1 warnings\n",
                lintProject(
                        java("src/test/pkg/X.java", ""
                                + "package test.pkg;\n"
                                + "\n"
                                + "import android.view.View;"
                                + "\n"
                                + "public class X {\n"
                                + "\n"
                                + "    public void measure(int mode) {\n"
                                + "        int val = View.MeasureSpec.getMode(mode);\n"
                                + "        switch (val) {\n"
                                + "            case View.MeasureSpec.AT_MOST:\n"
                                + "                break;\n"
                                + "        }\n"
                                + "    }\n"
                                + "}\n")));
    }

    public void testGetEnumCases() {
        assertEquals(
                Arrays.asList("LENGTH_INDEFINITE", "LENGTH_SHORT", "LENGTH_LONG"),
                getMissingCases("Don't use a constant here; expected one of: LENGTH_INDEFINITE, LENGTH_SHORT, LENGTH_LONG",
                        TextFormat.TEXT));
        assertEquals(
                Collections.singletonList("LENGTH_SHORT"),
                getMissingCases("Switch statement on an int with known associated constant missing case LENGTH_SHORT",
                                TextFormat.TEXT));
    }

    public void testUnexpectedSwitchConstant() throws Exception {
        // Regression test for https://code.google.com/p/android/issues/detail?id=204326
        // 	The switch check should look for unexpected constants in case statements
        assertEquals(""
                + "src/test/pkg/X.java:9: Warning: Switch statement on an int with known associated constant missing case MeasureSpec.EXACTLY [SwitchIntDef]\n"
                + "        switch (val) {\n"
                + "        ~~~~~~\n"
                + "src/test/pkg/X.java:10: Warning: Unexpected constant; expected one of: MeasureSpec.AT_MOST, MeasureSpec.EXACTLY, MeasureSpec.UNSPECIFIED [SwitchIntDef]\n"
                + "            case MY_CONSTANT: // ERROR\n"
                + "                 ~~~~~~~~~~~\n"
                + "0 errors, 2 warnings\n",
                lintProject(
                        java("src/test/pkg/X.java", ""
                                + "package test.pkg;\n"
                                + "\n"
                                + "import android.view.View;"
                                + "\n"
                                + "public class X {\n"
                                + "    private static final int MY_CONSTANT = 5;\n"
                                + "    private static final int MY_CONSTANT_2 = View.MeasureSpec.AT_MOST;\n"
                                + "    public void measure(int mode) {\n"
                                + "        int val = View.MeasureSpec.getMode(mode);\n"
                                + "        switch (val) {\n"
                                + "            case MY_CONSTANT: // ERROR\n"
                                + "            case MY_CONSTANT_2: // OK (alias)\n"
                                + "            case View.MeasureSpec.UNSPECIFIED: // OK\n"
                                + "                break;\n"
                                + "        }\n"
                                + "    }\n"
                                + "}\n")
                ));
    }

    public void testMatchEcjAndExternalFieldNames() throws Exception {
        assertEquals("No warnings.",
                lintProject(java("src/test/pkg/MissingEnum.java", ""
                        + "package test.pkg;\n"
                        + "\n"
                        + "import android.net.wifi.WifiManager;\n"
                        + "\n"
                        + "public class MissingEnum {\n"
                        + "    private WifiManager mWifiManager;\n"
                        + "\n"
                        + "    private void updateAccessPoints() {\n"
                        + "        final int wifiState = mWifiManager.getWifiState();\n"
                        + "        switch (wifiState) {\n"
                        + "            case WifiManager.WIFI_STATE_ENABLING:\n"
                        + "                break;\n"
                        + "            case WifiManager.WIFI_STATE_ENABLED:\n"
                        + "                break;\n"
                        + "            case WifiManager.WIFI_STATE_DISABLING:\n"
                        + "                break;\n"
                        + "            case WifiManager.WIFI_STATE_DISABLED:\n"
                        + "                break;\n"
                        + "            case WifiManager.WIFI_STATE_UNKNOWN:\n"
                        + "                break;\n"
                        + "        }\n"
                        + "    }\n"
                        + "}\n")));
    }

    @SuppressWarnings("ClassNameDiffersFromFileName")
    public void testWrongUsages() throws Exception {
        assertEquals(""
                + "src/test/pkg/WrongUsages.java:33: Error: This annotation does not apply for type String; expected int or long [SupportAnnotationUsage]\n"
                + "    @DialogStyle\n"
                + "    ~~~~~~~~~~~~\n"
                + "src/test/pkg/WrongUsages.java:38: Error: Invalid range: the from attribute must be less than the to attribute [SupportAnnotationUsage]\n"
                + "    @IntRange(from = 1, to = 0)\n"
                + "    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
                + "src/test/pkg/WrongUsages.java:38: Error: This annotation does not apply for type String; expected int or long [SupportAnnotationUsage]\n"
                + "    @IntRange(from = 1, to = 0)\n"
                + "    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
                + "src/test/pkg/WrongUsages.java:39: Error: Invalid size range: the min attribute must be less than the max attribute [SupportAnnotationUsage]\n"
                + "    @Size(min=10, max = 8)\n"
                + "    ~~~~~~~~~~~~~~~~~~~~~~\n"
                + "src/test/pkg/WrongUsages.java:44: Error: Invalid range: the from attribute must be less than the to attribute [SupportAnnotationUsage]\n"
                + "    @FloatRange(from = 1.0, to = 0.0)\n"
                + "    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
                + "src/test/pkg/WrongUsages.java:44: Error: This annotation does not apply for type String; expected float or double [SupportAnnotationUsage]\n"
                + "    @FloatRange(from = 1.0, to = 0.0)\n"
                + "    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
                + "src/test/pkg/WrongUsages.java:45: Error: This annotation does not apply for type String; expected int or long [SupportAnnotationUsage]\n"
                + "    @ColorInt\n"
                + "    ~~~~~~~~~\n"
                + "src/test/pkg/WrongUsages.java:46: Error: The size multiple must be at least 1 [SupportAnnotationUsage]\n"
                + "    @Size(multiple=0)\n"
                + "    ~~~~~~~~~~~~~~~~~\n"
                + "src/test/pkg/WrongUsages.java:47: Error: This annotation does not apply for type String; expected int or long [SupportAnnotationUsage]\n"
                + "    @DrawableRes\n"
                + "    ~~~~~~~~~~~~\n"
                + "src/test/pkg/WrongUsages.java:52: Error: The size can't be negative [SupportAnnotationUsage]\n"
                + "    @Size(-5)\n"
                + "    ~~~~~~~~~\n"
                + "src/test/pkg/WrongUsages.java:57: Error: For methods, permission annotation should specify one of value, anyOf or allOf [SupportAnnotationUsage]\n"
                + "    @RequiresPermission\n"
                + "    ~~~~~~~~~~~~~~~~~~~\n"
                + "src/test/pkg/WrongUsages.java:62: Error: Only specify one of value, anyOf or allOf [SupportAnnotationUsage]\n"
                + "    @RequiresPermission(allOf = {\"my.permission.PERM1\",\"my.permission.PERM2\"},anyOf = {\"my.permission.PERM1\",\"my.permission.PERM2\"})\n"
                + "    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
                + "src/test/pkg/WrongUsages.java:63: Error: @CheckResult should not be specified on void methods [SupportAnnotationUsage]\n"
                + "    @CheckResult // Error on void methods\n"
                + "    ~~~~~~~~~~~~\n"
                + "13 errors, 0 warnings\n",

                lintProject(
                        java("src/test/pkg/WrongUsages.java", ""
                                + "package test.pkg;\n"
                                + "import android.support.annotation.IntDef;\n"
                                + "import android.support.annotation.IntRange;\n"
                                + "import android.support.annotation.FloatRange;\n"
                                + "import android.support.annotation.CheckResult;\n"
                                + "import android.support.annotation.ColorInt;\n"
                                + "import android.support.annotation.DrawableRes;\n"
                                + "import android.support.annotation.Size;\n"
                                + "import android.support.annotation.RequiresPermission;\n"
                                + "import android.annotation.SuppressLint;\n"
                                + "import java.lang.annotation.*;\n"
                                + "import java.util.List;\n"
                                + "@SuppressLint(\"UnusedDeclaration\")\n"
                                + "public class WrongUsages {\n"
                                + "    @IntDef({STYLE_NORMAL, STYLE_NO_TITLE, STYLE_NO_FRAME, STYLE_NO_INPUT})\n"
                                + "    @Retention(RetentionPolicy.SOURCE)\n"
                                + "    private @interface DialogStyle {}\n"
                                + "    public static final int STYLE_NORMAL = 0;\n"
                                + "    public static final int STYLE_NO_TITLE = 1;\n"
                                + "    public static final int STYLE_NO_FRAME = 2;\n"
                                + "    public static final int STYLE_NO_INPUT = 3;\n"
                                + "\n"
                                + "    @DialogStyle\n"
                                + "    public int okay1() {\n"
                                + "        return 0;\n"
                                + "    }\n"
                                + "\n"
                                + "    @DialogStyle\n"
                                + "    public long okay2() {\n"
                                + "        return 0;\n"
                                + "    }\n"
                                + "\n"
                                + "    @DialogStyle\n"
                                + "    public String wrong() {\n"
                                + "        return null;\n"
                                + "    }\n"
                                + "\n"
                                + "    @IntRange(from = 1, to = 0)\n" // wrong range, and wrong type
                                + "    @Size(min=10, max = 8)\n" // non-positive multiplier
                                + "    public String wrongIntRange() {\n"
                                + "        return null;\n"
                                + "    }\n"
                                + "\n"
                                + "    @FloatRange(from = 1.0, to = 0.0)\n" // wrong range, and wrong type
                                + "    @ColorInt\n" // wrong type
                                + "    @Size(multiple=0)\n" // non-positive multiplier
                                + "    @DrawableRes\n" // wrong type
                                + "    public String wrongFloatRange() {\n"
                                + "        return null;\n"
                                + "    }\n"
                                + "\n"
                                + "    @Size(-5)\n" // negative size
                                + "    public int[] wrongSize() {\n"
                                + "        return null;\n"
                                + "    }\n"
                                + "\n"
                                + "    @RequiresPermission\n" // Must specify value
                                + "    public void wrongPermission(\n"
                                + "        @RequiresPermission int allowed) { // OK\n"
                                + "    }\n"
                                + "\n"
                                // Too many values
                                + "    @RequiresPermission(allOf = {\"my.permission.PERM1\",\"my.permission.PERM2\"},anyOf = {\"my.permission.PERM1\",\"my.permission.PERM2\"})\n"
                                + "    @CheckResult // Error on void methods\n"
                                + "    public void wrongPermission2() {\n"
                                + "    }\n"
                                + "\n"
                                + "    public void autoBoxing(@DrawableRes Integer param1) { }\n"
                                + "    public void array(@DrawableRes int[] param1) { }\n"
                                + "    public void varargs(@DrawableRes int... param1) { }\n"
                                + "    public void varargs(@DrawableRes List<Integer> param1) { }\n"
                                + "\n"
                                + "\n"
                                + "    @Size(min=1)\n"
                                + "    public int[] okSize() {\n"
                                + "        return null;\n"
                                + "    }\n"
                                // TODO: Warn when using on collections that aren't supported
                                // TODO: Warn about inapplicable nullness stuff (outside of IDE)
                                + "}"),
                        mSupportClasspath,
                        mSupportJar
                ));
    }

    public void testOverlappingConstants() throws Exception {
        // Regression test for https://code.google.com/p/android/issues/detail?id=214161
        // Ensure that we don't flag a missing constant if there is an existing constant
        // with the same value already present.
        assertEquals("No warnings.",
                lintProject(
                        java("src/test/pkg/IntDefSwitchTest.java", ""
                                + "package test.pkg;\n"
                                + "\n"
                                + "import android.annotation.SuppressLint;\n"
                                + "import android.support.annotation.IntDef;\n"
                                + "\n"
                                + "import java.lang.annotation.Retention;\n"
                                + "import java.lang.annotation.RetentionPolicy;\n"
                                + "\n"
                                + "public class IntDefSwitchTest {\n"
                                + "    @SuppressLint(\"UniqueConstants\")\n"
                                + "    @IntDef(value = {CONST1, CONST2})\n"
                                + "    @Retention(RetentionPolicy.SOURCE)\n"
                                + "    public @interface Const {\n"
                                + "    }\n"
                                + "\n"
                                + "    private static final int CONST1 = 0;\n"
                                + "    private static final int CONST2 = CONST1;\n"
                                + "\n"
                                + "    void f(@Const int constant) {\n"
                                + "        switch (constant) {\n"
                                + "            case CONST1:\n"
                                + "                break;\n"
                                + "        }\n"
                                + "    }\n"
                                + "}\n"),
                        mSupportClasspath,
                        mSupportJar
                ));
    }

    @Override
    protected void checkReportedError(@NonNull Context context, @NonNull Issue issue,
            @NonNull Severity severity, @NonNull Location location, @NonNull String message) {
        if (issue == SWITCH_TYPE_DEF) {
            assertNotNull("Could not extract message tokens from " + message,
                    getMissingCases(message, TEXT));
        }
    }

    @Override
    protected Detector getDetector() {
        return new AnnotationDetector();
    }

    @Override
    protected List<Issue> getIssues() {
        List<Issue> issues = super.getIssues();

        // Need these issues on to be found by the registry as well to look up scope
        // in id references (these ids are referenced in the unit test java file below)
        issues.add(ApiDetector.UNSUPPORTED);
        issues.add(SdCardDetector.ISSUE);

        return issues;
    }

    private TestFile mSupportJar = base64gzip(SUPPORT_JAR_PATH,
            SUPPORT_ANNOTATIONS_JAR_BASE64_GZIP);
    private TestFile mSupportClasspath = classpath(SUPPORT_JAR_PATH);

    public static final String SUPPORT_JAR_PATH = "libs/support-annotations.jar";
    // Snapshot of support library: support-annotations-25.0.0-SNAPSHOT.jar
    public static final String SUPPORT_ANNOTATIONS_JAR_BASE64_GZIP = ""
            + "H4sIAAAAAAAAANV8ZViVa9ct0gjS3d3d3V3SIN0dS0pAEGkRkEa6JEW6Q7q7RJBuEATpxrNgB7re/W71"
            + "O+f7cZbX8wNZazwX47nXvOccc8xbSQ4C8j4YGCwsGL4kiQwY8AUO9scLDngpSKiJMMgoSjJBgCn9/UZZ"
            + "ezyZMm/wHTzgG3CAF/r3b1QQUZSRlFBVY1SQPFDo75OXY2AceSDHQDvYP1SuwjzOtrC6tAoOAvb9XWGB"
            + "l5G9qaODlel/3PT79yF/9z4nFwDAwdH5h/eD/jV4//B+I3t7B2cjZysH+//4KCVx/zX5PTCwNeBF8+8f"
            + "FXF0NHJXMXNiNLE1cnIKiFB4CM6CHDhPWuLre+ry1fBSlrsMJjyVlj7S9IEpiS5/fJm8dM9o1CwjnPeA"
            + "n1AzkZmtAjpS0mTWrrxF6qb82vLBF4JmgUGBZDfuI0CnEtEWf1g+E5qx5Vd2jOkXZYMqtpBtEjF0ZJrs"
            + "sQnJFO2xo5LY+eqdADTezof+2qdLXIsnzsnF0jiJQsy6WGwoOHJaQ6SxYdKO03VXSLyjwaHVRel4+3vx"
            + "i2U1hqSjUDh9s5jrfv4zbtFfEunVvBApH7YRitm1k9kTiZjyHcKIWJoMACZXF7dipCCusaERnogOqDKs"
            + "P4sr/sjL4f3tagpfzObjE24dFVvsovtSU4XlA81KZU+QdmKUrifuv51wtR0vd51fs/HnRQRszGDFwD1g"
            + "T8HnseLhuQb/keqeetNcTCDNjT+nWszB1sFRxt75T6qVFOQgWNCTx6tsCgqPlpdE0AMI+WuCCAU66joC"
            + "Yhnq5ZgIyWcDo6IozZIYDovdv8KcvmkXH/bQYo5wFzOfa/gqKDg/dw8BsLY42RYcpOrr+raPdJ2MhEfE"
            + "Ii+bUdRsB9O2DXYwWgWndAWtFFO1J1/lEzNZhTaarsTgslzOmuAFxqU/XhF+PZWlbTy9ne03oi0tuUgH"
            + "vTbmTCtZgPJsRKnxYNiRnuaWz4pcUryd5kyitkni8DoxPKpvTuHDPTIRrpdB7B4pw+RZSMqGUq9aicta"
            + "H6iWi4YkNDFq0unFN9UK6ZBsfFnrHIMa+jJmtqrpWvAZDXl8e9aPj2O8qdQnp7A6zl1jet0yIwxCykBp"
            + "nVu8S+RjS6TfHNaP5ObSWYvZA4k1B34PKP6dXFUrD7M/iY0cUmwVRu608FEhoT01UIPkQX4/6Sf1kC4G"
            + "Nj8mJrDdjRj+namMFZ5lsNvI+v4CxKnSZ1u1DZ92gf5Bz3mHJ5zlRGkOu2AAKAqM+7To6txk6f3xaI7g"
            + "ewch0D4Mn+v0m8EXa9Wvu0WplBqfYZGaLNIWfy037UmNeR1QzympfYqoeQ0LvlmFpXjeQIm/HWEdYvGM"
            + "x5hNktgiwJ64s4EsJ3P9q9lHGp9MEpwBox0lE3ixcrdmvQQ9NOpvfhX8UofrsLQYflXTkPsFSJO2rCv3"
            + "HLM/NO58ZZmzHPJ6pfRWgsEjd7pOwnCMmW58wzVPPZcrUJE4uLPwUUdcZZ39QmrGQI6Var09Z/2xF3wk"
            + "uBMM2kOECquNiznyF65R5SQReo2t22FuQs1idERV+FoJC5rtK08WutHgwOGUSmSNMRyevxSlpc1S1gq/"
            + "j0dtmimK6TDdyQ7NVxJSHzhF+AkO8QIAFsTqBRYghvjKlDtuUTywASF3/scHJt2E6EcKfGArwIv63x+Y"
            + "gpm9yw9xB/jMAucl0n1f3MYdbkDWTdyJkVYBp/EPgSmPgXukUpU1G/X1I/8pxKVy5yOTdjE0rqkn5hap"
            + "Z93PPBvfQ7g1Z/uxwawjMkJ+jiZ/SPa5IB4SV2zUXfqRBUW1ygJtf6WyTWK+/IDJfoViKDvtSEKzniEO"
            + "V5zHZu+8/7RcpqfCp+El5YWqeLge5hZCstjCUKfUmWsYAqrSl65V6Xhu0cHNLo9b1HLkWPtnsdav4rc9"
            + "xmYDsd8iXm0e5FEp4T3N6EISWoG78iECvMMJrdP/ynvQ6nOCfjqj8lkiMS8gaTVJISqxyctbUDG9kogv"
            + "sZiaFZwrIGnbu5yBWGnpKdhTWWpvGyj1KoJXvLZIPAZk44/9A10MlCjx31ittsv29W6CfDEoUnByfpFn"
            + "EXsru+947lMEZ0EP/EbK7PvCTaeGWR+TPgFKThMjUJoVmhWZk1EeB1eFtcI0R6y1oPbrPU/q5XyWJWPU"
            + "pEOh3HXP9ahbnjeWRtsSgpyQsBCOgnvGtBDVSHFwdQtcyMsHZW2h2tRjbAomHHNYOR6Sf/ykZRQ7gtOm"
            + "t4EthOKxGTLvP8/1uDHuU28HRJsdC5qMHKS7v1oVaY+V4wWRsy0qxq6uCNNKNFzbDc9ZclbB9UyDMMHO"
            + "WwpP8GSUjnjiBcPOESpZwrkFfF9QIgSKSJeac3/e++rS+YbEGwHCmuaQlMN60eLM3ETlonp3qIul4thE"
            + "6iA2lKFNYZHyYt6WjTlmg7A5BbV3Xlsk1jYok3BKrPcj+Wdu0bZaJmo5/DebK+0yfT2gPKvE845TAjne"
            + "AV4MPwlAzu62ZkbGtmZ3ZCvdbqYpwL305UJXi9/e8nOu44UR1QCKqHc+26iMhPKPKLOyKpLuNtNkD2RE"
            + "4GbqkHMwd6iwtnWxjAZGuDjqx4Y0KFBjOByqEEnBHXMfx9m4Xp167T5Z/1O6UhSEokxRndrOhH4KFF0b"
            + "k4BYyXWEHdHcvdhhOYNLlOtm8g7cyo4ONL9pRwX/OPSYyKwqlLfEFztCo8HKrFN1gc+6l+NbXNzb1Ezl"
            + "KrLqmdYhAuwbNjklUD8Y+G32uTWnsyyi5EohR7YB0P3VbAKWBZHmLfhx99aZDb8SH5KyOS6uSyQm9u98"
            + "q28SgP6ScuLW2NrOWkNDYFE9yggBjVEHs6AI9bZJy4+3g1Bd4GVQOxdyIgCyi9HLj7YVrgI/mdeSb+MS"
            + "JHPJR97q+NWF7ezs+L++sGc+sUcBA0iV7yJtb6W6DY9qQiJVlI3du5LejdBFRufQNNj3hx0OrbtJ3AZy"
            + "dqtLPotV8cFZFL78orQ6kSvstcC8hTP45ZOidKz9Hv/FuhpD2tHsinZgAPETrzvKqQ8jzzvHl0+T9Ar8"
            + "FC+VTCgijgbdRpylxYZ/5HbKuzwSIRR4rxLdIxK38mu5ZzlL/tX0yfoytvZF6Zsz2c64xRxA9JVDFQ62"
            + "rDPSgiLcqkNhumyVmHL4NsmqDaoLfsYiMG2heDXi7LiUtbpyCP8jz9rmWb43PC8BL6p/51nF6Ml3NA8A"
            + "aUbuyoV995z0GQE/thAi/hRwb8WIky6DHp0F7Bn2spJQyMm51mPrD/ghLYjh5OKTUwKX9LeEwUtKtpTi"
            + "3fCHYG7P5ZAG+blPFnxF2Fgl4haUsrvTKVbqmxuqY/B6FmTRP73FUFQvMqdxLAyL1cBJYauBJ1jOVWHy"
            + "PEv6CkNJo5HHMEiEMxPHBs6AsoKiMt1dkd456z0cLKNe5gJ1FSGF4re176tlDg+k+fW6H/qs255rGOQH"
            + "A99Td37D4XhAyyYK7GdmfCiSjk+LNUNt1TRYZNfo0Idm+esJyk5CTBM20VNCfjvHnenlu7ypDCylCPay"
            + "MFNM5X3PRQJ27tWo+nxWtFGimn6TJ3Ucsf/An7Jiobu2WEmCO7AqGo2KgCpX6EeaIZja228S8Q3gRfvv"
            + "NMsbuTu4OP/jgn55u6CNtVjh44poESJNEUyJbXXjWZMjojIo2AhQ9QcCbpjWwVr4Y0ELzNeueHp5e4Jv"
            + "LPS21QbBI71GOCodHIs/ZyUJlKSu4uVCMfuSPQkbuEWtKVlkScvGI/eCLjuMWaUgdFHwZkVXfu1gXPgr"
            + "E2eZwfg+E68/+iMTZ8y4zcRzuI1uM3EB9K67TPwBJdOPmfik0xa2q/up4OrIc6Gge21vlA7U+mrTVrcq"
            + "FQfm6+o/sLCfhAWVU3QELlYB4q4EdRAQKJ7ermiDwnRru+lrjwnCT25hSl0or1IuAlkXIR9Q5SomKg4+"
            + "AwkdfvN7L9mAPEsDk0Xunyxps8cuVo5mTkpmjnZWTk7A/yJXMTMy/YP5WGU9OXARdIE3RUnm2V4yIpAo"
            + "xkiVauHvyWujDKmTDkfH8rhwHlnYWWhsFB8NI21ISTyBY+3GItqpdVon3OF5snawdQXRzPGWkZbRVW8b"
            + "jtsJh5Ic8EhoS1rgJRnHvjxrkkTpUdZEZKyGxCf4DQ5llgTCDlUzBINZWDXcJn/K993kFeBzvaovw5VR"
            + "kfKzRauUrx7WxnfXonPDotp9iEmNUfaLwByVXMiLdmxQ+rxnUNsY2mX6aMnUfR7JSvbT8bx5O3nuh2M+"
            + "BZ9Lv/mm3f2MYRvIB4yXzR2NzR9kQ1KgyaXAa9PUrG0U9vSow0iOdfQnNxEp2Vee8Ol/BpRmN5/JnnPc"
            + "80GQimvSXZmEwy/a1+WpBvCYlXbGi9yTGAya0V3vFiCTozYiCxhAryppuyId9TGz/XgfJAkceMLkTwF8"
            + "ENvAi/7fH4S4o9GT/7pn/pkHmiIRCqhrkcr8WX/yAeNL/dQX41Mbwst719TL43540Qq2o1xj7g6sxQdn"
            + "R9f3wE4Aiy35MBaEyWyWQ/KREtwqcKwbiGxnlK/hAuNPPjrS4egGBlRZ+8HH0pHWTHTKFoQO4szcz91D"
            + "y9dsvKS4zAh++cA6ZA/CL8la4cXtnlkaKyMy9vSbdC6l8sggBwJk2gC2rjpXv1mVqFxdvbWg9PBU0q4K"
            + "ufIBT7yQQiCCtiqhowckiQJ2GIRI5at4hBo3va+AfiIJYcLsV2xvjIWYRsdNj4ea+lZHaPtGoldxyfoW"
            + "6kYVakcIIaA56p4uKD74LDT5nLJDELhlXrRXI38CZt2MXj68rSjO+Ph8G7zcZ9A/0r3ny2KMDaR67Ocx"
            + "RsTeXc3S8e+VHhAh8LCNGTnQ4IRuWJSGCB5iSSwPFR6Hl1XdDkWMRN04Ajk6KfllwfgrlVyVb7gQQs+J"
            + "AkpwtAOltfafUs07nWifHF3twaUHoSEFEb7ix2djJ9NbYZnti8H+5FW5tssTvOLKqOG7yE4fEwnvESnH"
            + "o5BfHMPZKl0Yh/DapOs0X4nNwPb+tVJXh29MxsqrxcxkuB6tVnPM/GJxba3dHaEN8VxW/frAlhoiCQSL"
            + "1Qe6K2yscfW0xeEqjvPLW6H04274e0GG3cO4kA9RkNJg+GFxrC9dWI1rMGl7KuUvzSLNeLm81201Ooan"
            + "cKHGeIChpWH8aX0TI4RYxxztTH76cYELu21DaXFqGF9Vo5xlZoDA68YM2Ump6R6f6EGkH/m9kuQT+UUx"
            + "5TYH/KfNMp34ZrNsQn213fIm974c+SOIKYo/xBQZK656PdS/NkvKl0HAtfxN3uLZWEJ/1/o0H9hMWy0M"
            + "FWGyB6AzHSeJVA5AjcFq2eFawNzaUI2K17JASlsRa5PcozuIAdwtMTRwgbslHMEyXcbrxlOFU4hodJtx"
            + "TCwkhKK+BNg/dktYdaUtILnt1Am2eiJCK4/7F8oaDGnLKLSX7PsOfES55pyTSEWO1g3P2QmZLeXd2jdR"
            + "xMeNuO+Lvqxse5wWVMxGGHZqgs1cg+YRiVP79YBUQcH82/VFOQ90it78nmdAsBlAnbfXPkUPGoHW+aQ5"
            + "5b5aUyW0S5nASw/TE5p5YcvWe/i8J1BvYRks+XgcRx87XkL9SPVLzwK+X4wcN2WNkbPD9xnge0XgYu4a"
            + "yraz9FFphIZu7xouxcFOkE96KSuSH5UHD+EYrbpKW/mmPX9c02Thnht1e4KP6wt/im+7nid885uNjUKC"
            + "9xZQivC5nyy0+shBz0prSviiJZD4CWo6MoQyitIH3WbbbbI4tZ219KukYkW3q1kW+qTRbEY+L5vuGnVH"
            + "i+oDbmzLYXCLngBaJgkwC9TGi1Qf9/qKxDuWIF9VZbhyQG0MUDVADjEODqwJOm94nUHANLcmrXTxIcTA"
            + "l8VvMDQomVBfmoBSdShXawhJcsY77QDQm+YVbo5Oy1AhP1vW66QXf+V9EidVMFOJiEknj+A3/cnKFY+A"
            + "2XA4/SnYMXv6WQGDZTSByjjJU+kzRFGsVwuTdQ7D4tw+qbGqdF50FiDZCSINn+052B/aldS/061h5WQF"
            + "jNOSDo5qZk7OVvYW5EqODqYuJje/vP2dla2Vs/ufG+jDG2UL2WvsU5GeTiGpL5VAd2q7gNuh2ksoEcup"
            + "tyfOT6hpWGhkqoab1lqIFsJR0VDotJBh1vxO1h44zM0Z6N/TXaYW4WoR8RUkSUn8FMcf9RKO6uFoT8JS"
            + "ZCnSdsP4QUGAFlyrlbINU9pZCJGlXcPXUUsp7qZwvlpUj9QQB1KmyfJXYw8yKlHfIp6UC2lQSfY4EkB+"
            + "2TwtxZ6j5CZH8C96F6m+83l1VOub6lnfbkd74ltGsrMeGYqrREADwc6c1YBrnr8TvuCmw0yYBTyjwKJt"
            + "weLAN/++b5N9sP6S3ZTG7KVo1hAMFWK7UPxwtX0bxB3PnquItxB6PFqH+JFercHpdH1gMtIKCQbG8rOE"
            + "xMnZ0crEWc2BXNXEAfCnkhWravdwTAn9GePWRBF6oElmw6mgM0QGcXoniiE4blQnDq/0C6L+bDV6muqs"
            + "rVM9VlQW3AdpV8qdTkwhosSdlT08Xh6D7oNO9g+9r8/PIZoRUi0yMmyNEZZ5oZ3l4zc6stirfJJlRHTM"
            + "5XE2Xj/7JCxyTsVrjh36casyrHr3owb2aBEWwSnCRCLyswb8fck2B2Z5bt3tduUSE65EGBjl5EndF9SL"
            + "MshwT2cdyB8vUBzl5b2lE1c1cNli9Nu0b9B1fVtULyvMZK+R8uCM/axIrLGfBClJpVstf8aqsAr/y7A4"
            + "DxXyddLadRXRxzNXaQdnCe2LZiUGnqeXEdMkWPVVcpDG1So7JQpzwfyE9vvcEdtfMBMXLhpD9TJzE9Yg"
            + "UMjhESA0nQ3oHFRc9lnSE8rtS+jcRkODadSj7pnMwU93hKxba0o4eTeSTcFjnIVlmm+fFYPTcJ9wmamg"
            + "6tQwfrRqbqVfc+Y3w959Pt/KnPqoJuQppmO3zsbrnOf8YrsSUxWs+thwKkrUsUNhatNzB+/91V5da+oE"
            + "1h4E5R9XO36ofj/5voxdQUiM6Urm02i62v2IXYcL30MvsX1yU+iyGp8kQ2xy57SGhn7MSQvnFNKjYOQ2"
            + "5KnQl+/TL41CKw4sRrLnEt3ttuFHc4dNn30MuNQxLSynn+kkwMglI6fDyYnMxBvu6pRSjOA5l6pV3Jfm"
            + "JcxLJkUIjRJAWxoj3n/7zK8q9qMqFfOrSPXmcfQNjWZZuuHoM0XqD5lmM6PaG67VowyHNV2GUt5rA3S9"
            + "EoeGASV+UuSUH+yvIyIOKXRVnUYcl1nO46C9QRar564VRhswDghDgIGx/W72/OdyVVF+iCaCfB1XlQyl"
            + "JoysjCJu+wnmvTihV10MGWf++7WdcWmi/lHEgagv+u/fk20aHNx8+1kHKY1j2Vn4Z7a3+08GPLn4hJ49"
            + "u0BcwGYSwHdz21kcboP3+ZSri0FeMsESuF8VNxF1BCBXCpN5hQ2gcOl5Xmhe8JSmOKs4G+dCJpKO7Rld"
            + "CQp2NEaZUgJPBvyjz6Jg/VHaUljg0wMThiiFlAP9q5pBCTg0XXHa6aO2KepaFFhaMmWsRKP5ozNPqXKK"
            + "s3t7jmnSqG1wrj9hYEyGyanmwXmpaaTYJIaUgsN4c8R5oz6Th8JZLw3t9Ca+ki9Y7N+0e+JHjjKpIy9t"
            + "Jpjj+zgo5CAjB05T3kLVePgq/WPIKPEX8fdMm+vPqEsuBeXnJaj4w13H5UZPxfjCjHc8PsHV4xee+HEb"
            + "SneXao6G7suHeeoo5j7Svyy4WIuHnFj3zTyQw92/2GYa505Lad4rTMS/msvgqjapvbKGfbZFcT1Trllw"
            + "WaC1OE07T4tpgw9cwh997om5eXBBbE3WICYbRdMJGD6B05lcG7PYJcnd8ifgby1ygslDIVwOZnuYMuW0"
            + "lsB2oWU+Shn91j4Ez8XNc85q3Pvej2tiXIZgq+imegX/aWYpbmVnZn+3FMJUFBzGhJG9VKk44OwsaQyg"
            + "ZJtGX+gnQkgpTk9ixMnb8lDSLinZRWc7mk1Evi8ab+r0IWoOF00Jg6RRIY+oXOY6mAu16Do4+HhCBDa3"
            + "2N3RGAKBFcRY599JlYLTqp1eSQtT+45WHUWjIV74npGX0kavtF0na3FsG0azrac9CgtuB2YhIMVDv8v9"
            + "af+jJNGtVulojE+qBmYpbGOEGC48yhaPimAJmC5ynDsueyobIv2/ZE0Emiy/62V0quxeNz8WK9hcVzE4"
            + "WiXK3MWITgzB5vB6OKlTJBNjBEUWx+6wjQH73lt6mXSIsprTCPnlyIuScn6S2NVY1nd8WoMXtWVfsqvZ"
            + "OjI/hD87J9mHLdQi9yUQWmRKhnrWXaqI/UDcjQVThlhRLO2rNEKQMu0oMa5+VprJK+fs1DgJzi+aR7Ya"
            + "MWvFMpeElEYmI7LO7oWU/Kez2bMMlPLc12mf9OqpBcqa0sLbhjh1+Q1nyvCec14g7Z7ZbBfPH/ClQxsg"
            + "4OFPrbxAK2lvWeapDaA6WHX+GjM/pLWvuwil6Wa1iMWOob9YycE30VBq/jFR4J2jaJL6A8EB/S3EH596"
            + "8/bFG9xfqydUgZuWvYW4mfmfKZhynyyECPK7QRsOa8KXMCjK4r76M35SD0XIYKMe1BcQ83STW7X599hO"
            + "9kPvA6s3MCHZbWpyHkh++Ycc6h86Dm81i5oWn6DEoLogL9HHOfKd/m19BTtj0gMxDjEE55FylQRzqJ8V"
            + "bNBykxW3BZoK+rlFeWTLKoaQPr0o3afC2PcwosIPSHDx6GfyePs0UPOaZtGWQZQBTsi0y9WHvGQvPCsa"
            + "ezYtpAQdamhRLwRQNoVS4Nyt6L+edBa3WBoauo6GqVw5ZQ/zmO0ZwieHPRupTn1qPmk0ga+5U6ZRWfaz"
            + "9Z5sGVW4hIeSM6+vku37dRgyRYhXVlZW+fKEqdOp9WTqPDVlEeccZlurZrp8e0WxsPkmO+bAXUVC778F"
            + "ybt0aPZLyH6torj9Xn3fJrG5bc9quRQUTjwj8KC+Ag/faTF5mF+kNpn5bik7CPUjcaQdaf2jlqYJMW9h"
            + "b7XNrBhZowyfBrYEd0q2npuK4jnj3+3ZtHj+sFVhiqiMEc1iFSnWrXftksy64rVV6Dd9ErSeSk4NLTPn"
            + "P9uz+uc37VmF5DECDcYdnKKQBGlt0m6yrDIUGcXC6W/pJtF5blv3PUjS5LEZQ+BzSPVk5WbsHgtKZ+E5"
            + "1OnJ+b592HL4eNwiL8y9fRMZWFEwI4i+5GhTDg9iYiN8cCaGzTwD9146TPv0UaN+0vi1+8nQEEuFq9cf"
            + "+r36InX97o1+b7nbUvidfu91q983ZzilKcdZpm+udMv09eyBNhCXV+B/UU4WdXCw/Y5ouYd/lm7EpI2I"
            + "hKHhEFI30r3PrXRvX+PGbJYQEXXbBzcY8CNqRjJLxiUj5CyV+caWcjZAdnXq+RTmOUzN4UK/nxMSIza7"
            + "iaopzassUejCRhbam8pNp2WB9j8rN/i/KzexaMybyi0cwf7vyu2++vAKsHIbp07Y0W0hvqnc6hqIUaZQ"
            + "GR6frJ4JZ+gwTdlFpJ87RfArBCLgqhI+9oBEUcAO84sw/gJgXVjcCpUymUO6bZPcyPYd5iasf7RJNra7"
            + "FNfo5Bn8kkYVjpumzJrTRU/AZvKFj3R+0DnxRfpqmb7TOQ1+5Nmdp1rhJmZM/bxPoungaGPm+N9kiP0R"
            + "cHiIJRNqYxIxqZy3DMbUWbIIsCy1Pfk1WY9XeWPPP2Kf3ruk9h8Q5hNvjZrnO0ut/1h3KyoT4LtbunN/"
            + "BXQrhasVmdTF0rBUpMY+oxqYZw9e8aCN813k7mcjszgkx3JMVuHqi0GRfGvbAriRO1/aLoU0+c5rPhZ8"
            + "06/k2AbQ6Pc3pTdiC1F7TTpQ6HVB5JylglOsK+YwGUYaGL0EzXjoH7rK+HLLL2bm5NRaEfPtLNKp3rCF"
            + "5aFv0IugcAFCfwSMa1ZcZt2X9COylNekaUOxnElOnNUdw7pPoZZpOgIXK4afvW/lhBDrmWOdocnYL1Af"
            + "t20oK04N06lqVMh740PwujFTfrIjNdqLaoDoR5KN2HwI0YAED/88bCi62Nre6Gogrg7fEt/M08d7hpey"
            + "0g01MOGpnGXiaOhlyEypN6p99iy9Hup1Ioz3c6Febg5lflvj6EF5i9SE6oTwoeonYNXciADkBebmSGEn"
            + "0xD+7NRR8mEPxoo4NAUup9oocCoZo2Tt4RBt2kHJTi2qlDJzGsDICbAqTgjYr0Z2tdOm7+ZOnINLfs0G"
            + "x0PJbZxVFVVnuDkotDFsHVvk1eYlhBsGqdiH18maFmmyU9ZAaLM/j1fMZpx3jR5OBK3n08ksS/qsHY7u"
            + "kHBZcL0oK2FNQ6HNLNKM84l31yW9bPr7SBz5tRhen3KV1YFjXnBwjEb1U9WWierCjMHrxPJ7F3ZFXLAK"
            + "24Yfg4rzULUnD8znk45BwoTtI4eFZ0BWnwETHbp/Z1bS1sHIWcXI3uIvbpWnZduEkVO+ULTIbV2pVM4J"
            + "j2AdLLx5aJNkTMxJ8QBqy+/dYx3SaVsZLqi0SyaiS7CmTiYlC/gqjPuMpqzr/QlTUwnhxUB6a/zJ0I4V"
            + "uJkXI4SLorsJfban3GOb74eZ5Me/NNVdJYi7b+bp3bqB3E1t1fBKWWSd5zH1qAj7yhvwL+9eIWspOdIy"
            + "z8dYoe5rkyPTf/A37bV4/NqAv5yETGl/TEtCYO4l9MibhWhoaEhEvcJSyF4GTkQtQU3+iTkMn8uIYHT4"
            + "tGsyO2mUACbejKVR82hhd1fR5ihGzTy+VIJqqF2jjoXsIWXTmU8tYUF+STZKaaQlXg0Za5OMjhIfC5RO"
            + "MiS8gvTrOQVTJ7b0hSG6CoQgnzwwVdS6jOne6MHNumqUHz9UiJZB0Uo9XBIQPFBC4Y6fmjP1zBUvRhB6"
            + "H6OLiPXAXRw60xZDnnwtJ9idHDPjq1xFxov2USLwAoY3ST4YWh1NAXO4gR95bJspba1OCPfxqzKyBl5x"
            + "1n/atlK9BslXqQ78tn9Rqbv14vye7Ulm6vdsTxgs7HXam+yZ78rR8VoAKKvBkXSJvfKD6HvkI5LY+dGh"
            + "i5TOocXiZV9v2oeb3AbKxpbXzQC9fnFg9BEIUeMUXa1yuYk+sf9ke4KQsG/ocVXAfCsIE51rFJ7BuYRS"
            + "HU5cRnDuR1xRas69vf/VpffNPW8EiEC+yP7/DdtT5mvicFogzffAf6rUiVmamdgAqXax/cv5FCnwEFwE"
            + "yHZsuOoluAQavJ82sl1D6+hLsE5wv8UXYR8cQ9eXSuXsn8ic2mBeg3nHPC5CeSlHz8lWftDfkPSkyVuw"
            + "CWxmkb358XPz52g+zefkJFuQiR+5/BJ0e5ljeeHIXtOkzMCz82rjUaWw1kk5jOaGiqZj4qR1HKaroOY9"
            + "mae5xo5c3bFrFFuwXalUdfJQ1lBQ0WYqBX+Nx7tfjHIsv72eRaDw6DgzHifSxJdNklYuwUPD4ZufYJJa"
            + "R4FnOt+GeGSz+16zljkcz1rRy4urmP31ME1447zzcSIhxKf0TEfsbNa42k1a8f12r2xPWxkLqxGp2F6e"
            + "vVWnruAsYJj8zCBIcc2tjEn9plU9tiBKornQTrG6xA+3C9OkHv8Ee4oKfwH5iN8rgJgdANqztdajo8MB"
            + "cv7h3k+jlIKRlf1/22LBGW6V/sy/lX65t+3EJJRcPBia+QTZitnXHNDPwITuG7Epfaf03/RV/knpRyPB"
            + "8O6TIa+GL8VEyDXKCNUdLdfteSTrlV2BImldaVyDz9f5MCDxYql6AclFl14GR3YHm7E3ISKUwtY88lw7"
            + "K4Bj99pP0YV2OcwGO/RCuR2gMdcsIUhlUluwf05NcSLQ2NMtGtbzQghSLHCC2C3U7ZR9QaRbaZlpDKWt"
            + "UkmmyGyp+CX9WO0Zn0U9XeDgBE08AzUnwnr22jSUKw427bHGoiJUJVHhG6PlMK8j25nSIz1RNIbt2kMM"
            + "9VZBxOSKFOdGkAAyyWe+QwNkd/7nXXEZe+e7uidiQA5cBLszbc9Gjq6S6cULQcRMrJPh0ugYH5SiDcys"
            + "IOwjFxwcC7MUjMuPvIcwh1ISu6hmMBltzLtdu+6B7rdOPt3lyRYfPzEYKfCp7HEWONO3lS1+wrVG8pbZ"
            + "6hm1b4JDK1c/iPcJE+sVHo29CxJuxOocebETa26WYUZffpSvK+sTbW/7LnGkXDsvI6dyVnRhicVIl0Fh"
            + "oXc+YJpCjjLfHpL2G3GKUsHIyxbdoaef5zihBjnpPHGgTHEaPjU4WCeWZjclool1SNZ/OXvQtFppcPUa"
            + "cVpflu2VKIcr1p4noeRx8fFFG3h2ZTlX8uiLct7500negJcLpyqeUeSqOIhYj3YcZ7JhwJDwba8QzifN"
            + "OdMiqA2DdlWLXN1TSLYzXqioIBLDmm2DygtfX0Y9ugnXn3++noFsm1mYOf6jX+z+bcCWXpFGwhdQp47M"
            + "glaBxUIyp0Ery3KWqadY/MM6GVpO+L1f7Nl7b7CNpdGWBD8nGCzwo+DBsRfQtJQ+a8wsFVnsWe/Ko3Ro"
            + "ABhrwX85xqLE8axiFFl96ptZ7emjs+m80ewNpM4Sa0ZAHGOEc9cwBFtaEnw6w/ANPeILN4aPMQqctZ2Q"
            + "g2fyru837cUQ1A0uNw/ymP52jPllEAHeoYR66H/lPGjNOEE/BUdifZSlzTBDP2/rbH19PPstRdhGyJ3d"
            + "QNkU0v7+6ylvSx3h9PYTsGNgxB65/9aWD99lktCxUTJvGbZrwksiAeAbGJsTGxc75vAj2QX1FQdiQKIF"
            + "gQGb7N/JVnL7K073KbYKowd+U04Hf+n2GnvZrCWKUbfurZJxNG6i6GQNs1hCBImZbG9M85+WmgRLcsow"
            + "xrU0pzVPqnXWXaJiB7Cd4RKA9WJ/K49YdpqpFXkdKyaCRom1wlkUG3urvBUPmlhtxBstblmKRJuEPKi2"
            + "MAdsvjVr44O057MymbaUMZjLTwO3PCnRE2HLYGkY3ZOVR9aELCPaWbWT/Kt2Dy8QXp/BQaQq+lPucArt"
            + "dLZWcGkNQYlkUz35OrnFHANB5dz9WOzt8JFu2pz1s+Ivp0xiVIfJMPNmNaf6QblxPPBW57phY+Kvvkhw"
            + "plHlX1diyqqGFEfCJ0R5JF0/H0H3XoGkCzw3fzFnSUs6AIjl+5gTSwnRhkmgCp4FNcqArpxZL9EocYLY"
            + "0QeOoVZq02+BDnmsxFbmkGW/AhbUrgHHnem0vbiC9uMz0Gf18yb/tfaWpKPRbW/lf7+9dZ2FHBypHaCF"
            + "qGlMhq0bFMvqGOb0qFciUJfGzl/i/+fuVoB9aiAHkGlZ4Irn+W0/iKajlbPZfzOEqCBV+v9lCBkXe/hm"
            + "ztQ0pTJBL6NpQkwonQhjNqCb2MCzZn0w5WnNSXLCUPEJEpiLmp6a7nbdJBpgjVVeeuHzdgPZUbe49cqU"
            + "KWeI/LZM4RutTtpRfeHiYFbTp6Y5vdqNdZh57M/gFDwiZbDh3ege0giKB+OoyAXQvzlPc+SJdKIBIJPz"
            + "aqh6qGk8ENV+VwUulRKzHKAS/q1oS44tJ14zmX73gkRBpuuqGoelx6rySlGV2Hv3ZLfOk/oQV8QPXghQ"
            + "yqRk0DO5Ga3Mguf4zDG/kCNhWklb7l1NA/I4gbxlN9OTBrXl1tzmDtn71uDgOK/oveu64VYWALHrvbU+"
            + "fTQhHJ0I96kdBVfWeKV2cB6JwuHR2OaUBBDsYEUi0pvUa5yCeBQy65rMbkrXwZ/rMIoO9jfV61+rfuim"
            + "hd7ZBKxc807Xl1ry8G8q11e3lSvk35Urhdxrf82DGyt3Zz7LkhFakrM570HSWeLZjQ4z3OL+PBos994g"
            + "5GeTJAuaoxhKn87mRJGio1lR+6xmiSi83LjDzAnrtzSsnbybMRw2PkmNFqIMA/wxTQElNmOeMp0j2/oL"
            + "dfEy3SwtKGSxYeM8dNXfRKQ0Cpy38AjPR9zoAY9mmCOnkvGdCpc83vV4O5TpoYh9WHfb596+Py6pjLpH"
            + "pqgFjOsnPB+jzOMeccB/PLM2Yzt50j+UCpnIF7voLJKPVkOLPsdQfOME1gkUotj2mr7/dtuBB69kft0j"
            + "TKnrHq6gJzCuvyBzePXe6hnIHmoQ/9j2Gkhoxc/FWjEjW1tVF4CZ41/UttxQG/hNxAgDYyQJxg+3bUTA"
            + "7VAcbPmenxGXPn/sLBwNzZec6aiv1oRuYES9k0dgNwIXX/RZUxNbQvHuEMNzKV1J7vDhMICIJVXndGha"
            + "trGoBXWMrGfLsRHNhC+A4+BTD0ZTn8ogBlIFpyK3lbNMTYqa/Dt//XZjqnay6DMMm64ztMWc1IRSePFu"
            + "8FFd+FWx3WuhjSRl1mm1wEXTCHL/LQ8x2m1fvYWdz0elS9YNzqqA59rFy4dmvKQz8Ck6ZAc1hxJG7y5s"
            + "puwChme/8aQw8Tj569slXb09hxQlm4FQy/Vpm68O1njxXilMlP/+OcubMLRkjU2YF48DQS0eDUvnCkZA"
            + "Bp/+vJr5K1SIAKz+EgBuU5GU7HFacagmlOBO8UzC7ZY3VK1S7/LjKj60u2kbksj1VlXp/K2tFEhys9f0"
            + "9A9uP+VzcD2+qR3BijLMmzPuqUO8gt1Qxc0Kfe76zAiFmssfliKWH52BM8uKmKNBBFZtVk1a0Cguft//"
            + "BJyTihJy0JYW+nE3jHmUpDK2XPR1Sw5FllzHi1nkbqRlQGbbUOtb3DBuH1+snMdpLm7PvWJ0jxP34ynC"
            + "XhiEbcag5l1aC5lRp02+NIGmLsnbZO3xf6lUcY2UjQfdICSWOVeBlyqVHufVkrv3QmYlxXz5y3OFkkyh"
            + "kMa0z0JPpiE1dqavC8dIlWx5kVJ3BTm9uiTyX32o2qtoNLWH92su7adImYs/ovBZ7mdcG8tHI44QUzWI"
            + "7zORSzdp9E0w97lXgI2Ooi9GNyOCgrPVh/PCLk+7BI5ihomFlizGogRquuRNK1bsl9ZUx4teAmrNM5DC"
            + "c8tP+T0A+KhCgI+K9Tc9C3+F8z+6FK5oH8XfdJ7wEZJTv+BxO6x4p+xrHEe+QmvC+rmbF83VAgNY6hMt"
            + "SAULiMgLi/Czs334oDer8N67ofEet2RHV044A9G0oCusnLLx+aMh2jf1tOpctBrHAcxjw9qURvSjajmQ"
            + "QtYcdSK5iunQGei4KdoZdprtCYdarr7MWFCLEgD9pmtaF6twpRfaA4oC2+MP9UiluvU4igNNU2VMds32"
            + "36nIfD1G0qrDt7R7B9hK7tWJ7IhTsk2i3+xhw3Ca6gX0aaUmZJGpFhzOjvi5ofofaeQUesQYXEoHfZx/"
            + "78xRqbVRn3hKac1gle3ahCZ63TMrmnetjJugdaSvK+aGUzHtL5ZxEax8pZ34AJqydFlPyJWiP3wliQup"
            + "rOtE/VkKN+9z5EuLzjmHVxpTPPIAt24jAsGcUwPAYEa3mwfCEDNj2OKjTicTN8J2zrjS5gQJC0c/Cn76"
            + "Bz1m777qGFvHmig47kJT8qibxi93a8Kn/fj86MvCe7CAz28aeDH++/NTczSyd7ICyYL+zPuhMnwNXujf"
            + "+I/FmY4XRtAiURWYKbI99ioqgHn/dpSrXKvBwQLSVykcC4EXlAozphbAvH/qCevtaI/94+3FYbGPbZHC"
            + "T417+TMyeqXT8dZVsHpp35DR2q85UkApZqroVKZjqedZSXoVhsUi0kAySr7aY8u3aLykOYWIjoEfjRvl"
            + "8zmwpiTtg5QKZddgpXvUdILEy5kgOzEznOw/NOJFDNCeRenzlIxr6fvsERGZxKTP1HN1jN6OtCiczrEj"
            + "5fUMEmWI3RNBMrk+incgTPYqU5dRwf5b96X+a2GLNxiK6zFaPuWyZwOIT8HBORpdalTbJqrt0nuuE8sJ"
            + "L+yKqmHttg0/BhTnoR2X7Pb7sKUwgdh6MixWflGMF7WyN/0VMR6CTNUqBPt+Pqqff/zMipputmvMv4nx"
            + "XNz7w3uAhcWIDJxN0vBN/Zz24dpo2ozkpnXyqK0ErfuByyVKkoObEowr5NmpKp9gySq1mZPD8ZdzRRW8"
            + "9jS/wvAyrmUhUFQjWKzKS3eicpZLe9GMtn568k2kizd2r5fjUOo9tTE3jcMCaVpU6YyEu1d81AWhgZlp"
            + "RudyhBAkRKCGkNtLt9OZ9RupoHiZpC37VipgupEKppLLaxkCjz/RxfdTcyLkZh9vYdxJBQY3UkHsjVRQ"
            + "dmR3IxXUHD5Qb2U8Tt7ms/oG4jbuthU1u1nHIz/XGtWtfiT41h0VOH9oU1mpLcRI2M5E7fYYiVAgtmop"
            + "o86MC6NdtY5vPMauzLY84JoD6Ub/iofVRoKH3h+McDefY/5jCQNWjObbfILEAs2zQvhz+BJQxZ6Sntko"
            + "ktamhsQaciPCm634pq6oKKp+prl1dlO0nXWzPKMd78dqgvJOXzYW6VVy7ANoDP7R6hjXJGV453JC5PxO"
            + "FadYT8x7PIQ0MHofmnEfB6dPL+ZjEE3t7p6LJKY1P8KZF7Oh5ZFf14ugaEEk0UBcb0IkHMYAWUcGNO9H"
            + "pgmDA/M8QknGG7aevpvJxm0Abev3jwxe+2QYO2DsqCldTPDicupPaQ51MujMU7KPtL6SM1CiqCjdMh2S"
            + "WQeRuno0QnApfs03/0cP+h+l3D8cxC8Wuwn5Pd6WiEdzROi1dvjR9PnH0DNMffl7lGwCwm2yndLLgvdA"
            + "3oLVYJ4oDYwQsLg4fjMLEmj+LoQ+w0c+OAMjSf6tu7j7E5IJ30VW2phIucRuXUXVJVkrstBxWouaBwTA"
            + "xTvgVapw6pWCLqcSaB6OwLUqL96JOlEubccw2nq8c+n3ypk2OoxuI4D/FU5RL3wnaVJ06Yyeu6B0TxjX"
            + "3Ltu0aOPhpf822zskvxLxyjiVW0LFLB27zAQn/J7pn3dCBAKuNf2Xqlcvi8hDasgdrB/3ru6wMRyFxcp"
            + "F14Woc1lk77eyxUbuJB3WlLuv23SFpv9VBTmMbEz7ek33H4PMeUikHYRloGqS/GToiKocd4js2X8huzx"
            + "ez+dspQzMwPcGbVbhdGTJdLBaU8T3JhxkfC/3HNITdSOec5gpYm23EL/VTQuporm77SnpiDYjfhxdErC"
            + "dtKJ6/6t5uUMMF4cbo0MMAn0iME8i69jpQzUTqOuTwzONuR+ECLewyPQE4DfsUIu89Y/yqrMsAYbO5wg"
            + "xNQ6ZN6XICqzPQ8vsFelPYBw6rqLV96ERz8B+smCOErb1Bpw4QIz1/oZ3RPjxK1gz9hIzkdiXV/4nhCK"
            + "JQghcXAQzCPVtD31+XZ+MAqAEFpafNPnF5FxvrB3saDRtXHc4LPmFCm/r6a4LRFpZlV0fW1W1T6svQ4r"
            + "yYZLN1vB8snDxQ46MKpRhznXf59LQ+mDZ2Fsts20P+5nS+wzX1ojmHroYwT2BxUI23jcpyCpC2xnBdsv"
            + "ztyI2P/jTDb4nSce/8YT34PbLXrTi7b6cSY72Zr0JlWfTxjkH0u4TTCFsV4TDvInP60xzHson9rpmI7a"
            + "M7zggdXzrhxVpwWAsfrpbWXyDz1/rO97/sXZVY57zQCdfvFRVBFCkthCaUfrm9nIJPEOPs1h+DPTVoCe"
            + "LjPGpor20k7IgQjprNvYrCSqmhdizsM3gmJ2/WSKQcSZiH5GyCrvcF558Hum7Fl2E7U9T6X/bmbvZC7N"
            + "28TyS/2rNTocncCkVpHjtClzQ+oRwec6FDFNlb60U4gSAmVBMcUy4yPNkU4GSnHckmM9wdFx0WMg218g"
            + "OzoTxa/Jikq2Lo5Gtk7/GDz+khW7CblvgkcUR0TAzXjTaASw3Ky/a5QeEd9R3b/+8QLmOSOjQLI79wmg"
            + "5Q9/BbFyVAaPhjutGuYd25Q2PHJlpkW3E5Job9gC64dZGlF/mJAk+25CUnR1vOFmkIw2+B8GySAo/mIb"
            + "LmfoT7bD/2Ib5YbtJCDbaa3PF0U2JKyjAtJWk8Jkvsx7n9QD2eYL/5Nto2N4u78nJIV+nJBsLXUyUI7j"
            + "FmmTGbuZkOT6ke1YmQJB8l9b1Fp2tr82SFZWT0L553CkabVca4H7rbqohrZXEqxwnrbZ78A7djuw10yQ"
            + "/BSwdDPqgZBYSlOGHqRC4jdxICsRfxJ3o2WJB1Q5Bqgm9CWIFlWWtsq+cYLmyjDxpDhsxWqC8zYcNQ74"
            + "tHSZ2uLCg5ZxM7BnjZdx33rmCiYFm2KskG4jCBildeOwyEl10il2qviJqJ2XKaY5UNW870d17T0XMWn9"
            + "Y1G3KQNpJnh1AVzU+5btRK03i5qfzXFnvcPDjvWPRT085UIwFBevDa2Z7bcteDtJdkxYo+7zuXoiXbFK"
            + "Sjl8W3AVD1bBssXHySD9JQDWjkpKkVfxVRNIlK5OcZExBJLs9PMe9Z2b+C9j5p89agbtgsInBS9ItdFb"
            + "YM/XQkhytENlrDREzomnnWloNu1lOAOuE5GePSeiUKTV8vc9Z7ZALLdg5Ku/VXIB9/hwba1LskXU/ezA"
            + "3YdeiymmjyP7Spl3L8V3YROWMrd8PduTmTbPxOtJL+jqAVCTZbORZBnTRog67GlJ+BTn8Sej15EqHZqi"
            + "njUQ+scbpN4fPLdth1XTCVZqeS4E9XgYrnZPD75+ZzpfEilh48o2s0YaR6P4itSql/lrF3V/UtWiO6Sr"
            + "BZUS5lGN6GzLthPdCsQ76a5ovtgHXY/zRfCKDkTTkjB9Zl7T8WsdDr4nKTGseyWlE07pojPZMFdiG2qt"
            + "0NbAZa/sdphLgZonn/uYz2uHDvwpG0wy46vmTSH9PMnnwtAMIfM+KwDJeLG4APd2BHSje1cUZajW7Igh"
            + "JZCrMVUZzRngfTTvskoSW7Xvb9HYCt9jC6EeyFgtLgCpcMAL5Ki2gQ8oEPiwmH7RNUmubm/1Z3c07KGA"
            + "HLA89Uoq5rBAfZMSi7nY3ElHX0iuDAtJimXcVItQZpTyoPrpvW+JAcBYTzFIQo7py9g/+HXtfQLXn7lh"
            + "zsgY9wg2LTm8QSyUgJbUfb9gLxLEiYOjzu3QVnf9x+jbPdD1js5d22+CR5Huvy5PjOZpG0qY4ipLJn2s"
            + "N0tb8aRTnZXryu98I4VBX2L4Uf/rs1P9ZbXF3q91h64pAdb1R2aX+TMX+AxTkgETTz4rJOTj86GBB7ct"
            + "Gm15VmaIYmM14fLMZDOfD31SE8kgGRG/SrTsmRfGI+jxaqlsR8kIgYTwQR33NTkc2wFxYVBVFbBp35AG"
            + "/tOUWsb+Rw+G3E1VmAolCxH52kEtc8R/owOY8mlntEfJylhJh8KUNYvKyr6OYYCjutK7nRpz4RRfFF4i"
            + "5+M7GOAK7/e8aQc1E6g5c48sqgWxgecrk+dARn3kUgCnwA0UZd0MKRmUokfMOoamI4mIEH16pQ/nYyvV"
            + "PvKc6/I5WvejDOdH3GvVaFWGkL32+LLevfXXM7swnnouigutGvhkwnUt1+CBfRRIsS4PhXVKiDvLPnjn"
            + "2aGc+mXL5k1VjJEoTaUulFr2U+wzVncNPH9Ymlmd/Jg8O01+dyQfrbsiX26ERW97uEQer7Thy3je7JbK"
            + "x0ykKpl0YR2GrjepqxUec054kXSYiGSLSGHu/EnB0vau57NoPkseqLlCixAyC55bgK1V9eA68EbyObLI"
            + "1mmfQH3c96ZozpCsScKYtXwv4Xi6lx3S1ZsBkWJwrkYPE5jSH08GQWQjxvKqfNbK3weRyZjYJKdumv6H"
            + "wIv55w07R4CDLciIzt1AFCkt4W3Q5y/502cxEBXw5/hw9uy2q4wbB5Lgc6SbiXiTv2x1Uud7Z8eIYCeA"
            + "ndvpPmdsdqqcblR82QAEXjI7Frkw1AlTlrX3sZOw0FiPMwp1l+XXHIsibma1RzeSWxQ2sA3g3h92PGwl"
            + "is/SInPR4WeuYbQwrhCPkJK2I1MTwXMGVpeSPaZb989vTIzA0C8vUSUuN2PnLqi0MZFkr0qed40vn5Z5"
            + "z68zviuZUEQeLfANcZYWXej5TT7j1g7MZ1pShkP6uwPSsKysWS/qd9OQTIfnwoA7rDy9X8FomGvTpxtz"
            + "3ROk7811rmm35rrmjNvQD/lngt4IEvr9U15/IAZyvgC8KH/Cu+l3o5R8N5W84OuqDChZ9wcIL/57w6ip"
            + "sxlpQYpkkIBajJz+rL7rJGXX87YQ+gqriZjMB1hspvCzzyogbQnuj/C1wjXm0Q0OMwQQaPR2cwya0WDh"
            + "ON62+9VZa04KOwf8teuWXgO6ePMn8hByHiLsfOYgwVWJkIqakDTFOCK4JEvZlKfU0WHed0dnqclneiFR"
            + "Ki5WF+Qx1zf8CsvBiVz5u24ROFMWYnT+umrROgzZTtOQO/fqUKPUPMpdt6hpd2eiM73JAZdeIx4burrS"
            + "afsJj2FzusgJ2LaVsFPQbbdoguSptCdMBrwUwHaWy5I0WXioNT+gMaCcSEnuHjg6xH8/Peqvk5q+iIB9"
            + "f0TU9x/7p7Ok/npl+dD8l5OlQBFAD5D668YbIq7fPex/+xTyD59K/Ycl8m9/LN4Pnx78ScoMAgR61NRf"
            + "r3QfuHu/cfAUKCzosUp3sM7gv3HIEigs6IFCd7AjEL94vBAoJOiRN3eQvlC/fgAOKCroAS93qJ+hf/24"
            + "F1BU0ONM7lBVYH/zcBNQaNCDO+6g2+B+/RgPUFTQYyruUOngf/nQClBQ0EMZ7kCjEH7niAZQXNADCO5w"
            + "rx/8z48jAL0L6HT93V2CkH5v1h4UGXSQ/A75GPl3xspBcUEHqO9wNVB/Y5waFBZ0WPgOtgXt90aHQZFB"
            + "52LvkJkx/p9NyYLeFHRa9O6m4Zj/g9lRUHjQ+b47eH6c/9G0H+gNQIfF7m6ghPc7o2OguKDjSHe4kgS/"
            + "M5wEigs6hHOHm0f4GyM5/7HDgEyc3MGiEv/6/AkoKuh8xR2qB8lvTluAQoNOFdxBz5P+xowBKCyopf4O"
            + "lof8twz2oMCgJu874Jvc+Jct36CwoIbmO1gbqt+zN4Mig9p2vyOY+rdMvKDAoG7VO2AR2l/2roKCgpoy"
            + "70CL6X7LogkKDGpAvAPGZ/glOyIoIKib7g4wnfH3vHWgyKDOsTtkROb/Cx/Zfyw5EFPU3W0SWX7dIgWK"
            + "CuoIukM9YP0dfxAoLqhH5rsvNPvvOWZAkUEtHXfIKxz/E4MHKD6o5eAOP4vrdw0I/5EqgPTa77BheH6z"
            + "8w4KDdphvoO25f2NfvN/VFYgrdU72F6+32m0guKCdhHvcLkEfrGnCAoJ2jC7g0wT/OX2GSgoaHvoDhRa"
            + "+LeaRaDAoJ2QO2BnkV/ui4CCgqr+d6Czor/VAwAFBlWp74ADxX9bs/6PPRpEyb0Db5L4DV0XFBZUf7yD"
            + "NZT6fTUSFB1UZbtDn5T+Vc1NSQ4K+uYznMB/asDihl/25qf/AzIi0aumXAAA";
}
