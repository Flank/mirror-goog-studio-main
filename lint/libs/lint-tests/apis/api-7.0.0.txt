// Signature format: 4.0
package com.android.tools.lint.checks.infrastructure {

  public abstract class BaseLintDetectorTest extends junit.framework.TestCase implements com.android.tools.lint.checks.infrastructure.TestResourceProvider {
    ctor public BaseLintDetectorTest();
    method protected static void addCleanupDir(java.io.File!);
    method public static String! addSelection(String!, int, int);
    method protected void assertEqualsGolden(String!, String!) throws java.io.IOException;
    method protected void assertEqualsGolden(String!, String!, String!) throws java.io.IOException;
    method protected String! cleanup(String!);
    method protected static void deleteFile(java.io.File!);
    method protected java.io.File! findSrcDir();
    method protected java.io.File! findSrcRelativeDir(String!);
    method public static String! getCaretContext(String!, int);
    method public static int getCaretOffset(String!, String!);
    method protected java.io.File! getTargetDir();
    method public static java.io.File! getTempDir();
    method protected String! getTestDataRelPath();
    method public java.io.InputStream! getTestResource(String!, boolean);
    method protected java.io.File! getTestfile(java.io.File!, String!) throws java.io.IOException;
    method protected static java.io.File! makeTestFile(java.io.File!, String!, String!, java.io.InputStream!) throws java.io.IOException;
    method protected String! readTestFile(String!, boolean) throws java.io.IOException;
    method protected String! removeSessionData(String!);
    field protected static final java.util.Set<java.io.File!>! sCleanDirs;
  }

  public final class ClassName {
    ctor public ClassName(String source);
    method public String? getClassName();
    method public String? getPackageName();
    method public String packageNameWithDefault();
    property public final String? className;
    property public final String? packageName;
  }

  public final class ClassNameKt {
    method public static String? getClassName(String source);
    method public static String? getPackage(String source);
    method public static String stripComments(String source, optional boolean stripLineComments);
  }

  public final class DuplicateProjectFinder {
    ctor public DuplicateProjectFinder();
    method public void recordTestProject(String name, com.android.tools.lint.checks.infrastructure.TestLintTask task, com.android.tools.lint.checks.infrastructure.TestMode mode, java.util.List<? extends java.io.File> projects);
  }

  public final class EmptyLintModelDependencyGraph implements com.android.tools.lint.model.LintModelDependencyGraph {
    method public com.android.tools.lint.model.LintModelLibrary? findLibrary(String mavenName, boolean direct);
    method public java.util.List<com.android.tools.lint.model.LintModelDependency> getAllGraphItems();
    method public java.util.List<com.android.tools.lint.model.LintModelLibrary> getAllLibraries();
    method public java.util.List<com.android.tools.lint.model.LintModelDependency> getRoots();
    property public java.util.List<com.android.tools.lint.model.LintModelDependency> roots;
    field public static final com.android.tools.lint.checks.infrastructure.EmptyLintModelDependencyGraph INSTANCE;
  }

  public final class GradleModelMocker implements com.android.tools.lint.model.LintModelLibraryResolver {
    ctor public GradleModelMocker(@org.intellij.lang.annotations.Language("Groovy") String gradle, optional @com.google.common.annotations.VisibleForTesting java.io.File projectDir);
    ctor public GradleModelMocker(@org.intellij.lang.annotations.Language("Groovy") String gradle);
    method public com.android.tools.lint.checks.infrastructure.GradleModelMocker allowUnrecognizedConstructs();
    method public java.util.Collection<com.android.tools.lint.model.LintModelLibrary> getAllLibraries();
    method public Integer? getBuildSdk();
    method public String? getBuildTargetHash();
    method public java.util.Collection<java.io.File> getGeneratedSourceFolders();
    method public com.android.tools.lint.model.LintModelLibrary? getLibrary(String artifactAddress);
    method public com.android.tools.lint.model.LintModelModule getLintModule();
    method public com.android.tools.lint.model.LintModelVariant? getLintVariant();
    method public boolean getPrimary();
    method public java.io.File getProjectDir();
    method public boolean hasJavaOrJavaLibraryPlugin();
    method public boolean isLibrary();
    method public void setPrimary(boolean primary);
    method public void setVariantName(String variantName);
    method public void syncFlagsTo(com.android.tools.lint.LintCliFlags to);
    method public com.android.tools.lint.checks.infrastructure.GradleModelMocker withDependencyGraph(String graph);
    method public com.android.tools.lint.checks.infrastructure.GradleModelMocker withFullDependencies(boolean fullDependencies);
    method public com.android.tools.lint.checks.infrastructure.GradleModelMocker withLibraryLintJar(String library, String lintJarPath);
    method public com.android.tools.lint.checks.infrastructure.GradleModelMocker withLibraryPublicResourcesFile(String library, String publicResourcesPath);
    method public com.android.tools.lint.checks.infrastructure.GradleModelMocker withLibrarySymbolFile(String library, String symbolFilePath);
    method public com.android.tools.lint.checks.infrastructure.GradleModelMocker withLintRuleJar(String lintRuleJarPath);
    method public com.android.tools.lint.checks.infrastructure.GradleModelMocker withLogger(com.android.utils.ILogger? logger);
    method public com.android.tools.lint.checks.infrastructure.GradleModelMocker withModelVersion(String modelVersion);
    property public final Integer? buildSdk;
    property public final String? buildTargetHash;
    property public final java.util.Collection<java.io.File> generatedSourceFolders;
    property public final boolean isLibrary;
    property public final boolean primary;
    property public final java.io.File projectDir;
    field public static final com.android.tools.lint.checks.infrastructure.GradleModelMocker.Companion Companion;
  }

  public static final class GradleModelMocker.Companion {
  }

  public final class GradleModelMocker.Dep {
    ctor public GradleModelMocker.Dep(String coordinateString, int depth);
    method public void add(com.android.tools.lint.checks.infrastructure.GradleModelMocker.Dep child);
    method public java.util.Collection<com.android.tools.lint.model.LintModelLibrary> createAndroidLibrary();
    method public java.util.Collection<com.android.tools.lint.model.LintModelLibrary> createLibrary();
    method public java.util.List<com.android.tools.lint.checks.infrastructure.GradleModelMocker.Dep> getChildren();
    method public com.android.ide.common.repository.GradleCoordinate? getCoordinate();
    method public String getCoordinateString();
    method public int getDepth();
    method public com.android.tools.lint.checks.infrastructure.GradleModelMocker.Dep? getLastChild();
    method public String? getPromotedTo();
    method public boolean isJavaLibrary();
    method public boolean isProject();
    method public void printTree(int indent, java.io.PrintStream writer);
    property public final java.util.List<com.android.tools.lint.checks.infrastructure.GradleModelMocker.Dep> children;
    property public final com.android.ide.common.repository.GradleCoordinate? coordinate;
    property public final String coordinateString;
    property public final int depth;
    property public final boolean isJavaLibrary;
    property public final boolean isProject;
    property public final com.android.tools.lint.checks.infrastructure.GradleModelMocker.Dep? lastChild;
    property public final String? promotedTo;
  }

  public final class GradleModelMockerKt {
  }

  public final class KotlinClasspathKt {
    method public static java.util.List<java.lang.String> findKotlinStdlibPath();
  }

  @com.google.common.annotations.Beta public abstract class LintDetectorTest extends com.android.tools.lint.checks.infrastructure.BaseLintDetectorTest {
    ctor public LintDetectorTest();
    method protected boolean allowAndroidBuildEnvironment();
    method protected boolean allowCompilationErrors();
    method protected boolean allowMissingSdk();
    method protected boolean allowObsoleteCustomRules();
    method @Deprecated public static com.android.tools.lint.checks.infrastructure.TestFile.BinaryTestFile! base64(String, String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile.BinaryTestFile base64gzip(String, String);
    method @Deprecated public static com.android.tools.lint.checks.infrastructure.TestFile.BinaryTestFile bytecode(String, com.android.tools.lint.checks.infrastructure.TestFile.BytecodeProducer);
    method public static com.android.tools.lint.checks.infrastructure.CompiledSourceFile! bytecode(String, com.android.tools.lint.checks.infrastructure.TestFile, long, java.lang.String!...);
    method @Deprecated public static com.android.tools.lint.checks.infrastructure.CompiledSourceFile! bytecode(String, com.android.tools.lint.checks.infrastructure.TestFile, java.lang.String!...);
    method public static com.android.tools.lint.checks.infrastructure.TestFile.BinaryTestFile bytes(String, byte[]);
    method @Deprecated protected String! checkLint(java.util.List<java.io.File!>!) throws java.lang.Exception;
    method protected String! checkLint(com.android.tools.lint.checks.infrastructure.LintDetectorTest.TestLintClient!, java.util.List<java.io.File!>!) throws java.lang.Exception;
    method protected void checkReportedError(com.android.tools.lint.detector.api.Context, com.android.tools.lint.detector.api.Issue, com.android.tools.lint.detector.api.Severity, com.android.tools.lint.detector.api.Location, String);
    method protected void checkReportedError(com.android.tools.lint.detector.api.Context, com.android.tools.lint.detector.api.Issue, com.android.tools.lint.detector.api.Severity, com.android.tools.lint.detector.api.Location, String, com.android.tools.lint.detector.api.LintFix?);
    method public static com.android.tools.lint.checks.infrastructure.TestFile! classpath(java.lang.String!...);
    method public static com.android.tools.lint.checks.infrastructure.CompiledSourceFile! compiled(String, com.android.tools.lint.checks.infrastructure.TestFile, long, java.lang.String!...);
    method @Deprecated public static com.android.tools.lint.checks.infrastructure.CompiledSourceFile! compiled(String, com.android.tools.lint.checks.infrastructure.TestFile, java.lang.String!...);
    method protected void configureDriver(com.android.tools.lint.client.api.LintDriver!);
    method public com.android.tools.lint.checks.infrastructure.TestFile copy(String);
    method public com.android.tools.lint.checks.infrastructure.TestFile copy(String, String);
    method protected com.android.tools.lint.checks.infrastructure.LintDetectorTest.TestLintClient! createClient();
    method public static com.android.tools.lint.checks.infrastructure.TestFile file();
    method protected boolean forceErrors();
    method protected abstract com.android.tools.lint.detector.api.Detector! getDetector();
    method protected final com.android.tools.lint.detector.api.Detector! getDetectorInstance();
    method protected abstract java.util.List<com.android.tools.lint.detector.api.Issue!>! getIssues();
    method protected java.util.EnumSet<com.android.tools.lint.detector.api.Scope!>! getLintScope(java.util.List<java.io.File!>!);
    method protected java.io.File! getProjectDir(String!, com.android.tools.lint.checks.infrastructure.TestFile!...) throws java.lang.Exception;
    method public String! getSuperClass(com.android.tools.lint.detector.api.Project!, String!);
    method public static com.android.tools.lint.checks.infrastructure.TestFile.GradleTestFile gradle(String, @org.intellij.lang.annotations.Language("Groovy") String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile.GradleTestFile gradle(@org.intellij.lang.annotations.Language("Groovy") String);
    method protected boolean ignoreSystemErrors();
    method public static com.android.tools.lint.checks.infrastructure.TestFile.ImageTestFile! image(String, int, int);
    method protected static boolean imageFormatSupported(String);
    method protected boolean includeParentPath();
    method protected boolean isEnabled(com.android.tools.lint.detector.api.Issue!);
    method public static com.android.tools.lint.checks.infrastructure.TestFile.JarTestFile jar(String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile.JarTestFile jar(String, com.android.tools.lint.checks.infrastructure.TestFile!...);
    method public static com.android.tools.lint.checks.infrastructure.TestFile java(String, @org.intellij.lang.annotations.Language("JAVA") String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile java(@org.intellij.lang.annotations.Language("JAVA") String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile kotlin(String, @org.intellij.lang.annotations.Language("kotlin") String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile kotlin(@org.intellij.lang.annotations.Language("kotlin") String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile kts(@org.intellij.lang.annotations.Language("kotlin-script") String);
    method protected com.android.tools.lint.checks.infrastructure.TestLintTask lint();
    method @Deprecated protected String! lintFiles(com.android.tools.lint.checks.infrastructure.TestFile!...) throws java.lang.Exception;
    method @Deprecated protected String! lintProject(com.android.tools.lint.checks.infrastructure.TestFile!...) throws java.lang.Exception;
    method @Deprecated protected String! lintProjectIncrementally(String!, com.android.tools.lint.checks.infrastructure.TestFile!...) throws java.lang.Exception;
    method public static com.android.tools.lint.checks.infrastructure.TestFile.ManifestTestFile manifest();
    method public static com.android.tools.lint.checks.infrastructure.TestFile manifest(@org.intellij.lang.annotations.Language("XML") String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile manifest(String, @org.intellij.lang.annotations.Language("XML") String);
    method public static void populateProjectDirectory(java.io.File, com.android.tools.lint.checks.infrastructure.TestFile!...) throws java.io.IOException;
    method protected static com.android.tools.lint.checks.infrastructure.ProjectDescription! project(com.android.tools.lint.checks.infrastructure.TestFile!...);
    method public static com.android.tools.lint.checks.infrastructure.TestFile.PropertyTestFile projectProperties();
    method public static com.android.tools.lint.checks.infrastructure.TestFile propertyFile(String, @org.intellij.lang.annotations.Language("Properties") String);
    method protected boolean requireCompileSdk();
    method public static com.android.tools.lint.checks.infrastructure.TestFile source(String, String);
    method @Deprecated public static String! toBase64(byte[]);
    method @Deprecated public static String! toBase64(java.io.File) throws java.io.IOException;
    method public static String! toBase64gzip(byte[]);
    method public static String! toBase64gzip(java.io.File) throws java.io.IOException;
    method public static com.android.tools.lint.checks.infrastructure.TestFile xml(String, @org.intellij.lang.annotations.Language("XML") String);
  }

  public class LintDetectorTest.CustomIssueRegistry extends com.android.tools.lint.client.api.IssueRegistry {
    ctor public LintDetectorTest.CustomIssueRegistry();
    method public java.util.List<com.android.tools.lint.detector.api.Issue!> getIssues();
  }

  public class LintDetectorTest.TestConfiguration extends com.android.tools.lint.client.api.Configuration {
    ctor protected LintDetectorTest.TestConfiguration(com.android.tools.lint.client.api.ConfigurationHierarchy);
    method public void addConfiguredIssues(java.util.Map<java.lang.String!,com.android.tools.lint.detector.api.Severity!>, com.android.tools.lint.client.api.IssueRegistry, boolean);
    method public java.io.File? getBaselineFile();
    method public void ignore(com.android.tools.lint.detector.api.Context, com.android.tools.lint.detector.api.Issue, com.android.tools.lint.detector.api.Location?, String);
    method public void ignore(com.android.tools.lint.detector.api.Issue, java.io.File);
    method public void ignore(String, java.io.File);
    method public void setBaselineFile(java.io.File?);
    method public void setSeverity(com.android.tools.lint.detector.api.Issue, com.android.tools.lint.detector.api.Severity?);
  }

  public class LintDetectorTest.TestLintClient extends com.android.tools.lint.LintCliClient {
    ctor public LintDetectorTest.TestLintClient();
    method protected boolean allowAndroidBuildEnvironment();
    method public String! analyze(java.util.List<java.io.File!>!) throws java.lang.Exception;
    method protected String! cleanup(String!);
    method public String! getErrors();
    method public void setIncremental(java.io.File!);
    field protected java.io.File! incrementalCheck;
    field protected final java.io.StringWriter! writer;
  }

  public final class LintFixVerifier {
    ctor public LintFixVerifier(com.android.tools.lint.checks.infrastructure.TestLintTask task, com.android.tools.lint.checks.infrastructure.TestResultState state);
    method public com.android.tools.lint.checks.infrastructure.LintFixVerifier checkFix(String? fix, com.android.tools.lint.checks.infrastructure.TestFile after);
    method public com.android.tools.lint.checks.infrastructure.LintFixVerifier expectFixDiffs(String expected);
    method public com.android.tools.lint.checks.infrastructure.LintFixVerifier reformatDiffs(boolean reformatDiffs);
    method public com.android.tools.lint.checks.infrastructure.LintFixVerifier robot(boolean isRobot);
    method public com.android.tools.lint.checks.infrastructure.LintFixVerifier window();
    method public com.android.tools.lint.checks.infrastructure.LintFixVerifier window(int size);
    field public static final com.android.tools.lint.checks.infrastructure.LintFixVerifier.Companion Companion;
  }

  public static final class LintFixVerifier.Companion {
  }

  public final class LintTestUtils {
    method public static <T extends java.lang.Comparable<? super T>> void checkTransitiveComparator(java.util.List<? extends T> list);
    method public static <T> void checkTransitiveComparator(java.util.List<? extends T> list, java.util.Comparator<T> comparator);
  }

  public final class ProjectDescription implements java.lang.Comparable<com.android.tools.lint.checks.infrastructure.ProjectDescription> {
    ctor public ProjectDescription();
    ctor public ProjectDescription(com.android.tools.lint.checks.infrastructure.TestFile... files);
    method public com.android.tools.lint.checks.infrastructure.ProjectDescription addFile(com.android.tools.lint.checks.infrastructure.TestFile file);
    method public int compareTo(com.android.tools.lint.checks.infrastructure.ProjectDescription other);
    method public com.android.tools.lint.checks.infrastructure.ProjectDescription dependsOn(com.android.tools.lint.checks.infrastructure.ProjectDescription library);
    method public com.android.tools.lint.checks.infrastructure.ProjectDescription dependsOn(String name);
    method public void ensureUnique();
    method public com.android.tools.lint.checks.infrastructure.ProjectDescription files(com.android.tools.lint.checks.infrastructure.TestFile... files);
    method public String? getDependencyGraph();
    method public java.util.List<com.android.tools.lint.checks.infrastructure.ProjectDescription> getDependsOn();
    method public java.util.List<java.lang.String> getDependsOnNames();
    method public com.android.tools.lint.checks.infrastructure.TestFile![] getFiles();
    method public String getName();
    method public boolean getPrimary();
    method public boolean getReport();
    method public com.android.tools.lint.checks.infrastructure.ProjectDescription.Type getType();
    method public com.android.tools.lint.checks.infrastructure.ProjectDescription? getUnder();
    method public String? getVariantName();
    method public boolean isUnder(com.android.tools.lint.checks.infrastructure.ProjectDescription desc);
    method public com.android.tools.lint.checks.infrastructure.ProjectDescription name(String name);
    method public com.android.tools.lint.checks.infrastructure.ProjectDescription report(boolean report);
    method public void setDependencyGraph(String? dependencyGraph);
    method public void setFiles(com.android.tools.lint.checks.infrastructure.TestFile![] files);
    method public void setName(String name);
    method public void setPrimary(boolean primary);
    method public void setReport(boolean report);
    method public void setType(com.android.tools.lint.checks.infrastructure.ProjectDescription.Type type);
    method public void setUnder(com.android.tools.lint.checks.infrastructure.ProjectDescription? under);
    method public void setVariantName(String? variantName);
    method public com.android.tools.lint.checks.infrastructure.ProjectDescription type(com.android.tools.lint.checks.infrastructure.ProjectDescription.Type type);
    method public com.android.tools.lint.checks.infrastructure.ProjectDescription under(com.android.tools.lint.checks.infrastructure.ProjectDescription parent);
    method public com.android.tools.lint.checks.infrastructure.ProjectDescription variant(String? variantName);
    method public com.android.tools.lint.checks.infrastructure.ProjectDescription withDependencyGraph(String dependencyGraph);
    property public final String? dependencyGraph;
    property public final java.util.List<com.android.tools.lint.checks.infrastructure.ProjectDescription> dependsOn;
    property public final java.util.List<java.lang.String> dependsOnNames;
    property public final com.android.tools.lint.checks.infrastructure.TestFile![] files;
    property public final String name;
    property public final boolean primary;
    property public final boolean report;
    property public final com.android.tools.lint.checks.infrastructure.ProjectDescription.Type type;
    property public final com.android.tools.lint.checks.infrastructure.ProjectDescription? under;
    property public final String? variantName;
    field public static final com.android.tools.lint.checks.infrastructure.ProjectDescription.Companion Companion;
  }

  public static final class ProjectDescription.Companion {
    method public java.io.File getProjectDirectory(com.android.tools.lint.checks.infrastructure.ProjectDescription project, java.io.File rootDir);
    method public void populateProjectDirectory(com.android.tools.lint.checks.infrastructure.TestLintTask, com.android.tools.lint.checks.infrastructure.ProjectDescription project, java.io.File projectDir, com.android.tools.lint.checks.infrastructure.TestFile... testFiles);
  }

  public enum ProjectDescription.Type {
    enum_constant public static final com.android.tools.lint.checks.infrastructure.ProjectDescription.Type APP;
    enum_constant public static final com.android.tools.lint.checks.infrastructure.ProjectDescription.Type JAVA;
    enum_constant public static final com.android.tools.lint.checks.infrastructure.ProjectDescription.Type LIBRARY;
  }

  public final class ResolveCheckerKt {
    method public static void checkFile(com.android.tools.lint.detector.api.JavaContext, org.jetbrains.uast.UFile? root, com.android.tools.lint.checks.infrastructure.TestLintTask task);
  }

  public final class TestConfiguration extends com.android.tools.lint.client.api.Configuration {
    ctor public TestConfiguration(com.android.tools.lint.checks.infrastructure.TestLintTask task, com.android.tools.lint.client.api.ConfigurationHierarchy configurations);
    method public void addConfiguredIssues(java.util.Map<java.lang.String,com.android.tools.lint.detector.api.Severity> targetMap, com.android.tools.lint.client.api.IssueRegistry registry, boolean specificOnly);
    method public java.io.File? getBaselineFile();
    method public void ignore(com.android.tools.lint.detector.api.Context context, com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Location? location, String message);
    method public void ignore(com.android.tools.lint.detector.api.Issue issue, java.io.File file);
    method public void ignore(String issueId, java.io.File file);
    method public void setBaselineFile(java.io.File? value);
    method public void setSeverity(com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Severity? severity);
    property public java.io.File? baselineFile;
  }

  public final class TestConfigurationKt {
    method public static com.android.tools.lint.detector.api.Severity getNonIgnoredSeverity(com.android.tools.lint.detector.api.Severity severity, com.android.tools.lint.detector.api.Issue issue);
    method public static com.android.tools.lint.detector.api.Severity? overrideSeverity(com.android.tools.lint.checks.infrastructure.TestLintTask task, com.android.tools.lint.detector.api.Issue issue, com.android.tools.lint.detector.api.Severity default);
  }

  public class TestFile {
    ctor public TestFile();
    method public com.android.tools.lint.checks.infrastructure.TestFile! copy(String, com.android.tools.lint.checks.infrastructure.TestResourceProvider);
    method public java.io.File createFile(java.io.File) throws java.io.IOException;
    method public static java.io.File createTempDirectory();
    method public static void deleteFilesRecursively(java.io.File);
    method public com.android.tools.lint.checks.infrastructure.TestFile! from(String, com.android.tools.lint.checks.infrastructure.TestResourceProvider);
    method public String? getContents();
    method public String? getRawContents();
    method public String getTargetPath();
    method public com.android.tools.lint.checks.infrastructure.TestFile! indented();
    method public com.android.tools.lint.checks.infrastructure.TestFile! to(String);
    method public com.android.tools.lint.checks.infrastructure.TestFile! withBytes(byte[]);
    method public com.android.tools.lint.checks.infrastructure.TestFile! withSource(String);
    method public com.android.tools.lint.checks.infrastructure.TestFile! within(String?);
    field public byte[]! bytes;
    field public String! contents;
    field public String! sourceRelativePath;
    field public String! targetRelativePath;
    field public String! targetRootFolder;
  }

  public static class TestFile.BinaryTestFile extends com.android.tools.lint.checks.infrastructure.TestFile {
    ctor public TestFile.BinaryTestFile(String, com.android.tools.lint.checks.infrastructure.TestFile.ByteProducer);
    method public byte[]! getBinaryContents();
  }

  public static interface TestFile.ByteProducer {
    method public default byte[] produce();
  }

  public static class TestFile.BytecodeProducer implements org.objectweb.asm.Opcodes com.android.tools.lint.checks.infrastructure.TestFile.ByteProducer {
    ctor public TestFile.BytecodeProducer();
  }

  public static class TestFile.GradleTestFile extends com.android.tools.lint.checks.infrastructure.TestFile {
    ctor public TestFile.GradleTestFile(String, @org.intellij.lang.annotations.Language("Groovy") String);
    method public com.android.tools.lint.checks.infrastructure.GradleModelMocker getMocker(java.io.File);
    method public com.android.tools.lint.checks.infrastructure.TestFile.GradleTestFile! withMockerConfigurator(java.util.function.Consumer<com.android.tools.lint.checks.infrastructure.GradleModelMocker!>!);
  }

  public static class TestFile.ImageTestFile extends com.android.tools.lint.checks.infrastructure.TestFile.BinaryTestFile {
    ctor public TestFile.ImageTestFile(String, int, int);
    method public com.android.tools.lint.checks.infrastructure.TestFile.ImageTestFile fill(int);
    method public com.android.tools.lint.checks.infrastructure.TestFile.ImageTestFile fill(int, int, int, int, int);
    method public com.android.tools.lint.checks.infrastructure.TestFile.ImageTestFile! fillOval(int, int, int, int, int);
    method public com.android.tools.lint.checks.infrastructure.TestFile.ImageTestFile! format(String!);
    method public com.android.tools.lint.checks.infrastructure.TestFile.ImageTestFile text(int, int, String!, int);
  }

  public static class TestFile.JarTestFile extends com.android.tools.lint.checks.infrastructure.TestFile {
    ctor public TestFile.JarTestFile(String);
    method public com.android.tools.lint.checks.infrastructure.TestFile.JarTestFile! add(com.android.tools.lint.checks.infrastructure.TestFile, String);
    method public com.android.tools.lint.checks.infrastructure.TestFile.JarTestFile! add(com.android.tools.lint.checks.infrastructure.TestFile);
    method public com.android.tools.lint.checks.infrastructure.TestFile.JarTestFile! files(com.android.tools.lint.checks.infrastructure.TestFile!...);
  }

  public static class TestFile.JavaTestFile extends com.android.tools.lint.checks.infrastructure.TestFile {
    ctor public TestFile.JavaTestFile();
    method public static com.android.tools.lint.checks.infrastructure.TestFile create(@org.intellij.lang.annotations.Language("JAVA") String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile create(String, @org.intellij.lang.annotations.Language("JAVA") String);
  }

  public static class TestFile.KotlinTestFile extends com.android.tools.lint.checks.infrastructure.TestFile {
    ctor public TestFile.KotlinTestFile();
    method public static com.android.tools.lint.checks.infrastructure.TestFile create(@org.intellij.lang.annotations.Language("kotlin") String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile create(String, @org.intellij.lang.annotations.Language("kotlin") String);
  }

  public static class TestFile.ManifestTestFile extends com.android.tools.lint.checks.infrastructure.TestFile {
    ctor public TestFile.ManifestTestFile();
    method public com.android.tools.lint.checks.infrastructure.TestFile.ManifestTestFile! minSdk(int);
    method public com.android.tools.lint.checks.infrastructure.TestFile.ManifestTestFile! minSdk(String);
    method public com.android.tools.lint.checks.infrastructure.TestFile.ManifestTestFile! permissions(java.lang.String!...);
    method public com.android.tools.lint.checks.infrastructure.TestFile.ManifestTestFile! pkg(String!);
    method public com.android.tools.lint.checks.infrastructure.TestFile.ManifestTestFile! targetSdk(int);
    method public com.android.tools.lint.checks.infrastructure.TestFile.ManifestTestFile! targetSdk(String);
    method public com.android.tools.lint.checks.infrastructure.TestFile.ManifestTestFile! to(String);
    field public String! minSdk;
    field public String![]! permissions;
    field public String! pkg;
    field public String! targetSdk;
  }

  public static class TestFile.PropertyTestFile extends com.android.tools.lint.checks.infrastructure.TestFile {
    ctor public TestFile.PropertyTestFile();
    method public com.android.tools.lint.checks.infrastructure.TestFile.PropertyTestFile! compileSdk(int);
    method public com.android.tools.lint.checks.infrastructure.TestFile.PropertyTestFile! dependsOn(String!);
    method public com.android.tools.lint.checks.infrastructure.TestFile.PropertyTestFile! library(boolean);
    method public com.android.tools.lint.checks.infrastructure.TestFile.PropertyTestFile! manifestMerger(boolean);
    method public com.android.tools.lint.checks.infrastructure.TestFile.PropertyTestFile! property(String!, String!);
  }

  public static class TestFile.XmlTestFile extends com.android.tools.lint.checks.infrastructure.TestFile {
    ctor public TestFile.XmlTestFile();
    method public static com.android.tools.lint.checks.infrastructure.TestFile create(String, @org.intellij.lang.annotations.Language("XML") String);
    method public com.android.tools.lint.checks.infrastructure.TestFile.XmlTestFile! keepProcessingInstructions();
  }

  public class TestFiles {
    method @Deprecated public static com.android.tools.lint.checks.infrastructure.TestFile.BinaryTestFile! base64(String, String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile.BinaryTestFile base64gzip(String, String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile.BinaryTestFile bytecode(String, com.android.tools.lint.checks.infrastructure.TestFile.BytecodeProducer);
    method @Deprecated public static com.android.tools.lint.checks.infrastructure.CompiledSourceFile! bytecode(String, com.android.tools.lint.checks.infrastructure.TestFile, java.lang.String!...);
    method public static com.android.tools.lint.checks.infrastructure.CompiledSourceFile! bytecode(String, com.android.tools.lint.checks.infrastructure.TestFile, long, java.lang.String!...);
    method public static com.android.tools.lint.checks.infrastructure.TestFile.BinaryTestFile bytes(String, byte[]);
    method public static com.android.tools.lint.checks.infrastructure.TestFile! classpath(java.lang.String!...);
    method @Deprecated public static com.android.tools.lint.checks.infrastructure.CompiledSourceFile! compiled(String, com.android.tools.lint.checks.infrastructure.TestFile, java.lang.String!...);
    method public static com.android.tools.lint.checks.infrastructure.CompiledSourceFile! compiled(String, com.android.tools.lint.checks.infrastructure.TestFile, long, java.lang.String!...);
    method public static com.android.tools.lint.checks.infrastructure.TestFile copy(String, com.android.tools.lint.checks.infrastructure.TestResourceProvider);
    method public static com.android.tools.lint.checks.infrastructure.TestFile copy(String, String, com.android.tools.lint.checks.infrastructure.TestResourceProvider);
    method public static com.android.tools.lint.checks.infrastructure.TestFile file();
    method public static com.android.tools.lint.checks.infrastructure.TestFile.ByteProducer getByteProducerForBase64gzip(String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile![]! getLintClassPath();
    method public static com.android.tools.lint.checks.infrastructure.TestFile.GradleTestFile gradle(String, @org.intellij.lang.annotations.Language("Groovy") String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile.GradleTestFile gradle(@org.intellij.lang.annotations.Language("Groovy") String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile.ImageTestFile! image(String, int, int);
    method public static com.android.tools.lint.checks.infrastructure.TestFile.JarTestFile jar(String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile.JarTestFile jar(String, com.android.tools.lint.checks.infrastructure.TestFile!...);
    method public static com.android.tools.lint.checks.infrastructure.TestFile java(String, @org.intellij.lang.annotations.Language("JAVA") String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile java(@org.intellij.lang.annotations.Language("JAVA") String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile kotlin(@org.intellij.lang.annotations.Language("kotlin") String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile kotlin(String, @org.intellij.lang.annotations.Language("kotlin") String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile kt(@org.intellij.lang.annotations.Language("kotlin") String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile kt(String, @org.intellij.lang.annotations.Language("kotlin") String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile.ManifestTestFile manifest();
    method public static com.android.tools.lint.checks.infrastructure.TestFile manifest(@org.intellij.lang.annotations.Language("XML") String);
    method public static com.android.tools.lint.checks.infrastructure.TestFile.PropertyTestFile projectProperties();
    method public static com.android.tools.lint.checks.infrastructure.TestFile source(String, String);
    method public static String! toBase64(byte[]);
    method public static String! toBase64(java.io.File) throws java.io.IOException;
    method public static String! toBase64gzip(byte[]);
    method public static String! toBase64gzip(java.io.File) throws java.io.IOException;
    method public static String! toBase64gzipJava(byte[], int, boolean, boolean);
    method public static String! toBase64gzipKotlin(byte[], int, boolean, boolean);
    method public static com.android.tools.lint.checks.infrastructure.TestFile xml(String, @org.intellij.lang.annotations.Language("XML") String);
  }

  public static class TestFiles.LibraryReferenceTestFile extends com.android.tools.lint.checks.infrastructure.TestFile {
    ctor public TestFiles.LibraryReferenceTestFile(java.io.File);
    ctor public TestFiles.LibraryReferenceTestFile(String, java.io.File);
    field public final java.io.File! file;
  }

  public class TestIssueRegistry extends com.android.tools.lint.checks.BuiltinIssueRegistry {
    ctor public TestIssueRegistry();
    ctor public TestIssueRegistry(java.util.List<com.android.tools.lint.detector.api.Issue!>);
    method public int getIssueCapacity(java.util.EnumSet<com.android.tools.lint.detector.api.Scope!>);
    method public java.util.List<com.android.tools.lint.detector.api.Issue!> getIssuesForScope(java.util.EnumSet<com.android.tools.lint.detector.api.Scope!>);
  }

  public class TestLintClient extends com.android.tools.lint.LintCliClient {
    ctor public TestLintClient();
    ctor public TestLintClient(String!);
    ctor public TestLintClient(com.android.tools.lint.LintCliFlags!);
    ctor public TestLintClient(com.android.tools.lint.LintCliFlags!, String!);
    method protected void addCleanupDir(java.io.File);
    method protected boolean allowAndroidBuildEnvironment();
    method public String! analyze(java.io.File!, java.util.List<java.io.File!>!, java.util.List<com.android.tools.lint.detector.api.Issue!>!) throws java.lang.Exception;
    method public String! analyze(java.io.File, java.util.List<java.io.File!>, java.util.List<com.android.tools.lint.detector.api.Issue!>, com.android.tools.lint.checks.infrastructure.TestLintClient.LintTestAnalysis) throws java.lang.Exception;
    method public String! analyzeAndReportProvisionally(java.io.File, java.util.List<java.io.File!>, java.util.List<com.android.tools.lint.detector.api.Issue!>) throws java.lang.Exception;
    method protected com.android.tools.lint.checks.infrastructure.TestResultState! checkLint(java.io.File, java.util.List<java.io.File!>, java.util.List<com.android.tools.lint.detector.api.Issue!>, com.android.tools.lint.checks.infrastructure.TestMode) throws java.lang.Exception;
    method protected String! cleanup(String!);
    method public String! getErrors();
    method public static com.android.ide.common.resources.ResourceRepository! getResources(com.android.ide.common.rendering.api.ResourceNamespace, String?, java.util.List<kotlin.Pair<java.lang.String!,java.util.List<java.io.File!>!>!>, boolean);
    method public void setIncremental(java.io.File!);
    method public void setLintTask(com.android.tools.lint.checks.infrastructure.TestLintTask?);
    method public String! writeOutput(java.util.List<com.android.tools.lint.detector.api.Incident!>!) throws java.io.IOException;
    field protected final java.util.Set<java.io.File!>! cleanupDirs;
    field protected java.io.File! incrementalCheck;
    field protected final java.io.StringWriter! writer;
  }

  public static class TestLintClient.TestLintRequest extends com.android.tools.lint.client.api.LintRequest {
    ctor public TestLintClient.TestLintRequest(com.android.tools.lint.client.api.LintClient, java.util.List<? extends java.io.File>);
  }

  public static class TestLintClient.TestProject extends com.android.tools.lint.detector.api.Project {
    ctor public TestLintClient.TestProject(com.android.tools.lint.client.api.LintClient, java.io.File, java.io.File, com.android.tools.lint.checks.infrastructure.ProjectDescription?, com.android.tools.lint.checks.infrastructure.GradleModelMocker?);
    method public void setReferenceDir(java.io.File!);
    field public final com.android.tools.lint.checks.infrastructure.GradleModelMocker? mocker;
  }

  public final class TestLintOptionsConfiguration extends com.android.tools.lint.client.api.LintOptionsConfiguration {
    ctor public TestLintOptionsConfiguration(com.android.tools.lint.checks.infrastructure.TestLintTask task, com.android.tools.lint.detector.api.Project project, com.android.tools.lint.client.api.ConfigurationHierarchy configurations, com.android.tools.lint.model.LintModelLintOptions lintOptions, boolean fatalOnly);
  }

  public final class TestLintResult {
    method public com.android.tools.lint.checks.infrastructure.TestLintResult check(com.android.tools.lint.checks.infrastructure.TestResultChecker checker, optional com.android.tools.lint.checks.infrastructure.TestResultTransformer transformer);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult check(com.android.tools.lint.checks.infrastructure.TestResultChecker checker);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult checkFix(String? fix, com.android.tools.lint.checks.infrastructure.TestFile after);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult checkHtmlReport(com.android.tools.lint.checks.infrastructure.TestResultChecker![] checkers, optional com.android.tools.lint.checks.infrastructure.TestResultTransformer transformer);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult checkSarifReport(com.android.tools.lint.checks.infrastructure.TestResultChecker![] checkers, optional com.android.tools.lint.checks.infrastructure.TestResultTransformer transformer);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult checkXmlReport(com.android.tools.lint.checks.infrastructure.TestResultChecker![] checkers, optional com.android.tools.lint.checks.infrastructure.TestResultTransformer transformer);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult checkXmlReport(com.android.tools.lint.checks.infrastructure.TestResultChecker![] checkers, optional boolean fullPaths, optional com.android.tools.lint.XmlFileType reportType, optional com.android.tools.lint.checks.infrastructure.TestResultTransformer transformer);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult expect(String expectedText, optional Class<? extends java.lang.Exception>? expectedException, optional com.android.tools.lint.checks.infrastructure.TestResultTransformer transformer, optional com.android.tools.lint.checks.infrastructure.TestMode testMode);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult expect(String expectedText, optional Class<? extends java.lang.Exception>? expectedException, optional com.android.tools.lint.checks.infrastructure.TestResultTransformer transformer);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult expect(String expectedText, optional Class<? extends java.lang.Exception>? expectedException);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult expect(String expectedText);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult expectClean();
    method public com.android.tools.lint.checks.infrastructure.TestLintResult expectContains(String expectedText, optional com.android.tools.lint.checks.infrastructure.TestResultTransformer transformer, optional com.android.tools.lint.checks.infrastructure.TestMode testMode);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult expectContains(String expectedText, optional com.android.tools.lint.checks.infrastructure.TestResultTransformer transformer);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult expectContains(String expectedText);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult expectCount(int expectedCount, com.android.tools.lint.detector.api.Severity... severities);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult expectErrorCount(int expectedCount);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult expectFixDiffs(String expected);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult expectHtml(@org.intellij.lang.annotations.Language("HTML") String expected, optional com.android.tools.lint.checks.infrastructure.TestResultTransformer transformer);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult expectInlinedMessages(optional boolean useRaw);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult expectMatches(@org.intellij.lang.annotations.Language("RegExp") String regexp, optional com.android.tools.lint.checks.infrastructure.TestResultTransformer transformer);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult expectMatches(@org.intellij.lang.annotations.Language("RegExp") String regexp);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult expectSarif(@org.intellij.lang.annotations.Language("JSON") String expected, optional com.android.tools.lint.checks.infrastructure.TestResultTransformer transformer);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult expectWarningCount(int expectedCount);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult expectXml(@org.intellij.lang.annotations.Language("XML") String expected, optional com.android.tools.lint.checks.infrastructure.TestResultTransformer transformer);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult expectXml(@org.intellij.lang.annotations.Language("XML") String expected, optional boolean fullPaths, optional com.android.tools.lint.XmlFileType reportType, optional com.android.tools.lint.checks.infrastructure.TestResultTransformer transformer);
    method public com.android.tools.lint.checks.infrastructure.TestLintResult maxLineLength(int maxLineLength);
    method public com.android.tools.lint.checks.infrastructure.LintFixVerifier verifyFixes();
    method public com.android.tools.lint.checks.infrastructure.LintFixVerifier verifyFixes(com.android.tools.lint.checks.infrastructure.TestMode testMode);
    field public static final com.android.tools.lint.checks.infrastructure.TestLintResult.Companion Companion;
  }

  public static final class TestLintResult.Companion {
    method public java.util.Comparator<com.android.tools.lint.detector.api.Incident> getComparator();
    method public String getDiff(String before, String after);
    method public String getDiff(String before, String after, int windowSize);
    method public String getDiff(String![] before, String![] after, optional int windowSize);
    property public final java.util.Comparator<com.android.tools.lint.detector.api.Incident> comparator;
  }

  public final class TestLintRunner {
    ctor public TestLintRunner(com.android.tools.lint.checks.infrastructure.TestLintTask task);
    method public com.android.tools.lint.checks.infrastructure.TestLintClient createClient();
    method public java.util.List<com.android.tools.lint.detector.api.Project> createProjects(boolean keepFiles);
    method public java.util.List<java.io.File> createProjects(java.io.File rootDir);
    method public boolean getAlreadyRun();
    method public com.android.tools.lint.checks.infrastructure.TestMode getCurrentTestMode();
    method public Throwable? getFirstThrowable();
    method @javax.annotation.CheckReturnValue public com.android.tools.lint.checks.infrastructure.TestLintResult run();
    method public void setCurrentTestMode(com.android.tools.lint.checks.infrastructure.TestMode currentTestMode);
    method public void setFirstThrowable(Throwable? firstThrowable);
    method public String stripRoot(java.io.File rootDir, String path);
    property public final boolean alreadyRun;
    property public final com.android.tools.lint.checks.infrastructure.TestMode currentTestMode;
    property public final Throwable? firstThrowable;
  }

  public class TestLintTask {
    ctor public TestLintTask();
    ctor public TestLintTask(com.android.tools.lint.checks.infrastructure.ProjectDescription![]);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! addTestModes(com.android.tools.lint.checks.infrastructure.TestMode!...);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! allowCompilationErrors();
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! allowCompilationErrors(boolean);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! allowDelayedIssueRegistration(boolean);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! allowDelayedIssueRegistration();
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! allowDuplicates();
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! allowExceptions(boolean);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! allowMissingSdk();
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! allowMissingSdk(boolean);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! allowNetworkAccess(boolean);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! allowObsoleteLintChecks(boolean);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! allowSystemErrors(boolean);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! baseline(com.android.tools.lint.checks.infrastructure.TestFile);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! checkMessage(com.android.tools.lint.checks.infrastructure.TestLintTask.ErrorMessageChecker);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! checkProjects(com.android.tools.lint.checks.infrastructure.TestLintTask.ProjectInspector);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! checkUInjectionHost(boolean);
    method @Deprecated public com.android.tools.lint.checks.infrastructure.TestLintTask! client(com.android.tools.lint.checks.infrastructure.TestLintClient);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! clientFactory(com.android.tools.lint.checks.infrastructure.TestLintTask.ClientFactory?);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! configureDriver(com.android.tools.lint.checks.infrastructure.TestLintTask.LintDriverConfigurator);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! configureOptions(com.android.tools.lint.checks.infrastructure.TestLintTask.OptionSetter);
    method public java.util.List<com.android.tools.lint.detector.api.Project!> createProjects(boolean);
    method public java.util.List<java.io.File!> createProjects(java.io.File!);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask customRules(java.io.File!...);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! customScope(java.util.EnumSet<com.android.tools.lint.detector.api.Scope!>?);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! desugaring(java.util.Set<com.android.tools.lint.detector.api.Desugaring!>);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! detector(com.android.tools.lint.detector.api.Detector);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! expectIdenticalTestModeOutput(boolean);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! files(com.android.tools.lint.checks.infrastructure.TestFile!...);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! forceSymbolResolutionErrors();
    method public java.util.List<com.android.tools.lint.detector.api.Issue!> getCheckedIssues();
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! ignoreUnknownGradleConstructs();
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! includeSelectionMarkers(boolean);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! incremental(String);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! incremental();
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! isolated(String);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! isolated();
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! issueIds(java.lang.String!...);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! issues(com.android.tools.lint.detector.api.Issue!...);
    method @javax.annotation.CheckReturnValue public static com.android.tools.lint.checks.infrastructure.TestLintTask lint();
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! listener(com.android.tools.lint.client.api.LintListener);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask networkData(String, byte[]);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask networkData(String, String);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! overrideConfig(com.android.tools.lint.checks.infrastructure.TestFile);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! platforms(java.util.EnumSet<com.android.tools.lint.detector.api.Platform!>!);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! projects(com.android.tools.lint.checks.infrastructure.ProjectDescription!...);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! reportFrom(com.android.tools.lint.checks.infrastructure.ProjectDescription?);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! requireCompileSdk();
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! requireCompileSdk(boolean);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! rootDirectory(java.io.File?);
    method @javax.annotation.CheckReturnValue public com.android.tools.lint.checks.infrastructure.TestLintResult run();
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! sdkHome(java.io.File!);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! showSecondaryLintContent(boolean);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! skipTestModes(com.android.tools.lint.checks.infrastructure.TestMode!...);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! stripRoot(boolean);
    method public String! stripRoot(java.io.File!, String!);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! supportResourceRepository(boolean);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! testModes(java.util.Collection<com.android.tools.lint.checks.infrastructure.TestMode!>!);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! testModes(com.android.tools.lint.checks.infrastructure.TestMode!...);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! testName(String!);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! textFormat(com.android.tools.lint.detector.api.TextFormat!);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! useTestConfiguration(boolean);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! useTestProjectImplementation(boolean);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! variant(String!);
    method public com.android.tools.lint.checks.infrastructure.TestLintTask! vital(boolean);
    field public boolean forceSymbolResolutionErrors;
    field protected com.android.tools.lint.checks.infrastructure.ProjectDescriptionList! projects;
    field public java.io.File! sdkHome;
    field public String! testName;
  }

  @java.lang.FunctionalInterface public static interface TestLintTask.ClientFactory {
    method public com.android.tools.lint.checks.infrastructure.TestLintClient create();
  }

  @java.lang.FunctionalInterface public static interface TestLintTask.ErrorMessageChecker {
    method public void checkReportedError(com.android.tools.lint.detector.api.Context, com.android.tools.lint.detector.api.Issue, com.android.tools.lint.detector.api.Severity, com.android.tools.lint.detector.api.Location, String, com.android.tools.lint.detector.api.LintFix?);
  }

  @java.lang.FunctionalInterface public static interface TestLintTask.LintDriverConfigurator {
    method public void configure(com.android.tools.lint.client.api.LintDriver);
  }

  @java.lang.FunctionalInterface public static interface TestLintTask.OptionSetter {
    method public void set(com.android.tools.lint.LintCliFlags);
  }

  @java.lang.FunctionalInterface public static interface TestLintTask.ProjectInspector {
    method public void inspect(com.android.tools.lint.client.api.LintDriver, java.util.List<com.android.tools.lint.detector.api.Project!>);
  }

  public class TestMode implements java.lang.Iterable<com.android.tools.lint.checks.infrastructure.TestMode> kotlin.jvm.internal.markers.KMappedMarker {
    ctor public TestMode(String description, String fieldName);
    method public void after(com.android.tools.lint.checks.infrastructure.TestMode.TestModeContext context);
    method public boolean applies(com.android.tools.lint.checks.infrastructure.TestMode.TestModeContext context);
    method public Object? before(com.android.tools.lint.checks.infrastructure.TestMode.TestModeContext context);
    method public final String getDescription();
    method public String? getDiffExplanation();
    method public kotlin.jvm.functions.Function3<com.android.tools.lint.checks.infrastructure.TestMode.TestModeContext,com.android.tools.lint.client.api.LintListener.EventType,java.lang.Object,kotlin.Unit>? getEventListener();
    method public final String getFieldName();
    method public String getFolderName();
    method public java.util.Iterator<com.android.tools.lint.checks.infrastructure.TestMode> iterator();
    method public static final java.util.List<com.android.tools.lint.checks.infrastructure.TestMode> values();
    property public final String description;
    property public String? diffExplanation;
    property public kotlin.jvm.functions.Function3<com.android.tools.lint.checks.infrastructure.TestMode.TestModeContext,com.android.tools.lint.client.api.LintListener.EventType,java.lang.Object,kotlin.Unit>? eventListener;
    property public final String fieldName;
    property public String folderName;
    field public static final com.android.tools.lint.checks.infrastructure.TestMode BYTECODE_ONLY;
    field public static final com.android.tools.lint.checks.infrastructure.TestMode.Companion Companion;
    field public static final com.android.tools.lint.checks.infrastructure.TestMode DEFAULT;
    field public static final com.android.tools.lint.checks.infrastructure.TestMode PARTIAL;
    field public static final com.android.tools.lint.checks.infrastructure.TestMode RESOURCE_REPOSITORIES;
    field public static final com.android.tools.lint.checks.infrastructure.TestMode SOURCE_ONLY;
    field public static final com.android.tools.lint.checks.infrastructure.TestMode UI_INJECTION_HOST;
  }

  public static final class TestMode.Companion {
    method public boolean classOnly(java.util.EnumSet<com.android.tools.lint.detector.api.Scope> set);
    method public boolean classOnly(com.android.tools.lint.detector.api.Implementation);
    method public void deleteCompiledSources(java.util.Collection<com.android.tools.lint.checks.infrastructure.ProjectDescription> projects, com.android.tools.lint.checks.infrastructure.TestMode.TestModeContext context, optional boolean deleteSourceFiles, optional boolean deleteBinaryFiles);
    method public java.util.List<com.android.tools.lint.checks.infrastructure.TestMode> values();
  }

  public static final class TestMode.TestModeContext {
    ctor public TestMode.TestModeContext(com.android.tools.lint.checks.infrastructure.TestLintTask task, java.util.List<com.android.tools.lint.checks.infrastructure.ProjectDescription> projects, java.util.List<? extends java.io.File> projectFolders, Object? clientState, optional com.android.tools.lint.client.api.LintDriver? driver, optional com.android.tools.lint.detector.api.Context? lintContext);
    method public Object? getClientState();
    method public com.android.tools.lint.client.api.LintDriver? getDriver();
    method public com.android.tools.lint.detector.api.Context? getLintContext();
    method public java.util.List<java.io.File> getProjectFolders();
    method public java.util.List<com.android.tools.lint.checks.infrastructure.ProjectDescription> getProjects();
    method public com.android.tools.lint.checks.infrastructure.TestLintTask getTask();
    property public final Object? clientState;
    property public final com.android.tools.lint.client.api.LintDriver? driver;
    property public final com.android.tools.lint.detector.api.Context? lintContext;
    property public final java.util.List<java.io.File> projectFolders;
    property public final java.util.List<com.android.tools.lint.checks.infrastructure.ProjectDescription> projects;
    property public final com.android.tools.lint.checks.infrastructure.TestLintTask task;
  }

  public interface TestResourceProvider {
    method public java.io.InputStream getTestResource(String relativePath, boolean expectExists);
  }

  public interface TestResultChecker {
    method public void check(String);
  }

  public class TestResultState {
  }

  public interface TestResultTransformer {
    method public String transform(String);
  }

}

