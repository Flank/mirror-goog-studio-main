/*
 * Copyright (C) 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.tools.bazel.avd;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import org.junit.rules.ExternalResource;

/** JUnit rule that calls the executable generated by the avd rule to start and stop an emulator. */
public final class Emulator extends ExternalResource {

    private final String devicePath;
    private final String port;

    /**
     * Instantiates a rule that starts and stops an emulator created by the avd rule.
     *
     * @param devicePath Path to the device executable generated by the avd rule.
     * @param port ADB port to start the emulator on.
     */
    public Emulator(String devicePath, int port) {
        this.devicePath = devicePath;
        this.port = String.valueOf(port);
    }

    @Override
    public void before() throws Throwable {
        System.out.println("Starting emulator");
        System.out.println(exec(devicePath + " " + port));
        System.out.println("Emulator started");
    }

    @Override
    public void after() {
        try {
            System.out.println("Killing emulator");
            System.out.println(exec(devicePath + " kill " + port));
            System.out.println("Emulator killed");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private static String exec(String cmd) throws Exception {
        Runtime r = Runtime.getRuntime();
        Process p = r.exec(cmd);
        p.waitFor();
        String res = "";
        try (BufferedReader b = new BufferedReader(new InputStreamReader(p.getInputStream()))) {
            String l = "";
            while ((l = b.readLine()) != null) {
                res += l + "\n";
            }
        }

        return res;
    }
}
