package com.android.tools.maven;

import com.android.tools.utils.WorkspaceUtils;
import java.io.FileWriter;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.apache.maven.model.Model;
import org.eclipse.aether.artifact.Artifact;
import org.eclipse.aether.resolution.ArtifactDescriptorException;

/**
 * Binary that generates a BUILD file with a single java_import for every {@code *.pom} file in a
 * local m2 repository.
 */
public class JavaImportGenerator {

    static final String JAR_RULE_NAME = "jar";
    static final String POM_RULE_NAME = "pom";
    private static final String GENERATED_WARNING =
            "# This BUILD file was generated by //tools/base/bazel:java_import_generator, please do not edit.";

    public static void main(String[] args) throws IOException, ArtifactDescriptorException {
        Path repoDirectory;

        if (args.length == 1) {
            repoDirectory = Paths.get(args[0]);
        } else {
            repoDirectory = WorkspaceUtils.findPrebuiltsRepository();
        }

        if (!Files.isDirectory(repoDirectory)) {
            usage();
        }

        new JavaImportGenerator(new MavenRepository(repoDirectory)).processPomFiles();
    }

    private static void usage() {
        System.err.println("Usage: java_import_generator [path/to/m2/repository]");
        System.err.println("");
        System.err.println(
                "If the path to m2 repo is omitted, the one from current WORKSPACE will be used.");
        System.exit(1);
    }

    private final MavenRepository mRepo;

    public JavaImportGenerator(MavenRepository repo) {
        mRepo = repo;
    }

    private void processPomFiles() throws IOException, ArtifactDescriptorException {
        Files.walk(mRepo.getDirectory())
                .filter(path -> hasExtension(path, ".pom"))
                .forEach(
                        pom -> {
                            try {
                                processPomFile(pom, true);
                            } catch (IOException e) {
                                throw new UncheckedIOException(e);
                            }
                        });

        System.out.println();
    }

    private static boolean hasExtension(Path path, String extension) {
        return path.toString().endsWith(extension);
    }

    /**
     * Processes a pom file generating all the rules needed for this pom.
     * @return the path to a parent pom file if it exists.
     */
    private Path processPomFile(Path pomFile, boolean delete) throws IOException {
        Model pomModel = mRepo.getPomEffectiveModel(pomFile);
        if (pomModel == null) {
            return null;
        }
        Path jarFile = null;
        if (!"aar".equals(pomModel.getPackaging()) && !"pom".equals(pomModel.getPackaging())) {
            jarFile = mRepo.getJarPath(pomModel);
            if (!Files.exists(jarFile)) {
                System.err.println("Missing jar file: " + mRepo.relativize(jarFile));
            }
        }

        Path parentPom = null;
        if (pomModel.getParent() != null) {
            parentPom = mRepo.getParentPomPath(pomModel);
        }
        generateImportRules(jarFile, pomFile, parentPom, delete);
        return parentPom;
    }

    public void generateImportRules(Artifact artifact) throws IOException {
        Path pomFile = mRepo.getPomPath(artifact);
        while (pomFile != null) {
            pomFile = processPomFile(pomFile, false);
        }
    }

    private void generateImportRules(Path jarFile, Path pomFile, Path parentPath, boolean delete)
            throws IOException {
        Path directory = pomFile.getParent();
        Path buildFile = directory.resolve("BUILD");
        if (Files.exists(buildFile)) {
            if (delete) {
                Files.delete(buildFile);
            } else {
                return;
            }
        }

        try (FileWriter fileWriter = new FileWriter(buildFile.toFile())) {
            fileWriter.append(GENERATED_WARNING);
            fileWriter.append(System.lineSeparator());
            fileWriter
                    .append("load(\"//tools/base/bazel:maven.bzl\", \"maven_java_import\", \"maven_pom\")");
            fileWriter.append(System.lineSeparator());
            fileWriter.append(System.lineSeparator());

            if (jarFile != null) {
                fileWriter.append(
                        String.format(
                                "maven_java_import(name = \""
                                        + JAR_RULE_NAME
                                        + "\", jars = [\"%s\"], pom = \":pom\", visibility = [\"//visibility:public\"])",
                                jarFile.getFileName()));
                fileWriter.append(System.lineSeparator());
            }
            String parent = "";
            if (parentPath != null) {
                String label = mRepo.relativize(parentPath).toString()
                        .replaceAll("/[^/]+.pom", ":" + POM_RULE_NAME);
                label = "//prebuilts/tools/common/m2/repository/" + label;
                parent = ", parent =\"" + label + "\"";
            }
            fileWriter.append(
                    String.format(
                            "maven_pom(name = \""
                                    + POM_RULE_NAME
                                    + "\", source = \"%s\" %s, visibility = [\"//visibility:public\"])",
                            pomFile.getFileName(),
                            parent));
            fileWriter.append(System.lineSeparator());

        } catch (RuntimeException e) {
            throw e;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
