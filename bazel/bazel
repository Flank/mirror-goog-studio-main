#!/usr/bin/python
"""Runs the bazel executable for the platform, passing args along."""

import os
import subprocess
import sys
import multiprocessing


def main():
  workspace = find_workspace(os.getcwd())
  if not workspace:
    sys.exit('Must run %s within a workspace.' % os.path.basename(sys.argv[0]))
  if sys.platform.startswith('linux'):
    platform = 'linux-x86_64'
    jdk_subdir = 'linux'
  elif sys.platform == 'darwin':
    platform = 'darwin-x86_64'
    jdk_subdir = os.path.join('mac', 'Contents', 'Home')
  else:
    sys.exit('Platform %s is not yet supported.' % sys.platform)

  bazel = os.path.join(workspace, 'prebuilts', 'tools', platform, 'bazel',
                       'bazel-real')
  env = {
      'CC':
          '/usr/bin/gcc',
      'JAVA_HOME':
          os.path.join(workspace, 'prebuilts', 'studio', 'jdk', jdk_subdir),
      'TERM':
          os.environ.get('TERM') or '',
  }
  args = sys.argv[1:]

  if args[0] == 'test':
    # Keep this logic in sync with integration-test BUILD file and CheckAllRunner.
    cpus = multiprocessing.cpu_count()
    if cpus > 20:
      # Most likely z840. For now limit test jobs to 8, until we experiment
      # with higher values.
      test_jobs = 8
    else:
      test_jobs = 2

    # Insert the flag right after "test".
    args.insert(1, '--local_test_jobs=' + str(test_jobs))
    print('Running with {} local test jobs.'.format(test_jobs))

  if sys.platform == 'darwin':
    args.insert(0, '--watchfs')

  sys.exit(subprocess.call([bazel] + args, env=env))


def find_workspace(path):
  if os.path.isfile(os.path.join(path, 'WORKSPACE')):
    return path
  else:
    parent = os.path.dirname(path)
    return None if parent == path else find_workspace(parent)


if __name__ == '__main__':
  main()
