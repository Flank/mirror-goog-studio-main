syntax = "proto3";
package proto;

option java_package = "com.android.tools.deploy.proto";

option optimize_for = LITE_RUNTIME;

// A request to hot-swap a particular application package.
message SwapRequest {
  // The application package.
  string package_name = 1;

  // If true, restarts the current activity after a successful hot-swap.
  bool restart_activity = 2;

  // The processes that the JVMTI agents should attach to.
  repeated string process_names = 3;

  // The classes to be hot-swapped.
  repeated ClassDef classes = 4;
}

message ClassDef {
  // JVM class name for the class that is to be swapped.
  string name = 1;

  // Dex code of the class to be swapped.
  bytes dex = 2;
}

// A response detailing the results of a swap request.
message AgentSwapResponse {
  enum Status {
    UNKNOWN = 0;
    OK = 1; // The swap completed successfully.
    ERROR = 2; // The swap did not succeed.
    NEED_ACTIVITY_RESTART = 3; // The agent is waiting on an activity restart.
  }

  // The state of the swap that was requested.
  Status status = 1;

  // The pid of the process this agent was attached to.
  int32 pid = 2;

  repeated Event events = 3;
}

// Message returned when installer receives a SwapRequest.
message SwapResponse {
  enum Status {
    UNKNOWN = 0;
    OK = 1; // The swap completed successfully.
    ERROR = 2; // The swap did not succeed.
  }

  Status status = 1;
  repeated Event events = 2;
}

// Message returned by the Android native IRR installer. There are two layers :
// - Installer layer which is unaware of commands specifics.
// - Command layer whici is unaware of installe specifics.
// This layering is visible with the events messages which can be in both 
// 'events' fields but also 'extra' field.
message InstallerResponse {
  enum Status {
    UNINITIALIZED = 0;
    OK = 1;
    ERROR_WRONG_VERSION = 2;
    ERROR_PARAMETER = 3;
    ERROR_CMD = 4;
  }
  Status status = 1;
  repeated Event events = 2;
  oneof extra {
    SwapResponse swap_response = 3;
    DumpResponse dump_response = 4;
  }
}

message Event {
  enum Type {
    UNINITIALIZED = 0;
    TRC_BEG = 1; // Used for tracing. Mark beginning of a section.
    TRC_END = 2; // Used for tracing. Mark end of a section.
    LOG_OUT = 3;
    LOG_ERR = 4;
  }
  Type type = 1;
  int64 pid = 2;
  int64 tid = 3;
  string text = 4;
  int64 timestamp_ns = 5;
}

message DumpResponse {
  enum Status {
    UNKNOWN = 0;
    OK = 1; // The dump completed successfully.
    ERROR = 2; // The dump did not succeed.
  }

  Status status = 1;
  repeated Event events = 2;
  // TODO: Add dumps content and filename here instead of using the device and host filesystem.
}
