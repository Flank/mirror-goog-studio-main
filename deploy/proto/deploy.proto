syntax = "proto3";
package proto;

option java_package = "com.android.tools.deploy.proto";

option optimize_for = LITE_RUNTIME;

// A request to hot-swap a particular application package.
message SwapRequest {
  // The application package.
  string package_name = 1;

  // If true, restarts the current activity after a successful hot-swap.
  bool restart_activity = 2;

  // The classes to be hot-swapped.
  repeated ClassDef new_classes = 3;
  repeated ClassDef modified_classes = 4;

  // The session id where the new apk have been staged.
  string session_id = 5;

  // The processes to code swap.
  repeated int32 process_ids = 6;

  // The number of extra agents that the server should wait for.
  // Those are agents that the server is not responsible to start.
  int32 extra_agents = 7;

  Arch arch = 8;
}

message ResumeRequest {}

message ClassDef {
  // JVM class name for the class that is to be swapped.
  string name = 1;

  // Dex code of the class to be swapped.
  bytes dex = 2;
}

message JvmtiError {
  message Details {
    enum Type {
      UNKNOWN = 0;
      FIELD_ADDED = 1;
      FIELD_REMOVED = 2;
    }

    // The type of error.
    Type type = 1;

    // The name of the field, method, or class that caused the error.
    string name = 2;

    // The parent class, if any, of the field, method, or class.
    string class_name = 3;
  }

  string error_code = 1;
  repeated Details details = 2;
}

// A response detailing the results of a swap request.
message AgentSwapResponse {
  enum Status {
    UNKNOWN = 0;
    OK = 1;                    // The swap completed successfully
    SOCKET_READ_FAILED = 2;    // The request could not be read from the socket
    REQUEST_PARSE_FAILED = 3;  // The request could not be parsed into a proto
    INSTRUMENTATION_FAILED = 4;  // The application could not be instrumented
    CLASS_NOT_FOUND = 5;  // The class requested for swap could not be found
    JVMTI_ERROR = 6;      // A JVMTI error occurred during swap
    JNI_SETUP_FAILED = 7; // The JNI environment could not be set up.
    JVMTI_SETUP_FAILED = 8; // The JVMTI environment could not be set up.
    SET_CAPABILITIES_FAILED = 9; // JVMTI capabilities could not be set.
  }

  // The state of the swap that was requested.
  Status status = 1;

  // The pid of the process this agent was attached to.
  int32 pid = 2;

  repeated Event events = 3;

  // Detailed information on the errors that occurred.
  oneof error_details {
    string class_name = 4;
    JvmtiError jvmti_error = 5;
  }
}

// Message returned when installer receives a SwapRequest.
message SwapResponse {
  enum Status {
    UNKNOWN = 0;
    OK = 1;                       // The swap completed successfully.
    AGENT_ERROR = 2;              // One or more of the agents reported failure
    INSTALLATION_FAILED = 3;      // Calling install-commit failed
    ACTIVITY_RESTART_FAILED = 4;  // Calling update-appinfo failed
    SETUP_FAILED = 5;             // Could not copy files
    START_SERVER_FAILED = 6;      // Could not start the server
    AGENT_ATTACH_FAILED = 7;      // Could not attach agents
    MISSING_AGENT_RESPONSES = 8;  // Not all agents responded
    WRITE_TO_SERVER_FAILED = 9;   // Could not communicate with the server
    UNPARSEABLE_AGENT_RESPONSE = 10;  // An agent responded in an unexpected way
    NO_DEBUGGER_SESSIONS = 11;        // Could not swap with debugger
  }

  Status status = 1;

  repeated AgentSwapResponse failed_agents = 2;
}

// Message returned by the Android native IRR installer. There are two layers :
// - Installer layer which is unaware of commands specifics.
// - Command layer whici is unaware of installe specifics.
// This layering is visible with the events messages which can be in both
// 'events' fields but also 'extra' field.
message InstallerResponse {
  enum Status {
    UNINITIALIZED = 0;
    OK = 1;
    ERROR_WRONG_VERSION = 2;
    ERROR_PARAMETER = 3;
    ERROR_CMD = 4;
  }
  Status status = 1;
  repeated Event events = 2;
  oneof extra {
    SwapResponse swap_response = 3;
    DumpResponse dump_response = 4;
    DeltaPreinstallResponse deltapreinstall_response = 5;
    DeltaInstallResponse deltainstall_response = 6;
  }
}

message Event {
  enum Type {
    UNINITIALIZED = 0;
    TRC_BEG = 1;  // Used for tracing. Mark beginning of a section.
    TRC_END = 2;  // Used for tracing. Mark end of a section.
    LOG_OUT = 3;
    LOG_ERR = 4;

    // Used for tracing. Marks the beginning of a section that should
    // be reported as a DeployMetric in studio.
    TRC_METRIC = 5;
  }
  Type type = 1;
  int64 pid = 2;
  int64 tid = 3;
  string text = 4;
  int64 timestamp_ns = 5;
}

message ApkDump {
  string name = 1;
  bytes cd = 2;
  bytes signature = 3;
  string absolute_path = 4;
}

enum Arch {
  ARCH_UNKNOWN = 0;
  ARCH_32_BIT = 1;
  ARCH_64_BIT = 2;
}

message PackageDump {
  // The name of the package.
  string name = 1;

  // The apk files installed in the package.
  repeated ApkDump apks = 2;

  // The package processes currently executing.
  repeated int32 processes = 3;

  // Whether the package is running as 32-bit or 64-bit.
  Arch arch = 4;
}

message DumpResponse {
  enum Status {
    UNKNOWN = 0;
    OK = 1;  // The dump completed successfully.
    ERROR_PACKAGE_NOT_FOUND = 2;
  }

  Status status = 1;
  repeated PackageDump packages = 2;
  string failed_package = 3;
}

message PatchInstruction {
  string src_absolute_path = 1;
  // A stream of:
  // (int32 offset, int32 length) referring to the offset to patch in the
  // destination file and the length of data to consume from the patches
  // stream in this proto object.
  bytes instructions = 2;
  bytes patches = 3;
  int64 dst_filesize = 4;
}

message InstallInfo {
  repeated string options = 1;
  repeated PatchInstruction patchInstructions = 2;
  bool inherit = 3;
  string package_name = 4;
}

enum DeltaStatus {
  UNKNOWN = 0;
  OK = 1;
  ERROR = 2;
  STREAM_APK_FAILED = 3;
  STREAM_APK_NOT_SUPPORTED = 4;
}

message DeltaPreinstallResponse {
  DeltaStatus status = 1;
  string session_id = 2;
}

message DeltaInstallResponse {
  DeltaStatus status = 1;
  // The output returned by the package manager when calling
  // either "pm install" or "pm commit". Parsed to determine
  // reason upon failure.
  string install_output = 2;
}
