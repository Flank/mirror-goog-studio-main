/*
 * Copyright (C) 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package deploy.service.proto;
option java_package = "com.android.deploy.service.proto";

/*
 * Service for interacting with a DDMLIB Agent and Deployer. As features are required from external
 * sources. This service API will be expanded to expose the functionality from DDMLIB. Using
 * this service is preferred over interacting with ADB directly as it allows us to handle multiple
 * programs interacting with the device and listening for "Clients" (Processes really) without
 * fighting for ADB connections or jdwp-tracker connections.
 */
service DeployService {
  /*
   * Get a list of devices from the current ADB bridge. This API will return all known devices
   * to DDMLIB at the time of the API call.
   * TODO: Create a streaming RPC if we need to mirror the addDeviceListener API.
   */
  rpc GetDevices(DeviceRequest) returns (DeviceResponse) {
  }
  /*
   * Get a list of clients for a given device. The list of clients is only those that are
   * enumerated by DDMLIB. Currently this is restricted to clients that are returned via
   * jdwp-track
   */
  rpc GetClients(ClientRequest) returns (ClientResponse) {
  }
  /*
   * Returns the debugging port setup by DDMLIB that is expecting a debugger
   * connection. The debugger port is not returned in the initial client list because in the
   * future the debugger port is not guaranteed to be active just because a client is created.
   */
  rpc GetDebugPort(DebugPortRequest) returns (DebugPortResponse) {
  }

  /*
   * Using the Deployer installs the APK or series of APKs for a given package.
   * The response contains an error code if the install fails for any reason. The Deployer will
   * trigger a prompt if the APK installed has a version mismatch with the APK that is going to be
   * installed. If this happens the default response to the prompt is false. The prompt is returned
   * in the response. The caller is expected to call InstallApk again with a series of prepopulated
   * responses to prompt.
   */
  rpc InstallApk(InstallApkRequest) returns (InstallApkResponse) {
  }

  /*
   * This RPC allows for different types of network test to be established between the host and
   * device. A bandwidth test that sends data to the installer daemon running on device. As well as
   * a ping test that uses the installer daemon to calculate the round trip time (RTT) of data.
   * The bandwidth test is used as a proxy for how fast data can be sent to or from the device. The
   * test works by calling the installer daemon and sending it random data, or having the daemon
   * send random data back. Data on both ends should not be stored in memory or on disk. The data is
   * sent in chucks to reduce the overall memory footprint required. This adds some overhead via the
   * gRPC protocol but if the amount of data is large enough it should not be significant.
   * The ping test is used as a proxy for how long it takes to send a small payload to the device
   * and for that payload to be returned. This API allows for capturing the RTT to the device, as
   * well as RTT from the device.
   */
  rpc RunNetworkTest(NetworkTestRequest) returns (NetworkTestResponse) {
  }
}


/*
 * Settings to configure the network test.
 */
message NetworkTestRequest {
    NetworkTest test = 1;
    // The serial/device id to run the test on.
    string device_id = 4;
}

/*
 * Timing information as well as which test was run returned by the network test.
 */
message NetworkTestResponse {
    NetworkTest test = 1;
    uint64 duration_ns = 2;
    uint64 sent_bytes = 3;
    uint64 received_bytes = 4;
    string error = 5;
}

/*
 * What network test to run
 */
message NetworkTest {
    /*
     * The different types of network tests.
     */
    enum Type {
        // Not set, no tests will be run.
        UNKNOWN = 0;
        // Runs the bandwidth test.
        BANDWIDTH = 1;
        // Runs the ping test.
        PING = 2;
    }
    // What test type to run.
    Type type = 1;
    // True if the test captures timing information from the host to the device. False if the test
    // should capture timing from device to host.
    bool host_to_device = 2;
    // Used only with type [BANDWIDTH]
    uint32 number_of_bytes = 3;
}

/*
 * Properties of a device that are exposed to external clients.
 * Note: This is not a complete list of device properties supported by DDMLIB.
 */
message Device {
  string serial_number = 1;
  string status = 2;
  string product = 3;
  string model = 4;
  string device = 5;
  string transport_id = 6;
  repeated string abis = 7;
  bool is_emulator = 8;
  string avd = 9;
}

/*
 * Properties of a client that are exposed to external clients.
 * Note: This is not a complete list of properties supported by DDMLIB.
 */
message Client {
  uint32 pid = 1;
  // Name of the package.
  // e.g., com.example.myapp
  string name = 2;

  // Name of the process.
  // Examples:
  //   com.example.myapp
  //   com.example.myapp:myservice
  //   com.example.myservice
  string description = 3;
}

message DeviceRequest {
}
message DeviceResponse {
  repeated Device devices = 1;
}

message ClientRequest {
  string device_id = 1;
}
message ClientResponse {
  repeated Client clients = 1;
}

message DebugPortRequest {
  uint32 pid = 1;
  string device_id = 2;
}
message DebugPortResponse {
  int32 port = 1;
}

message InstallApkRequest {
  string device_id = 1;
  string package_name = 2;
  repeated string apk = 3;
  repeated bool promptResponse = 4;
}

message InstallApkResponse {
  int32 exit_status = 1;
  repeated string message = 2;
  repeated string prompt = 3;
  DeployLog log = 4;
  repeated DeployMetric metric = 5;
}

message DeployLog {
    repeated string error = 1;
    repeated string warning = 2;
    repeated string info = 3;
    repeated string verbose = 4;
}

message DeployMetric {
    string name = 1;
    string status = 2;
    int64 startNs = 3;
    int64 endNs = 4;
}
