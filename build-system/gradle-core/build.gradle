apply plugin: 'java'
apply plugin: 'jacoco-tools-base'
apply plugin: 'clone-artifacts'
apply plugin: 'antlr'
apply plugin: 'com.google.protobuf'

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
}

configurations {
    provided
    includeInJar
}

// Incremental update test support
File classesDir = new File(project.buildDir, "classes/incremental-test")
File baseClasses = new File(classesDir, "base")
File baseInstrumentedClasses = new File(classesDir, "baseInstrumented")

sourceSets {
    main {
        java.srcDirs += 'src/fromGradle/java'
        resources.srcDirs = ['src/main/resources', 'src/fromGradle/resources']
        compileClasspath += configurations.provided
    }

    test {
        compileClasspath += files(baseClasses)
        runtimeClasspath += files(baseInstrumentedClasses)
    }
}

dependencies {
    compile project(':base:builder')
    compile project(':base:lint')
    // TODO: Switch to remote dependency once the empty deprecated transform-api is published
    compile project(':base:transform-api')
    compile project(':base:gradle-api')
    compile project(':dataBinding:compilerCommon')
    compile libs.asm
    compile libs.asm_commons
    compile libs.proguard
    compile libs.jacoco_core
    compile libs.jacoco_report
    compile libs.jopt
    compile libs.protobuf
    testCompile project(':base:instant-run:instant-run-annotations')
    testCompile project(':base:instant-run:instant-run-runtime')


    // Add gradleApi to classpath for compilation, but use provided configuration so that groovy is
    // not exposed as a runtime dependency.
    provided gradleApi()

    // Exclude plugins/core-* to avoiding adding Gradle's ecj implementation to the classpath
    testCompile fileTree(
            dir:file("$rootProject.ext.androidHostOut/gradle-dist-link/lib"),
            includes: ["*", "plugins/gradle*"])

    includeInJar project(':base:instant-run:instant-run-server')

    antlr libs.antlr3

    testCompile libs.junit
    testCompile libs.truth
    testCompile libs.mockito_core
    testCompile libs.guava
	testCompile libs.equalsverifier
    testCompile project(':base:project-test-lib')
    testCompile project(':base:testutils')
    testCompile libs.jsoup
}

jar {
    into('instant-run') {
        from configurations.includeInJar
    }
}

group = 'com.android.tools.build'
archivesBaseName = 'gradle-core'
version = rootProject.ext.buildVersion

project.ext.pomName = 'Core Library for Android Gradle Plug-in'
project.ext.pomDesc = 'Core library to build Android Gradle plugin.'

apply from: "$rootDir/buildSrc/base/publish.gradle"
apply from: "$rootDir/buildSrc/base/bintray.gradle"

test {
    environment("CUSTOM_REPO", rootProject.file("../out/repo"))

    testLogging {
        events "failed"
    }

    maxParallelForks = Runtime.runtime.availableProcessors() / 2
}

javadoc {
    exclude     "**/internal/**"

    options.docTitle "Gradle Plugin for Android"
    options.header ""
    options.footer "Copyright (C) 2012 The Android Open Source Project"
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier  'javadoc'
    from        javadoc.destinationDir

}

tasks.withType(Javadoc) {
    classpath += configurations.provided
}

// Only package JavaDoc if using --init-script=buildSrc/base/release.gradle
if (project.has("release")) {
    artifacts {
        archives javadocJar
    }
}

// Incremental update test support
File androidJar = file('../../../../prebuilts/sdk/23/android.jar');

class JasminTask extends AbstractCompile {
    @TaskAction
    public void compile() {
        getSource().matching { include '**/*.j' }.getFiles().each { file ->
            project.javaexec {
                classpath project.files(new File(project.getProjectDir(), "../../../../prebuilts/tools/common/jasmin/jasmin.jar"))
                main 'jasmin.Main'
                args file.getAbsolutePath(), "-d", getDestinationDir().getAbsolutePath()
            }
        }
    }
}

File baseClassesJasmin = new File(classesDir, "baseJasmin")
Task compileIncrementalTestBaseClassesJasmin = tasks.create(
        name: "compileIncrementalTestBaseClassesJasmin",
        type: JasminTask) {
    source(new File(project.getProjectDir(), "src/test/incremental-test-classes/base"))
    classpath = sourceSets.test.compileClasspath
    destinationDir baseClassesJasmin
}

File baseClassesJava = new File(classesDir, "baseJava")
Task compileIncrementalTestBaseClassesJava = tasks.create(
        name: "compileIncrementalTestBaseClassesJava",
        type: org.gradle.api.tasks.compile.JavaCompile) {
    source = new File(project.getProjectDir(), "src/test/incremental-test-classes/base")
    classpath = sourceSets.test.compileClasspath
    destinationDir = baseClassesJava
    sourceCompatibility '1.6'
    targetCompatibility '1.6'
    options.bootClasspath = androidJar
}

def compileIncrementalTestBaseClasses = tasks.create(name: "copyBaseClasses", type: Copy) {
    from           baseClassesJava
    from           baseClassesJasmin
    destinationDir baseClasses
}
compileIncrementalTestBaseClasses.dependsOn compileIncrementalTestBaseClassesJava
compileIncrementalTestBaseClasses.dependsOn compileIncrementalTestBaseClassesJasmin
compileTestJava.dependsOn compileIncrementalTestBaseClasses

Task instrumentIncrementalTestBaseClasses = tasks.create(
        name: "instrumentIncrementalTestBaseClasses",
        type: org.gradle.api.tasks.JavaExec) {
    main = 'com.android.build.gradle.internal.incremental.IncrementalSupportVisitor'
//    jvmArgs = [ '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
    classpath = sourceSets.main.runtimeClasspath + sourceSets.test.compileClasspath
    args baseClasses, baseInstrumentedClasses, androidJar
    inputs.files sourceSets.main.runtimeClasspath, sourceSets.test.compileClasspath, baseClasses,
            androidJar
    outputs.files baseInstrumentedClasses
}

instrumentIncrementalTestBaseClasses.dependsOn compileIncrementalTestBaseClasses

// Compile other changesets. They have the default changset on their classpath.
Task instrumentIncrementalTestPatches = tasks.create("instrumentIncrementalTestPatches")

compileTestJava.dependsOn(
        instrumentIncrementalTestPatches,
        instrumentIncrementalTestBaseClasses)

File incrementalTestOutDirJava = new File(classesDir, "patchesJava")
File incrementalTestOutDirJasmin = new File(classesDir, "patchesJasmin")
File incrementalTestOutDir = new File(classesDir, "patches")
File instrumentedIncrementalTestOutDir = new File(classesDir, "instrumentedPatches")

for (File f: new File(project.projectDir, "src/test/incremental-test-classes/patches").listFiles()) {
    File incrementalPatchClassFileDirJava = new File(incrementalTestOutDirJava, f.getName())
    Task compilePatchJava = tasks.create(
            name: "compileIncrementalTestPatchJava${f.getName().capitalize()}",
            type: org.gradle.api.tasks.compile.JavaCompile) {
        source = project.files(f)
        classpath = sourceSets.test.compileClasspath
        destinationDir = incrementalPatchClassFileDirJava
        sourceCompatibility '1.6'
        targetCompatibility '1.6'
        options.bootClasspath = androidJar
    }

    File incrementalPatchClassFileDirJasmin = new File(incrementalTestOutDirJasmin, f.getName())
    Task compilePatchJasmin = tasks.create(
            name: "compileIncrementalTestPatchJasmin${f.getName().capitalize()}",
            type: JasminTask) {
        source = project.files(f)
        classpath = sourceSets.test.compileClasspath
        destinationDir incrementalPatchClassFileDirJasmin
    }

    File incrementalPatchClassFileDir = new File(incrementalTestOutDir, f.getName())
    Task compilePatch = tasks.create(name: "compilePatch${f.getName().capitalize()}" , type: Copy) {
        from           incrementalPatchClassFileDirJava
        from           incrementalPatchClassFileDirJasmin
        destinationDir incrementalPatchClassFileDir
    }
    compilePatch.dependsOn compilePatchJava
    compilePatch.dependsOn compilePatchJasmin

    File patchOutDir = new File(instrumentedIncrementalTestOutDir, f.getName())
    Task instrumentPatch = tasks.create(
            name: "instrumentIncrementalTestPatch${f.getName().capitalize()}",
            type: org.gradle.api.tasks.JavaExec) {
        main = 'com.android.build.gradle.internal.incremental.IncrementalChangeVisitor'
//        jvmArgs = [ '-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
        classpath = sourceSets.main.runtimeClasspath + sourceSets.test.compileClasspath
        args incrementalPatchClassFileDir, patchOutDir,
                androidJar.absolutePath + File.pathSeparator + baseClasses
        inputs.files sourceSets.main.runtimeClasspath, sourceSets.test.compileClasspath,
                incrementalPatchClassFileDir, androidJar, baseClasses
        outputs.files patchOutDir
    }

    instrumentPatch.dependsOn(compilePatch)

    instrumentIncrementalTestPatches.dependsOn instrumentPatch
}

Task jarIncrementalTests = tasks.create(name: "jarIncrementalTests", type: Jar) {
    from sourceSets.test,outputs
    into 'build/incrementalTests.jar'
    include "com/android/build/gradle/internal/incremental/**"
    exclude "com/android/build/gradle/internal/incremental/fixture/**"
}

configurations {
    incrementalTestClasses
}

test {
    inputs.files instrumentedIncrementalTestOutDir
}

artifacts {
    incrementalTestClasses jarIncrementalTests
}

javadoc {
    classpath += configurations.provided
}
