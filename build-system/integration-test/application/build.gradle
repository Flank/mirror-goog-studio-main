import com.android.tools.internal.testing.DevicePool;

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'jacoco-tools-base'

repositories {
    maven { url = uri(rootProject.cloneArtifacts.repository) }
}

sourceSets.test.java.srcDirs += 'src/testNightly/java'

dependencies {
    testCompile project(':base:build-system:integration-test:framework')
    testCompile project(':analytics-library:protos')
    testCompile project(':apksig')
    testCompile project(':base:builder')
    testCompile project(':base:builder-model')
    testCompile project(':base:sdk-common')
    testCompile project(':base:testing-infrastructure:device-pool:device-provider')
    testCompile project(':base:testutils')
    testCompile project(':base:zipflinger')

    testCompile libs.kotlin_stdlib
    testCompile libs.kotlin_test

    testCompile gradleApi()
    testCompile libs.apache_commons_io
    testCompile libs.apache_commons_lang
    testCompile libs.apache_compress
    testCompile libs.google_api_client
    testCompile libs.google_storage_client
    testCompile libs.groovy
    testCompile libs.junit
    testCompile libs.protobuf
    testCompile libs.protobuf_util
    testCompile libs.truth

    testCompile libs.mockito_core

    // Add dependency on plugin code.  Exclude transitive dependencies to avoid conflict due to
    // Groovy versions.
    testCompile(project(':base:gradle-core')) {
        transitive = false
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

configurations {
    // google-api-client depends on guava-jdk5.
    testCompile.exclude group: 'com.google.guava', module: 'guava-jdk5'
}

apply from: '../integration-tests.gradle'

// These tasks will not depend on publishLocal, so they will run integration
// tests against whatever version of the plugin is in ../../../out/repo. This
// allows us to run integration tests with different versions of Java, without
// rebuilding the plugin.
task testPrebuilts(type: Test)
task connectedIntegrationTestPrebuilts(type: Test)
task connectedIntegrationTestPrebuiltsQuarantine(type: Test)

File tempFile = new File(project.buildDir, 'tmp')
tempFile.mkdirs()

configure([test, testPrebuilts]) {
    description =
            "Runs the project integration tests. This requires an SDK either from the Android " +
                    "source tree, under out/..., or an env var ANDROID_HOME."
    systemProperties['jar.path'] = jar.archivePath
    systemProperties['java.io.tmpdir'] = tempFile.absolutePath
    environment = testEnvironment

    // Always run the task, when requested.
    outputs.upToDateWhen { false }

    maxParallelForks = Runtime.runtime.availableProcessors() / 4

    useJUnit {
        if (System.properties['test.includeCategories'] != null) {
            def categories = System.properties['test.includeCategories'].split(',')
            String defaultPackage = "com.android.build.gradle.integration.common.category."
            categories = categories.collect { it.charAt(0).isUpperCase() ? defaultPackage + it : it }
            includeCategories categories as String[]
        }
        excludeCategories "com.android.build.gradle.integration.common.category.DeviceTests"
        excludeCategories "com.android.build.gradle.integration.common.category.OnlineTests"
        excludeCategories "com.android.build.gradle.integration.common.category.DeviceTestsQuarantine"
    }

    exclude "com/android/build/gradle/integration/automatic/**"
    exclude "com/android/build/gradle/integration/sanity/**"
    exclude "**/BazelIntegrationTestsSuite*"
}

task automaticTest(type: Test) {
    include "com/android/build/gradle/integration/automatic/**"

    // Always run the task, when requested.
    outputs.upToDateWhen { false }
    environment = testEnvironment
}

task sanityTest(type: Test) {
    include "com/android/build/gradle/integration/sanity/**"
    environment = testEnvironment
    dependsOn ':publishLocal'
}

task onlineTest(type: Test) {
    // Always run the task, when requested.
    outputs.upToDateWhen { false }
    environment = testEnvironment

    useJUnit {
        includeCategories "com.android.build.gradle.integration.common.category.OnlineTests"
    }
}

check.dependsOn automaticTest
check.dependsOn sanityTest

task connectedIntegrationTest(type: Test) {
    dependsOn ':base:build-system:integration-test:native:publishLocal'
}
task connectedIntegrationTestQuarantine(type: Test)

def allConnectedTestTasks = [
        connectedIntegrationTest,
        connectedIntegrationTestPrebuilts,
        connectedIntegrationTestQuarantine,
        connectedIntegrationTestPrebuiltsQuarantine
]


configure(allConnectedTestTasks) {
    def nativeTestTask = tasks.findByPath(':base:build-system:integration-test:native:test')
    testClassesDirs = sourceSets.test.output.classesDirs.plus(nativeTestTask.testClassesDirs)
    classpath = sourceSets.test.runtimeClasspath.plus(nativeTestTask.classpath)

    description =
            "Runs the project integration tests with device tests. This requires an SDK either " +
                    "from the Android source tree, under out/..., or an env var ANDROID_HOME " +
                    "and a device."
    group = "verification"
    systemProperties['jar.path'] = jar.archivePath
    systemProperties['java.io.tmpdir'] = tempFile.absolutePath

    environment testEnvironment + ["APPLY_DEVICEPOOL_PLUGIN": true]

    // Always run the task, when requested.
    outputs.upToDateWhen { false }

    def count = Math.ceil(Runtime.runtime.availableProcessors() / 4)
    if (count > 8) {
        count = 8
    }
    maxParallelForks = count

    exclude "com/android/build/gradle/integration/automatic/**"
}

configure([connectedIntegrationTest, connectedIntegrationTestPrebuilts]) {
    useJUnit {
        includeCategories "com.android.build.gradle.integration.common.category.DeviceTests"
        excludeCategories "com.android.build.gradle.integration.common.category.DeviceTestsQuarantine"
    }
}

configure([connectedIntegrationTestQuarantine, connectedIntegrationTestPrebuiltsQuarantine]) {
    useJUnit {
        includeCategories "com.android.build.gradle.integration.common.category.DeviceTestsQuarantine"
    }
}

configure([test, testPrebuilts, onlineTest, connectedIntegrationTest,
           connectedIntegrationTestPrebuilts]) {
    testLogging {
        events = ['FAILED', 'SKIPPED', 'STANDARD_ERROR']
        displayGranularity = 2 // Show test class and method.
        exceptionFormat = 'full'
        showCauses = true
    }
}

DevicePool devicePool = new DevicePool();

task('startDevicePool').doLast {
    // This port number needs to be kept in sync with DevicePoolClient.
    devicePool.start(3431)
}

task('stopDevicePool').doLast {
    devicePool.stop()
}

startDevicePool.finalizedBy stopDevicePool
allConnectedTestTasks.forEach({task -> stopDevicePool.mustRunAfter(task)})

automaticTest.dependsOn ':publishLocal'
onlineTest.dependsOn ':publishLocal'
test.dependsOn ':publishAndroidGradleLocal'
allConnectedTestTasks.forEach({task -> task.dependsOn startDevicePool, ':base:testing-infrastructure:device-pool:device-provider:publishLocal'})
connectedIntegrationTest.dependsOn ':publishLocal'
connectedIntegrationTestQuarantine.dependsOn ':publishLocal'

if (tasks.findByName("jacocoTestReport") != null) {
    jacocoTestReport {
        sourceSets project(':base:gradle-core').sourceSets.main
        sourceSets project(':base:builder').sourceSets.main
        sourceSets project(':base:builder-model').sourceSets.main
        sourceSets project(':base:builder-test-api').sourceSets.main
    }

    // Due to memory constraints, apply jacoco only when jacocoTestReport is invoked.  Make sure to
    // rerun tests when generating report jacoco.
    gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->
        if (taskGraph.hasTask(jacocoTestReport)) {
            test.environment("ATTACH_JACOCO_AGENT", "yes")
        }
    }
}
