apply plugin: 'com.android.tools.java-library'
apply plugin: 'com.android.tools.kotlin'
apply plugin: 'com.android.tools.publish'
apply plugin: 'sdk-java-lib'

dependencies {
    implementation libs.com.android.tools.annotations
    implementation libs.kotlin_stdlib
    testImplementation 'junit:junit:4.12'
    testImplementation libs.guava
    testImplementation libs.com.android.tools.testutils
}

group = 'com.android.tools.build'
archivesBaseName = 'builder-model'
version = rootProject.ext.buildVersion

project.ext.pomName = 'Android Builder Model library'
project.ext.pomDesc = 'Model for the Builder library.'

project.ext.apiVersion = rootProject.ext.apiVersion ?: 0

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

["Model-Version": version, "Model-Api-Version": apiVersion].each { key, value ->
    jar.manifest.attributes((key): value)
    sdkJar.manifest.attributes((key): value)
}

task writeVersionProperties(type: com.android.tools.internal.VersionPropertiesWriter) {
    outputFilePath = "com/android/builder/model/version.properties"
    outputDirectory = project.layout.buildDirectory.dir("generated/resources")
}

sourceSets {
    main {
        resources {
            srcDir(tasks.findByName("writeVersionProperties").getOutputDirectory())
        }
    }
}

def updateToolingModelApi = tasks.register('updateToolingModelApi', JavaExec) {
    classpath(sourceSets['test'].output.classesDirs, sourceSets['test'].runtimeClasspath)
    mainClass = 'com.android.builder.model.GradleToolingApiModelUpdater'
}

def updateApi = tasks.register('updateApi') {
    dependsOn(updateToolingModelApi)
}

