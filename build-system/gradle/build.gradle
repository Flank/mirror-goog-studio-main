import java.time.LocalDate
import java.time.format.DateTimeFormatter

apply plugin: 'kotlin'
apply plugin: 'clone-artifacts'
apply plugin: 'idea'
apply plugin: 'jacoco-tools-base'
apply plugin: 'license-report'

//apply plugin: 'java-gradle-plugin'

licenseReport {
    whiteList = ['org.jetbrains.trove4j:trove4j:20160824']
}

dependencies {
    compile project(':base:gradle-core')
    compile gradleApi()
    compile libs.bundle_tool

    testCompile libs.kotlin_stdlib

    testCompile project(':base:project-test-lib')
    testCompile project(':base:testutils')
    testCompile libs.junit
    testCompile libs.truth
}

group = 'com.android.tools.build'
archivesBaseName = 'gradle'
version = rootProject.ext.buildVersion

project.ext.pomName = 'Gradle Plug-in for Android'
project.ext.pomDesc = 'Gradle plug-in to build Android applications.'

apply from: "$rootDir/buildSrc/base/publish.gradle"
apply from: "$rootDir/buildSrc/base/bintray.gradle"

jar.manifest.attributes("Plugin-Version": version)
jar.manifest.attributes("Inception-Date": DateTimeFormatter.ISO_LOCAL_DATE.format(LocalDate.now()));

test {
    environment("CUSTOM_REPO",
            new File(rootProject.ext.androidHostOut, "repo").toString()
                    + File.pathSeparator
                    + rootProject.file("../prebuilts/tools/common/m2/repository/").toString())

    testLogging {
        events "failed"
    }

    maxParallelForks = Runtime.runtime.availableProcessors() / 2
}

javadoc {
    exclude     "**/internal/**"

    options.docTitle "Gradle Plugin for Android"
    options.header ""
    options.footer "Copyright (C) 2012 The Android Open Source Project"
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier  'javadoc'
    from        javadoc.destinationDir

}

// Only package JavaDoc if using --init-script=buildSrc/base/release.gradle
if (project.hasProperty("release")) {
  artifacts {
    archives javadocJar
  }
}
