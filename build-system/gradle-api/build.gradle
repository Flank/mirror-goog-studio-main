apply plugin: 'com.android.tools.java-library'
apply plugin: 'jacoco-tools-base'
apply plugin: 'com.android.tools.kotlin'
apply plugin: 'com.android.tools.publish'
apply plugin: 'org.jetbrains.dokka'

configurations {
    provided
    additionalDokkaClasspath
}

dependencies {
    compile project(':base:builder-test-api')
    compile libs.guava
    compile libs.kotlin_stdlib
    compile libs.asm

    provided gradleApi()
    provided project(':base:builder-model') // Only present for legacy reasons.

    testCompile libs.junit
    testCompile project(':base:testutils')
    testCompile gradleApi()
    testCompile project(':base:builder-model')
    testCompile libs.mockito_core

    additionalDokkaClasspath gradleApi()
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

javadoc {
  classpath += configurations.provided
  options.links("http://docs.oracle.com/javase/8/docs/api/", "https://docs.gradle.org/current/javadoc/")
}

task javadocZip(type: Zip) {
  dependsOn javadoc
  from javadoc.destinationDir
  baseName 'javadoc'
}

group = 'com.android.tools.build'
archivesBaseName = 'gradle-api'
version = rootProject.ext.buildVersion

project.ext.pomName = 'Android Gradle API'
project.ext.pomDesc = 'APIs to customize Android Gradle Builds'

dokka {
    outputFormat = 'dac'
    jdkVersion = 8

    includeNonPublic = false
    skipDeprecated = false
    skipEmptyPackages = false
    noJdkLink = true

    dacRoot = "/reference/tools/gradle-api/" + version.substring(0, version.lastIndexOf("."))
    classpath = configurations.additionalDokkaClasspath.files

    // Root URL of the generated documentation to link with. The trailing slash is required!
    externalDocumentationLink {
        url = new URL("https://docs.gradle.org/current/javadoc/")
    }
    externalDocumentationLink {
        url = new URL("http://docs.oracle.com/javase/8/docs/api/")
    }
}

abstract class WriteVersionFile extends DefaultTask {
    @Input
    abstract Property<String> getBuildVersion()

    @OutputDirectory
    abstract DirectoryProperty getOutputDirectory()

    @TaskAction
    def writeFile() {
        def outputDir = outputDirectory.get().asFile
        outputDir.deleteDir()
        outputDir.mkdir()
        def versionFile = new File(outputDir, "version.properties")

        def docsVersion = buildVersion.get().substring(0, buildVersion.get().lastIndexOf("."))
        def properties = new Properties()
        properties.put("androidGradlePluginVersion", buildVersion.get())
        properties.put("docsVersion", docsVersion)
        versionFile.withWriter {properties.store(it, null) }
    }
}

def writeVersionFileProvider = tasks.register("writeDocsVersionFile", WriteVersionFile) {
    it.getBuildVersion().set(provider { rootProject.ext.buildVersion })
    it.getOutputDirectory().set(project.layout.buildDirectory.dir("dokkaVersion"))
}

task dokkaZip(type: Zip) {
    dependsOn dokka
    from dokka.outputDirectory
    from writeVersionFileProvider.map { it.outputDirectory }
    destinationDirectory = layout.projectDirectory.dir("$rootDir/../out/dist")
    archiveFileName = "documentation.zip"
}
