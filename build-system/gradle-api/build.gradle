apply plugin: 'com.android.tools.java-library'
apply plugin: 'com.android.tools.kotlin'
apply plugin: 'com.android.tools.publish'
apply plugin: 'org.jetbrains.dokka'

configurations {
    provided
    additionalDokkaClasspath
}

dependencies {
    implementation project(':base:builder-test-api')
    implementation libs.guava
    implementation libs.kotlin_stdlib
    implementation libs.asm

    provided gradleApi()
    provided project(':base:builder-model') // Only present for legacy reasons.

    testImplementation libs.junit
    testImplementation project(':base:testutils')
    testImplementation gradleApi()
    testImplementation project(':base:builder-model')
    testImplementation project(':base:annotations')
    testImplementation libs.mockito_core

    additionalDokkaClasspath gradleApi()
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

sourceSets {
    main {
        compileClasspath += configurations.provided
    }
}

javadoc {
  classpath += configurations.provided
  options.links("http://docs.oracle.com/javase/8/docs/api/", "https://docs.gradle.org/current/javadoc/")
}

task javadocZip(type: Zip) {
  dependsOn javadoc
  from javadoc.destinationDir
  archiveBaseName.set('javadoc')
}

group = 'com.android.tools.build'
archivesBaseName = 'gradle-api'
version = rootProject.ext.buildVersion

project.ext.pomName = 'Android Gradle API'
project.ext.pomDesc = 'APIs to customize Android Gradle Builds'

dokka {
    outputFormat = 'dac'
    jdkVersion = 8

    includeNonPublic = false
    skipDeprecated = false
    skipEmptyPackages = false
    noJdkLink = true

    dacRoot = "/reference/tools"
    classpath = configurations.additionalDokkaClasspath.files

    // Root URL of the generated documentation to link with. The trailing slash is required!
    externalDocumentationLink {
        url = new URL("https://docs.gradle.org/current/javadoc/")
    }
    externalDocumentationLink {
        url = new URL("http://docs.oracle.com/javase/8/docs/api/")
    }
}

task dokkaZip(type: Zip) {
    dependsOn dokka
    from dokka.outputDirectory
    def versionFile = new File(dokka.outputDirectory, "version.txt")
    doFirst {
        versionFile.createNewFile()
        def stream = new FileOutputStream(versionFile)
        stream.write(rootProject.ext.buildVersion.getBytes())
        stream.close()
    }
    destinationDirectory = layout.projectDirectory.dir("$rootDir/../out/dist")
    archiveFileName = "documentation.zip"
    doLast {
        versionFile.delete()
    }
}
