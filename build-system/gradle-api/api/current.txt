// Signature format: 4.0
package com.android.build.api {

  public final class AndroidPluginVersion implements java.lang.Comparable<com.android.build.api.AndroidPluginVersion> {
    ctor public AndroidPluginVersion(int major, int minor);
    ctor public AndroidPluginVersion(int major, int minor, int micro);
    method public com.android.build.api.AndroidPluginVersion alpha(int alpha);
    method public com.android.build.api.AndroidPluginVersion beta(int beta);
    method public int compareTo(com.android.build.api.AndroidPluginVersion other);
    method @org.gradle.api.Incubating public com.android.build.api.AndroidPluginVersion dev();
    method public int getMajor();
    method public int getMicro();
    method public int getMinor();
    method public int getPreview();
    method public String? getPreviewType();
    method public com.android.build.api.AndroidPluginVersion rc(int rc);
    property public final int major;
    property public final int micro;
    property public final int minor;
    property public final int preview;
    property public final String? previewType;
  }

}

package com.android.build.api.artifact {

  public abstract class Artifact<T extends org.gradle.api.file.FileSystemLocation> implements java.io.Serializable {
    ctor public Artifact(com.android.build.api.artifact.ArtifactKind<T> kind, com.android.build.api.artifact.Artifact.Category category);
    method public final com.android.build.api.artifact.Artifact.Category getCategory();
    method public String getFileSystemLocationName();
    method public String getFolderName();
    method public final com.android.build.api.artifact.ArtifactKind<T> getKind();
    method public final String name();
    property public final com.android.build.api.artifact.Artifact.Category category;
    property public final com.android.build.api.artifact.ArtifactKind<T> kind;
    field public static final com.android.build.api.artifact.Artifact.Companion Companion;
    field public static final com.android.build.api.artifact.ArtifactKind.DIRECTORY DIRECTORY;
    field public static final com.android.build.api.artifact.ArtifactKind.FILE FILE;
  }

  public static interface Artifact.Appendable {
  }

  public enum Artifact.Category {
    enum_constant public static final com.android.build.api.artifact.Artifact.Category GENERATED;
    enum_constant public static final com.android.build.api.artifact.Artifact.Category INTERMEDIATES;
    enum_constant public static final com.android.build.api.artifact.Artifact.Category OUTPUTS;
    enum_constant public static final com.android.build.api.artifact.Artifact.Category REPORTS;
    enum_constant public static final com.android.build.api.artifact.Artifact.Category SOURCES;
  }

  public static final class Artifact.Companion {
  }

  public static interface Artifact.ContainsMany {
  }

  public abstract static class Artifact.Multiple<FileTypeT extends org.gradle.api.file.FileSystemLocation> extends com.android.build.api.artifact.Artifact<FileTypeT> {
    ctor public Artifact.Multiple(com.android.build.api.artifact.ArtifactKind<FileTypeT> kind, com.android.build.api.artifact.Artifact.Category category);
  }

  public static interface Artifact.Replaceable {
  }

  public abstract static class Artifact.Single<FileTypeT extends org.gradle.api.file.FileSystemLocation> extends com.android.build.api.artifact.Artifact<FileTypeT> {
    ctor public Artifact.Single(com.android.build.api.artifact.ArtifactKind<FileTypeT> kind, com.android.build.api.artifact.Artifact.Category category);
  }

  public static interface Artifact.Transformable {
  }

  public abstract sealed class ArtifactKind<T extends org.gradle.api.file.FileSystemLocation> implements java.io.Serializable {
    method public abstract kotlin.reflect.KClass<T> dataType();
  }

  public static final class ArtifactKind.DIRECTORY extends com.android.build.api.artifact.ArtifactKind<org.gradle.api.file.Directory> {
    method public kotlin.reflect.KClass<org.gradle.api.file.Directory> dataType();
    field public static final com.android.build.api.artifact.ArtifactKind.DIRECTORY INSTANCE;
  }

  public static final class ArtifactKind.FILE extends com.android.build.api.artifact.ArtifactKind<org.gradle.api.file.RegularFile> {
    method public kotlin.reflect.KClass<org.gradle.api.file.RegularFile> dataType();
    field public static final com.android.build.api.artifact.ArtifactKind.FILE INSTANCE;
  }

  public interface ArtifactTransformationRequest<TaskT extends org.gradle.api.Task> {
    method public <ParamT extends org.gradle.workers.WorkParameters> java.util.function.Supplier<com.android.build.api.variant.BuiltArtifacts> submit(TaskT task, org.gradle.workers.WorkQueue workQueue, Class<? extends org.gradle.workers.WorkAction<ParamT>> actionType, kotlin.jvm.functions.Function3<? super com.android.build.api.variant.BuiltArtifact,? super org.gradle.api.file.Directory,? super ParamT,? extends java.io.File> parameterConfigurator);
    method public void submit(TaskT task, kotlin.jvm.functions.Function1<? super com.android.build.api.variant.BuiltArtifact,? extends java.io.File> transformer);
  }

  public interface Artifacts {
    method public <FileTypeT extends org.gradle.api.file.FileSystemLocation> org.gradle.api.provider.Provider<FileTypeT> get(com.android.build.api.artifact.SingleArtifact<FileTypeT> type);
    method public <FileTypeT extends org.gradle.api.file.FileSystemLocation> org.gradle.api.provider.Provider<java.util.List<FileTypeT>> getAll(com.android.build.api.artifact.MultipleArtifact<FileTypeT> type);
    method public com.android.build.api.variant.BuiltArtifactsLoader getBuiltArtifactsLoader();
    method public <TaskT extends org.gradle.api.Task> com.android.build.api.artifact.TaskBasedOperation<TaskT> use(org.gradle.api.tasks.TaskProvider<TaskT> taskProvider);
  }

  public interface CombiningOperationRequest<FileTypeT extends org.gradle.api.file.FileSystemLocation> {
    method public <ArtifactTypeT extends com.android.build.api.artifact.Artifact.Multiple<FileTypeT> & com.android.build.api.artifact.Artifact.Transformable> void toTransform(ArtifactTypeT type);
  }

  public interface InAndOutDirectoryOperationRequest<TaskT extends org.gradle.api.Task> {
    method public <ArtifactTypeT extends com.android.build.api.artifact.Artifact.Single<org.gradle.api.file.Directory> & com.android.build.api.artifact.Artifact.Transformable> void toTransform(ArtifactTypeT type);
    method public <ArtifactTypeT extends com.android.build.api.artifact.Artifact.Single<org.gradle.api.file.Directory> & com.android.build.api.artifact.Artifact.ContainsMany> com.android.build.api.artifact.ArtifactTransformationRequest<TaskT> toTransformMany(ArtifactTypeT type);
  }

  public interface InAndOutFileOperationRequest {
    method public <ArtifactTypeT extends com.android.build.api.artifact.Artifact.Single<org.gradle.api.file.RegularFile> & com.android.build.api.artifact.Artifact.Transformable> void toTransform(ArtifactTypeT type);
  }

  public abstract sealed class MultipleArtifact<FileTypeT extends org.gradle.api.file.FileSystemLocation> extends com.android.build.api.artifact.Artifact.Multiple<FileTypeT> {
  }

  @org.gradle.api.Incubating public static final class MultipleArtifact.ALL_CLASSES_DIRS extends com.android.build.api.artifact.MultipleArtifact<org.gradle.api.file.Directory> implements com.android.build.api.artifact.Artifact.Appendable com.android.build.api.artifact.Artifact.Replaceable com.android.build.api.artifact.Artifact.Transformable {
    field public static final com.android.build.api.artifact.MultipleArtifact.ALL_CLASSES_DIRS INSTANCE;
  }

  @org.gradle.api.Incubating public static final class MultipleArtifact.ALL_CLASSES_JARS extends com.android.build.api.artifact.MultipleArtifact<org.gradle.api.file.RegularFile> implements com.android.build.api.artifact.Artifact.Appendable com.android.build.api.artifact.Artifact.Replaceable com.android.build.api.artifact.Artifact.Transformable {
    field public static final com.android.build.api.artifact.MultipleArtifact.ALL_CLASSES_JARS INSTANCE;
  }

  @org.gradle.api.Incubating public static final class MultipleArtifact.ASSETS extends com.android.build.api.artifact.MultipleArtifact<org.gradle.api.file.Directory> implements com.android.build.api.artifact.Artifact.Appendable com.android.build.api.artifact.Artifact.Replaceable com.android.build.api.artifact.Artifact.Transformable {
    field public static final com.android.build.api.artifact.MultipleArtifact.ASSETS INSTANCE;
  }

  public static final class MultipleArtifact.MULTIDEX_KEEP_PROGUARD extends com.android.build.api.artifact.MultipleArtifact<org.gradle.api.file.RegularFile> implements com.android.build.api.artifact.Artifact.Replaceable com.android.build.api.artifact.Artifact.Transformable {
    field public static final com.android.build.api.artifact.MultipleArtifact.MULTIDEX_KEEP_PROGUARD INSTANCE;
  }

  public interface OutOperationRequest<FileTypeT extends org.gradle.api.file.FileSystemLocation> {
    method public <ArtifactTypeT extends com.android.build.api.artifact.Artifact.Multiple<FileTypeT> & com.android.build.api.artifact.Artifact.Appendable> void toAppendTo(ArtifactTypeT type);
    method public <ArtifactTypeT extends com.android.build.api.artifact.Artifact.Single<FileTypeT> & com.android.build.api.artifact.Artifact.Replaceable> void toCreate(ArtifactTypeT type);
  }

  public abstract sealed class SingleArtifact<T extends org.gradle.api.file.FileSystemLocation> extends com.android.build.api.artifact.Artifact.Single<T> {
  }

  public static final class SingleArtifact.AAR extends com.android.build.api.artifact.SingleArtifact<org.gradle.api.file.RegularFile> implements com.android.build.api.artifact.Artifact.Transformable {
    field public static final com.android.build.api.artifact.SingleArtifact.AAR INSTANCE;
  }

  public static final class SingleArtifact.APK extends com.android.build.api.artifact.SingleArtifact<org.gradle.api.file.Directory> implements com.android.build.api.artifact.Artifact.ContainsMany com.android.build.api.artifact.Artifact.Replaceable com.android.build.api.artifact.Artifact.Transformable {
    field public static final com.android.build.api.artifact.SingleArtifact.APK INSTANCE;
  }

  public static final class SingleArtifact.BUNDLE extends com.android.build.api.artifact.SingleArtifact<org.gradle.api.file.RegularFile> implements com.android.build.api.artifact.Artifact.Transformable {
    field public static final com.android.build.api.artifact.SingleArtifact.BUNDLE INSTANCE;
  }

  public static final class SingleArtifact.MERGED_MANIFEST extends com.android.build.api.artifact.SingleArtifact<org.gradle.api.file.RegularFile> implements com.android.build.api.artifact.Artifact.Replaceable com.android.build.api.artifact.Artifact.Transformable {
    field public static final com.android.build.api.artifact.SingleArtifact.MERGED_MANIFEST INSTANCE;
  }

  @org.gradle.api.Incubating public static final class SingleArtifact.METADATA_LIBRARY_DEPENDENCIES_REPORT extends com.android.build.api.artifact.SingleArtifact<org.gradle.api.file.RegularFile> implements com.android.build.api.artifact.Artifact.Replaceable com.android.build.api.artifact.Artifact.Transformable {
    field public static final com.android.build.api.artifact.SingleArtifact.METADATA_LIBRARY_DEPENDENCIES_REPORT INSTANCE;
  }

  public static final class SingleArtifact.OBFUSCATION_MAPPING_FILE extends com.android.build.api.artifact.SingleArtifact<org.gradle.api.file.RegularFile> {
    field public static final com.android.build.api.artifact.SingleArtifact.OBFUSCATION_MAPPING_FILE INSTANCE;
  }

  public static final class SingleArtifact.PUBLIC_ANDROID_RESOURCES_LIST extends com.android.build.api.artifact.SingleArtifact<org.gradle.api.file.RegularFile> {
    field public static final com.android.build.api.artifact.SingleArtifact.PUBLIC_ANDROID_RESOURCES_LIST INSTANCE;
  }

  public interface TaskBasedOperation<TaskT extends org.gradle.api.Task> {
    method public <FileTypeT extends org.gradle.api.file.FileSystemLocation> com.android.build.api.artifact.OutOperationRequest<FileTypeT> wiredWith(kotlin.jvm.functions.Function1<? super TaskT,? extends org.gradle.api.file.FileSystemLocationProperty<FileTypeT>> taskOutput);
    method public <FileTypeT extends org.gradle.api.file.FileSystemLocation> com.android.build.api.artifact.CombiningOperationRequest<FileTypeT> wiredWith(kotlin.jvm.functions.Function1<? super TaskT,? extends org.gradle.api.provider.ListProperty<FileTypeT>> taskInput, kotlin.jvm.functions.Function1<? super TaskT,? extends org.gradle.api.file.FileSystemLocationProperty<FileTypeT>> taskOutput);
    method public com.android.build.api.artifact.InAndOutDirectoryOperationRequest<TaskT> wiredWithDirectories(kotlin.jvm.functions.Function1<? super TaskT,? extends org.gradle.api.file.DirectoryProperty> taskInput, kotlin.jvm.functions.Function1<? super TaskT,? extends org.gradle.api.file.DirectoryProperty> taskOutput);
    method public com.android.build.api.artifact.InAndOutFileOperationRequest wiredWithFiles(kotlin.jvm.functions.Function1<? super TaskT,? extends org.gradle.api.file.RegularFileProperty> taskInput, kotlin.jvm.functions.Function1<? super TaskT,? extends org.gradle.api.file.RegularFileProperty> taskOutput);
  }

}

package com.android.build.api.attributes {

  public interface AgpVersionAttr extends org.gradle.api.Named {
    field public static final org.gradle.api.attributes.Attribute<com.android.build.api.attributes.AgpVersionAttr> ATTRIBUTE;
    field public static final com.android.build.api.attributes.AgpVersionAttr.Companion Companion;
  }

  public static final class AgpVersionAttr.Companion {
  }

  public interface BuildTypeAttr extends org.gradle.api.Named {
    field public static final org.gradle.api.attributes.Attribute<com.android.build.api.attributes.BuildTypeAttr> ATTRIBUTE;
    field public static final com.android.build.api.attributes.BuildTypeAttr.Companion Companion;
  }

  public static final class BuildTypeAttr.Companion {
  }

  public interface ProductFlavorAttr extends org.gradle.api.Named {
    method @org.gradle.api.Incubating public default static org.gradle.api.attributes.Attribute<com.android.build.api.attributes.ProductFlavorAttr> of(String flavorDimension);
    field public static final com.android.build.api.attributes.ProductFlavorAttr.Companion Companion;
  }

  @org.gradle.api.Incubating public static final class ProductFlavorAttr.Companion {
    method @org.gradle.api.Incubating public org.gradle.api.attributes.Attribute<com.android.build.api.attributes.ProductFlavorAttr> of(String flavorDimension);
  }

}

package com.android.build.api.component {

  @Deprecated public interface UnitTest extends com.android.build.api.variant.UnitTest {
  }

}

package com.android.build.api.dsl {

  @Deprecated @org.gradle.api.Incubating public interface AaptOptions extends com.android.build.api.dsl.AndroidResources {
  }

  public interface AarMetadata {
    method @org.gradle.api.Incubating public String? getMinAgpVersion();
    method public Integer? getMinCompileSdk();
    method @org.gradle.api.Incubating public void setMinAgpVersion(String? minAgpVersion);
    method public void setMinCompileSdk(Integer? minCompileSdk);
    property @org.gradle.api.Incubating public abstract String? minAgpVersion;
    property public abstract Integer? minCompileSdk;
  }

  public interface AbiSplit extends com.android.build.api.dsl.Split {
    method @org.gradle.api.Incubating public boolean isUniversalApk();
    method @org.gradle.api.Incubating public void setUniversalApk(boolean isUniversalApk);
    property @org.gradle.api.Incubating public abstract boolean isUniversalApk;
  }

  @Deprecated @org.gradle.api.Incubating public interface AdbOptions extends com.android.build.api.dsl.Installation {
  }

  public interface AndroidResources {
    method @org.gradle.api.Incubating public void additionalParameters(String params);
    method @org.gradle.api.Incubating public void additionalParameters(java.lang.String... params);
    method @org.gradle.api.Incubating public java.util.List<java.lang.String> getAdditionalParameters();
    method public boolean getFailOnMissingConfigEntry();
    method public String? getIgnoreAssetsPattern();
    method @org.gradle.api.Incubating public boolean getNamespaced();
    method public java.util.Collection<java.lang.String> getNoCompress();
    method @org.gradle.api.Incubating public void noCompress(String noCompress);
    method @org.gradle.api.Incubating public void noCompress(java.lang.String... noCompress);
    method public void setFailOnMissingConfigEntry(boolean failOnMissingConfigEntry);
    method public void setIgnoreAssetsPattern(String? ignoreAssetsPattern);
    method @org.gradle.api.Incubating public void setNamespaced(boolean namespaced);
    property @org.gradle.api.Incubating public abstract java.util.List<java.lang.String> additionalParameters;
    property public abstract boolean failOnMissingConfigEntry;
    property public abstract String? ignoreAssetsPattern;
    property @org.gradle.api.Incubating public abstract boolean namespaced;
    property public abstract java.util.Collection<java.lang.String> noCompress;
  }

  @org.gradle.api.Incubating public interface AndroidSourceDirectorySet extends org.gradle.api.Named {
    method public Object setSrcDirs(Iterable<?> srcDirs);
    method public Object srcDir(Object srcDir);
    method public Object srcDirs(java.lang.Object... srcDirs);
  }

  @org.gradle.api.Incubating public interface AndroidSourceFile extends org.gradle.api.Named {
    method public Object srcFile(Object srcPath);
  }

  @org.gradle.api.Incubating public interface AndroidSourceSet extends org.gradle.api.Named {
    method public void aidl(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    method public void assets(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getAidl();
    method public String getAnnotationProcessorConfigurationName();
    method public String getApiConfigurationName();
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getAssets();
    method public String getCompileOnlyConfigurationName();
    method public String getImplementationConfigurationName();
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getJava();
    method @Deprecated public com.android.build.api.dsl.AndroidSourceDirectorySet getJni();
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getJniLibs();
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getKotlin();
    method public com.android.build.api.dsl.AndroidSourceFile getManifest();
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getMlModels();
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getRenderscript();
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getRes();
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getResources();
    method public String getRuntimeOnlyConfigurationName();
    method public com.android.build.api.dsl.AndroidSourceDirectorySet getShaders();
    method public String getWearAppConfigurationName();
    method public void java(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    method @Deprecated public void jni(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    method public void jniLibs(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    method public void kotlin(org.gradle.api.Action<com.android.build.api.dsl.AndroidSourceDirectorySet> action);
    method public void manifest(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceFile,kotlin.Unit> action);
    method public void mlModels(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    method public void renderscript(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    method public void res(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    method public void resources(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    method public Object setRoot(String path);
    method public void shaders(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet,kotlin.Unit> action);
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet aidl;
    property public abstract String annotationProcessorConfigurationName;
    property public abstract String apiConfigurationName;
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet assets;
    property public abstract String compileOnlyConfigurationName;
    property public abstract String implementationConfigurationName;
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet java;
    property @Deprecated public abstract com.android.build.api.dsl.AndroidSourceDirectorySet jni;
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet jniLibs;
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet kotlin;
    property public abstract com.android.build.api.dsl.AndroidSourceFile manifest;
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet mlModels;
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet renderscript;
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet res;
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet resources;
    property public abstract String runtimeOnlyConfigurationName;
    property public abstract com.android.build.api.dsl.AndroidSourceDirectorySet shaders;
    property public abstract String wearAppConfigurationName;
  }

  public interface AnnotationProcessorOptions {
    method @org.gradle.api.Incubating public void argument(String key, String value);
    method @org.gradle.api.Incubating public void arguments(java.util.Map<java.lang.String,java.lang.String> arguments);
    method @org.gradle.api.Incubating public void className(String className);
    method @org.gradle.api.Incubating public void classNames(java.lang.String... classNames);
    method @org.gradle.api.Incubating public void compilerArgumentProvider(org.gradle.process.CommandLineArgumentProvider compilerArgumentProvider);
    method @org.gradle.api.Incubating public void compilerArgumentProviders(org.gradle.process.CommandLineArgumentProvider... compilerArgumentProviders);
    method public java.util.Map<java.lang.String,java.lang.String> getArguments();
    method public java.util.List<java.lang.String> getClassNames();
    method public java.util.List<org.gradle.process.CommandLineArgumentProvider> getCompilerArgumentProviders();
    property public abstract java.util.Map<java.lang.String,java.lang.String> arguments;
    property public abstract java.util.List<java.lang.String> classNames;
    property public abstract java.util.List<org.gradle.process.CommandLineArgumentProvider> compilerArgumentProviders;
  }

  @org.gradle.api.Incubating public interface ApkExtension {
  }

  public interface ApkSigningConfig extends com.android.build.api.dsl.SigningConfig org.gradle.api.Named {
    method @org.gradle.api.Incubating public Boolean? getEnableV1Signing();
    method @org.gradle.api.Incubating public Boolean? getEnableV2Signing();
    method @org.gradle.api.Incubating public Boolean? getEnableV3Signing();
    method @org.gradle.api.Incubating public Boolean? getEnableV4Signing();
    method @Deprecated @org.gradle.api.Incubating public boolean isV1SigningEnabled();
    method @Deprecated @org.gradle.api.Incubating public boolean isV2SigningEnabled();
    method @org.gradle.api.Incubating public void setEnableV1Signing(Boolean? enableV1Signing);
    method @org.gradle.api.Incubating public void setEnableV2Signing(Boolean? enableV2Signing);
    method @org.gradle.api.Incubating public void setEnableV3Signing(Boolean? enableV3Signing);
    method @org.gradle.api.Incubating public void setEnableV4Signing(Boolean? enableV4Signing);
    method @Deprecated @org.gradle.api.Incubating public void setV1SigningEnabled(boolean isV1SigningEnabled);
    method @Deprecated @org.gradle.api.Incubating public void setV2SigningEnabled(boolean isV2SigningEnabled);
    property @org.gradle.api.Incubating public abstract Boolean? enableV1Signing;
    property @org.gradle.api.Incubating public abstract Boolean? enableV2Signing;
    property @org.gradle.api.Incubating public abstract Boolean? enableV3Signing;
    property @org.gradle.api.Incubating public abstract Boolean? enableV4Signing;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean isV1SigningEnabled;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean isV2SigningEnabled;
  }

  public interface ApplicationBaseFlavor extends com.android.build.api.dsl.BaseFlavor com.android.build.api.dsl.ApplicationVariantDimension {
    method @org.gradle.api.Incubating public String? getApplicationId();
    method @org.gradle.api.Incubating public Integer? getMaxSdk();
    method @org.gradle.api.Incubating public Integer? getTargetSdk();
    method @org.gradle.api.Incubating public String? getTargetSdkPreview();
    method @org.gradle.api.Incubating public Integer? getVersionCode();
    method @org.gradle.api.Incubating public String? getVersionName();
    method @Deprecated @org.gradle.api.Incubating public void maxSdkVersion(int maxSdkVersion);
    method @org.gradle.api.Incubating public void setApplicationId(String? applicationId);
    method @org.gradle.api.Incubating public void setMaxSdk(Integer? maxSdk);
    method @org.gradle.api.Incubating public void setTargetSdk(Integer? targetSdk);
    method @org.gradle.api.Incubating public void setTargetSdkPreview(String? targetSdkPreview);
    method @Deprecated @org.gradle.api.Incubating public void setTargetSdkVersion(String? targetSdkVersion);
    method @org.gradle.api.Incubating public void setVersionCode(Integer? versionCode);
    method @org.gradle.api.Incubating public void setVersionName(String? versionName);
    method @Deprecated @org.gradle.api.Incubating public void targetSdkVersion(int targetSdkVersion);
    method @Deprecated @org.gradle.api.Incubating public void targetSdkVersion(String? targetSdkVersion);
    property @org.gradle.api.Incubating public abstract String? applicationId;
    property @org.gradle.api.Incubating public abstract Integer? maxSdk;
    property @org.gradle.api.Incubating public abstract Integer? targetSdk;
    property @org.gradle.api.Incubating public abstract String? targetSdkPreview;
    property @org.gradle.api.Incubating public abstract Integer? versionCode;
    property @org.gradle.api.Incubating public abstract String? versionName;
  }

  public interface ApplicationBuildFeatures extends com.android.build.api.dsl.BuildFeatures {
    method @org.gradle.api.Incubating public Boolean? getDataBinding();
    method @org.gradle.api.Incubating public Boolean? getMlModelBinding();
    method @org.gradle.api.Incubating public void setDataBinding(Boolean? dataBinding);
    method @org.gradle.api.Incubating public void setMlModelBinding(Boolean? mlModelBinding);
    property @org.gradle.api.Incubating public abstract Boolean? dataBinding;
    property @org.gradle.api.Incubating public abstract Boolean? mlModelBinding;
  }

  public interface ApplicationBuildType extends com.android.build.api.dsl.BuildType com.android.build.api.dsl.ApplicationVariantDimension {
    method @org.gradle.api.Incubating public Boolean? isCrunchPngs();
    method @org.gradle.api.Incubating public boolean isDebuggable();
    method @org.gradle.api.Incubating public boolean isDefault();
    method @org.gradle.api.Incubating public boolean isEmbedMicroApp();
    method @org.gradle.api.Incubating public boolean isProfileable();
    method @org.gradle.api.Incubating public void setCrunchPngs(Boolean? isCrunchPngs);
    method @org.gradle.api.Incubating public void setDebuggable(boolean isDebuggable);
    method @org.gradle.api.Incubating public void setDefault(boolean isDefault);
    method @org.gradle.api.Incubating public void setEmbedMicroApp(boolean isEmbedMicroApp);
    method @org.gradle.api.Incubating public void setProfileable(boolean isProfileable);
    property @org.gradle.api.Incubating public abstract Boolean? isCrunchPngs;
    property @org.gradle.api.Incubating public abstract boolean isDebuggable;
    property @org.gradle.api.Incubating public abstract boolean isDefault;
    property @org.gradle.api.Incubating public abstract boolean isEmbedMicroApp;
    property @org.gradle.api.Incubating public abstract boolean isProfileable;
  }

  public interface ApplicationDefaultConfig extends com.android.build.api.dsl.ApplicationBaseFlavor com.android.build.api.dsl.DefaultConfig {
  }

  public interface ApplicationExtension extends com.android.build.api.dsl.CommonExtension<com.android.build.api.dsl.ApplicationBuildFeatures,com.android.build.api.dsl.ApplicationBuildType,com.android.build.api.dsl.ApplicationDefaultConfig,com.android.build.api.dsl.ApplicationProductFlavor> com.android.build.api.dsl.ApkExtension com.android.build.api.dsl.TestedExtension {
    method public void bundle(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.Bundle,kotlin.Unit> action);
    method public void dependenciesInfo(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.DependenciesInfo,kotlin.Unit> action);
    method @org.gradle.api.Incubating public java.util.Set<java.lang.String> getAssetPacks();
    method public com.android.build.api.dsl.Bundle getBundle();
    method public com.android.build.api.dsl.DependenciesInfo getDependenciesInfo();
    method @org.gradle.api.Incubating public java.util.Set<java.lang.String> getDynamicFeatures();
    method public com.android.build.api.dsl.ApplicationPublishing getPublishing();
    method public void publishing(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.ApplicationPublishing,kotlin.Unit> action);
    property @org.gradle.api.Incubating public abstract java.util.Set<java.lang.String> assetPacks;
    property public abstract com.android.build.api.dsl.Bundle bundle;
    property public abstract com.android.build.api.dsl.DependenciesInfo dependenciesInfo;
    property @org.gradle.api.Incubating public abstract java.util.Set<java.lang.String> dynamicFeatures;
    property public abstract com.android.build.api.dsl.ApplicationPublishing publishing;
  }

  public interface ApplicationProductFlavor extends com.android.build.api.dsl.ApplicationBaseFlavor com.android.build.api.dsl.ProductFlavor {
    method @org.gradle.api.Incubating public boolean isDefault();
    method @org.gradle.api.Incubating public void setDefault(boolean isDefault);
    property @org.gradle.api.Incubating public abstract boolean isDefault;
  }

  public interface ApplicationPublishing extends com.android.build.api.dsl.Publishing<com.android.build.api.dsl.ApplicationSingleVariant> {
  }

  public interface ApplicationSingleVariant extends com.android.build.api.dsl.SingleVariant {
    method public void publishApk();
  }

  public interface ApplicationVariantDimension extends com.android.build.api.dsl.VariantDimension {
    method public String? getApplicationIdSuffix();
    method @org.gradle.api.Incubating public Boolean? getMultiDexEnabled();
    method @org.gradle.api.Incubating public com.android.build.api.dsl.ApkSigningConfig? getSigningConfig();
    method public String? getVersionNameSuffix();
    method public void setApplicationIdSuffix(String? applicationIdSuffix);
    method @org.gradle.api.Incubating public void setMultiDexEnabled(Boolean? multiDexEnabled);
    method @org.gradle.api.Incubating public void setSigningConfig(com.android.build.api.dsl.ApkSigningConfig? signingConfig);
    method public void setVersionNameSuffix(String? versionNameSuffix);
    property public abstract String? applicationIdSuffix;
    property @org.gradle.api.Incubating public abstract Boolean? multiDexEnabled;
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.ApkSigningConfig? signingConfig;
    property public abstract String? versionNameSuffix;
  }

  public interface AssetPackBundleExtension {
    method @org.gradle.api.Incubating public void deviceTier(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.BundleDeviceTier,kotlin.Unit> action);
    method @org.gradle.api.Incubating public String getApplicationId();
    method @org.gradle.api.Incubating public java.util.Set<java.lang.String> getAssetPacks();
    method @org.gradle.api.Incubating public int getCompileSdk();
    method @org.gradle.api.Incubating public com.android.build.api.dsl.BundleDeviceTier getDeviceTier();
    method @org.gradle.api.Incubating public com.android.build.api.dsl.SigningConfig getSigningConfig();
    method @org.gradle.api.Incubating public com.android.build.api.dsl.BundleTexture getTexture();
    method @org.gradle.api.Incubating public java.util.Set<java.lang.Integer> getVersionCodes();
    method @org.gradle.api.Incubating public String getVersionTag();
    method @org.gradle.api.Incubating public void setApplicationId(String applicationId);
    method @org.gradle.api.Incubating public void setCompileSdk(int compileSdk);
    method @org.gradle.api.Incubating public void setVersionTag(String versionTag);
    method @org.gradle.api.Incubating public void signingConfig(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.SigningConfig,kotlin.Unit> action);
    method @org.gradle.api.Incubating public void texture(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.BundleTexture,kotlin.Unit> action);
    property @org.gradle.api.Incubating public abstract String applicationId;
    property @org.gradle.api.Incubating public abstract java.util.Set<java.lang.String> assetPacks;
    property @org.gradle.api.Incubating public abstract int compileSdk;
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.BundleDeviceTier deviceTier;
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.SigningConfig signingConfig;
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.BundleTexture texture;
    property @org.gradle.api.Incubating public abstract java.util.Set<java.lang.Integer> versionCodes;
    property @org.gradle.api.Incubating public abstract String versionTag;
  }

  public interface AssetPackExtension {
    method @org.gradle.api.Incubating public void dynamicDelivery(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.DynamicDelivery,kotlin.Unit> action);
    method @org.gradle.api.Incubating public com.android.build.api.dsl.DynamicDelivery getDynamicDelivery();
    method @org.gradle.api.Incubating public org.gradle.api.provider.Property<java.lang.String> getPackName();
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.DynamicDelivery dynamicDelivery;
    property @org.gradle.api.Incubating public abstract org.gradle.api.provider.Property<java.lang.String> packName;
  }

  public interface BaseFlavor extends com.android.build.api.dsl.VariantDimension com.android.build.api.dsl.HasInitWith<com.android.build.api.dsl.BaseFlavor> {
    method @org.gradle.api.Incubating public Integer? getMinSdk();
    method @org.gradle.api.Incubating public String? getMinSdkPreview();
    method @org.gradle.api.Incubating public String getName();
    method @org.gradle.api.Incubating public Boolean? getRenderscriptNdkModeEnabled();
    method @org.gradle.api.Incubating public Boolean? getRenderscriptSupportModeBlasEnabled();
    method @org.gradle.api.Incubating public Boolean? getRenderscriptSupportModeEnabled();
    method @org.gradle.api.Incubating public Integer? getRenderscriptTargetApi();
    method @org.gradle.api.Incubating public java.util.Set<java.lang.String> getResourceConfigurations();
    method @org.gradle.api.Incubating public String? getTestApplicationId();
    method @org.gradle.api.Incubating public Boolean? getTestFunctionalTest();
    method @org.gradle.api.Incubating public Boolean? getTestHandleProfiling();
    method @org.gradle.api.Incubating public String? getTestInstrumentationRunner();
    method @org.gradle.api.Incubating public java.util.Map<java.lang.String,java.lang.String> getTestInstrumentationRunnerArguments();
    method @org.gradle.api.Incubating public com.android.build.api.dsl.VectorDrawables getVectorDrawables();
    method @org.gradle.api.Incubating public Boolean? getWearAppUnbundled();
    method @org.gradle.api.Incubating public void initWith(com.android.build.api.dsl.BaseFlavor that);
    method @Deprecated @org.gradle.api.Incubating public void minSdkVersion(int minSdkVersion);
    method @Deprecated @org.gradle.api.Incubating public void minSdkVersion(String? minSdkVersion);
    method @org.gradle.api.Incubating public void missingDimensionStrategy(String dimension, String requestedValue);
    method @org.gradle.api.Incubating public void missingDimensionStrategy(String dimension, java.lang.String... requestedValues);
    method @org.gradle.api.Incubating public void missingDimensionStrategy(String dimension, java.util.List<java.lang.String> requestedValues);
    method @Deprecated @org.gradle.api.Incubating public void resConfig(String config);
    method @Deprecated @org.gradle.api.Incubating public void resConfigs(java.util.Collection<java.lang.String> config);
    method @Deprecated @org.gradle.api.Incubating public void resConfigs(java.lang.String... config);
    method @org.gradle.api.Incubating public void setMinSdk(Integer? minSdk);
    method @org.gradle.api.Incubating public void setMinSdkPreview(String? minSdkPreview);
    method @Deprecated @org.gradle.api.Incubating public void setMinSdkVersion(int minSdkVersion);
    method @Deprecated @org.gradle.api.Incubating public void setMinSdkVersion(String? minSdkVersion);
    method @org.gradle.api.Incubating public void setRenderscriptNdkModeEnabled(Boolean? renderscriptNdkModeEnabled);
    method @org.gradle.api.Incubating public void setRenderscriptSupportModeBlasEnabled(Boolean? renderscriptSupportModeBlasEnabled);
    method @org.gradle.api.Incubating public void setRenderscriptSupportModeEnabled(Boolean? renderscriptSupportModeEnabled);
    method @org.gradle.api.Incubating public void setRenderscriptTargetApi(Integer? renderscriptTargetApi);
    method @org.gradle.api.Incubating public void setTestApplicationId(String? testApplicationId);
    method @org.gradle.api.Incubating public void setTestFunctionalTest(Boolean? testFunctionalTest);
    method @Deprecated @org.gradle.api.Incubating public Object? setTestFunctionalTest(boolean testFunctionalTest);
    method @org.gradle.api.Incubating public void setTestHandleProfiling(Boolean? testHandleProfiling);
    method @Deprecated @org.gradle.api.Incubating public Object? setTestHandleProfiling(boolean testHandleProfiling);
    method @org.gradle.api.Incubating public void setTestInstrumentationRunner(String? testInstrumentationRunner);
    method @Deprecated @org.gradle.api.Incubating public Object? setTestInstrumentationRunnerArguments(java.util.Map<java.lang.String,java.lang.String> testInstrumentationRunnerArguments);
    method @org.gradle.api.Incubating public void setWearAppUnbundled(Boolean? wearAppUnbundled);
    method @Deprecated @org.gradle.api.Incubating public void testInstrumentationRunnerArgument(String key, String value);
    method @Deprecated @org.gradle.api.Incubating public void testInstrumentationRunnerArguments(java.util.Map<java.lang.String,java.lang.String> args);
    method @org.gradle.api.Incubating public void vectorDrawables(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.VectorDrawables,kotlin.Unit> action);
    property @org.gradle.api.Incubating public abstract Integer? minSdk;
    property @org.gradle.api.Incubating public abstract String? minSdkPreview;
    property @org.gradle.api.Incubating public abstract Boolean? renderscriptNdkModeEnabled;
    property @org.gradle.api.Incubating public abstract Boolean? renderscriptSupportModeBlasEnabled;
    property @org.gradle.api.Incubating public abstract Boolean? renderscriptSupportModeEnabled;
    property @org.gradle.api.Incubating public abstract Integer? renderscriptTargetApi;
    property @org.gradle.api.Incubating public abstract java.util.Set<java.lang.String> resourceConfigurations;
    property @org.gradle.api.Incubating public abstract String? testApplicationId;
    property @org.gradle.api.Incubating public abstract Boolean? testFunctionalTest;
    property @org.gradle.api.Incubating public abstract Boolean? testHandleProfiling;
    property @org.gradle.api.Incubating public abstract String? testInstrumentationRunner;
    property @org.gradle.api.Incubating public abstract java.util.Map<java.lang.String,java.lang.String> testInstrumentationRunnerArguments;
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.VectorDrawables vectorDrawables;
    property @org.gradle.api.Incubating public abstract Boolean? wearAppUnbundled;
  }

  public interface BuildFeatures extends org.gradle.api.plugins.ExtensionAware {
    method @org.gradle.api.Incubating public Boolean? getAidl();
    method @org.gradle.api.Incubating public Boolean? getBuildConfig();
    method @org.gradle.api.Incubating public Boolean? getCompose();
    method @org.gradle.api.Incubating public Boolean? getPrefab();
    method @org.gradle.api.Incubating public Boolean? getRenderScript();
    method @org.gradle.api.Incubating public Boolean? getResValues();
    method @org.gradle.api.Incubating public Boolean? getShaders();
    method @org.gradle.api.Incubating public Boolean? getViewBinding();
    method @org.gradle.api.Incubating public void setAidl(Boolean? aidl);
    method @org.gradle.api.Incubating public void setBuildConfig(Boolean? buildConfig);
    method @org.gradle.api.Incubating public void setCompose(Boolean? compose);
    method @org.gradle.api.Incubating public void setPrefab(Boolean? prefab);
    method @org.gradle.api.Incubating public void setRenderScript(Boolean? renderScript);
    method @org.gradle.api.Incubating public void setResValues(Boolean? resValues);
    method @org.gradle.api.Incubating public void setShaders(Boolean? shaders);
    method @org.gradle.api.Incubating public void setViewBinding(Boolean? viewBinding);
    property @org.gradle.api.Incubating public abstract Boolean? aidl;
    property @org.gradle.api.Incubating public abstract Boolean? buildConfig;
    property @org.gradle.api.Incubating public abstract Boolean? compose;
    property @org.gradle.api.Incubating public abstract Boolean? prefab;
    property @org.gradle.api.Incubating public abstract Boolean? renderScript;
    property @org.gradle.api.Incubating public abstract Boolean? resValues;
    property @org.gradle.api.Incubating public abstract Boolean? shaders;
    property @org.gradle.api.Incubating public abstract Boolean? viewBinding;
  }

  public interface BuildType extends org.gradle.api.Named org.gradle.api.plugins.ExtensionAware com.android.build.api.dsl.HasInitWith<com.android.build.api.dsl.BuildType> com.android.build.api.dsl.VariantDimension {
    method @org.gradle.api.Incubating public boolean getEnableAndroidTestCoverage();
    method @org.gradle.api.Incubating public boolean getEnableUnitTestCoverage();
    method @org.gradle.api.Incubating public java.util.List<java.lang.String> getMatchingFallbacks();
    method @org.gradle.api.Incubating public com.android.build.api.dsl.PostProcessing getPostprocessing();
    method @org.gradle.api.Incubating public int getRenderscriptOptimLevel();
    method @org.gradle.api.Incubating public void initWith(com.android.build.api.dsl.BuildType that);
    method @org.gradle.api.Incubating public boolean isJniDebuggable();
    method @org.gradle.api.Incubating public boolean isMinifyEnabled();
    method @org.gradle.api.Incubating public boolean isPseudoLocalesEnabled();
    method @org.gradle.api.Incubating public boolean isRenderscriptDebuggable();
    method @org.gradle.api.Incubating public boolean isShrinkResources();
    method @Deprecated @org.gradle.api.Incubating public boolean isTestCoverageEnabled();
    method @Deprecated @org.gradle.api.Incubating public boolean isZipAlignEnabled();
    method @org.gradle.api.Incubating public void postprocessing(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.PostProcessing,kotlin.Unit> action);
    method @org.gradle.api.Incubating public void setEnableAndroidTestCoverage(boolean enableAndroidTestCoverage);
    method @org.gradle.api.Incubating public void setEnableUnitTestCoverage(boolean enableUnitTestCoverage);
    method @org.gradle.api.Incubating public void setJniDebuggable(boolean isJniDebuggable);
    method @Deprecated @org.gradle.api.Incubating public void setMatchingFallbacks(java.lang.String... fallbacks);
    method @Deprecated @org.gradle.api.Incubating public void setMatchingFallbacks(java.util.List<java.lang.String> fallbacks);
    method @org.gradle.api.Incubating public void setMinifyEnabled(boolean isMinifyEnabled);
    method @org.gradle.api.Incubating public void setPseudoLocalesEnabled(boolean isPseudoLocalesEnabled);
    method @org.gradle.api.Incubating public void setRenderscriptDebuggable(boolean isRenderscriptDebuggable);
    method @org.gradle.api.Incubating public void setRenderscriptOptimLevel(int renderscriptOptimLevel);
    method @org.gradle.api.Incubating public void setShrinkResources(boolean isShrinkResources);
    method @Deprecated @org.gradle.api.Incubating public void setTestCoverageEnabled(boolean isTestCoverageEnabled);
    method @Deprecated @org.gradle.api.Incubating public void setZipAlignEnabled(boolean isZipAlignEnabled);
    property @org.gradle.api.Incubating public abstract boolean enableAndroidTestCoverage;
    property @org.gradle.api.Incubating public abstract boolean enableUnitTestCoverage;
    property @org.gradle.api.Incubating public abstract boolean isJniDebuggable;
    property @org.gradle.api.Incubating public abstract boolean isMinifyEnabled;
    property @org.gradle.api.Incubating public abstract boolean isPseudoLocalesEnabled;
    property @org.gradle.api.Incubating public abstract boolean isRenderscriptDebuggable;
    property @org.gradle.api.Incubating public abstract boolean isShrinkResources;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean isTestCoverageEnabled;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean isZipAlignEnabled;
    property @org.gradle.api.Incubating public abstract java.util.List<java.lang.String> matchingFallbacks;
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.PostProcessing postprocessing;
    property @org.gradle.api.Incubating public abstract int renderscriptOptimLevel;
  }

  public interface Bundle {
    method public void abi(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.BundleAbi,kotlin.Unit> action);
    method @org.gradle.api.Incubating public void codeTransparency(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.BundleCodeTransparency,kotlin.Unit> action);
    method public void density(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.BundleDensity,kotlin.Unit> action);
    method @org.gradle.api.Incubating public void deviceTier(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.BundleDeviceTier,kotlin.Unit> action);
    method public com.android.build.api.dsl.BundleAbi getAbi();
    method @org.gradle.api.Incubating public com.android.build.api.dsl.BundleCodeTransparency getCodeTransparency();
    method public com.android.build.api.dsl.BundleDensity getDensity();
    method @org.gradle.api.Incubating public com.android.build.api.dsl.BundleDeviceTier getDeviceTier();
    method @org.gradle.api.Incubating public org.gradle.api.file.DirectoryProperty getIntegrityConfigDir();
    method public com.android.build.api.dsl.BundleLanguage getLanguage();
    method @org.gradle.api.Incubating public com.android.build.api.dsl.StoreArchive getStoreArchive();
    method public com.android.build.api.dsl.BundleTexture getTexture();
    method public void language(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.BundleLanguage,kotlin.Unit> action);
    method @org.gradle.api.Incubating public void storeArchive(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.StoreArchive,kotlin.Unit> action);
    method public void texture(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.BundleTexture,kotlin.Unit> action);
    property public abstract com.android.build.api.dsl.BundleAbi abi;
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.BundleCodeTransparency codeTransparency;
    property public abstract com.android.build.api.dsl.BundleDensity density;
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.BundleDeviceTier deviceTier;
    property @org.gradle.api.Incubating public abstract org.gradle.api.file.DirectoryProperty integrityConfigDir;
    property public abstract com.android.build.api.dsl.BundleLanguage language;
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.StoreArchive storeArchive;
    property public abstract com.android.build.api.dsl.BundleTexture texture;
  }

  public interface BundleAbi {
    method @org.gradle.api.Incubating public Boolean? getEnableSplit();
    method @org.gradle.api.Incubating public void setEnableSplit(Boolean? enableSplit);
    property @org.gradle.api.Incubating public abstract Boolean? enableSplit;
  }

  @org.gradle.api.Incubating public interface BundleCodeTransparency {
    method public com.android.build.api.dsl.SigningConfig getSigning();
    method public void signing(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.SigningConfig,kotlin.Unit> action);
    property public abstract com.android.build.api.dsl.SigningConfig signing;
  }

  public interface BundleDensity {
    method @org.gradle.api.Incubating public Boolean? getEnableSplit();
    method @org.gradle.api.Incubating public void setEnableSplit(Boolean? enableSplit);
    property @org.gradle.api.Incubating public abstract Boolean? enableSplit;
  }

  @org.gradle.api.Incubating public interface BundleDeviceTier {
    method public String? getDefaultTier();
    method public Boolean? getEnableSplit();
    method public void setDefaultTier(String? defaultTier);
    method public void setEnableSplit(Boolean? enableSplit);
    property public abstract String? defaultTier;
    property public abstract Boolean? enableSplit;
  }

  public interface BundleLanguage {
    method @org.gradle.api.Incubating public Boolean? getEnableSplit();
    method @org.gradle.api.Incubating public void setEnableSplit(Boolean? enableSplit);
    property @org.gradle.api.Incubating public abstract Boolean? enableSplit;
  }

  public interface BundleTexture {
    method @org.gradle.api.Incubating public String? getDefaultFormat();
    method @org.gradle.api.Incubating public Boolean? getEnableSplit();
    method @org.gradle.api.Incubating public void setDefaultFormat(String? defaultFormat);
    method @org.gradle.api.Incubating public void setEnableSplit(Boolean? enableSplit);
    property @org.gradle.api.Incubating public abstract String? defaultFormat;
    property @org.gradle.api.Incubating public abstract Boolean? enableSplit;
  }

  public interface Cmake {
    method public void buildStagingDirectory(Object? buildStagingDirectory);
    method public java.io.File? getBuildStagingDirectory();
    method public java.io.File? getPath();
    method public String? getVersion();
    method public void path(Object? path);
    method public void setBuildStagingDirectory(java.io.File? buildStagingDirectory);
    method public void setPath(java.io.File? path);
    method public void setVersion(String? version);
    property public abstract java.io.File? buildStagingDirectory;
    property public abstract java.io.File? path;
    property public abstract String? version;
  }

  public interface CommonExtension<BuildFeaturesT extends com.android.build.api.dsl.BuildFeatures, BuildTypeT extends com.android.build.api.dsl.BuildType, DefaultConfigT extends com.android.build.api.dsl.DefaultConfig, ProductFlavorT extends com.android.build.api.dsl.ProductFlavor> {
    method @Deprecated @org.gradle.api.Incubating public void aaptOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AaptOptions,kotlin.Unit> action);
    method @Deprecated @org.gradle.api.Incubating public void adbOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AdbOptions,kotlin.Unit> action);
    method public void androidResources(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidResources,kotlin.Unit> action);
    method @org.gradle.api.Incubating public void buildFeatures(kotlin.jvm.functions.Function1<? super BuildFeaturesT,kotlin.Unit> action);
    method @Deprecated @org.gradle.api.Incubating public void buildToolsVersion(String buildToolsVersion);
    method public void buildTypes(kotlin.jvm.functions.Function1<? super org.gradle.api.NamedDomainObjectContainer<BuildTypeT>,kotlin.Unit> action);
    method public void compileOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.CompileOptions,kotlin.Unit> action);
    method public void compileSdkAddon(String vendor, String name, int version);
    method @Deprecated @org.gradle.api.Incubating public void compileSdkVersion(int apiLevel);
    method @Deprecated @org.gradle.api.Incubating public void compileSdkVersion(String version);
    method @org.gradle.api.Incubating public void composeOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.ComposeOptions,kotlin.Unit> action);
    method public void dataBinding(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.DataBinding,kotlin.Unit> action);
    method public void debug(org.gradle.api.NamedDomainObjectContainer<BuildTypeT>, kotlin.jvm.functions.Function1<? super BuildTypeT,kotlin.Unit> action);
    method public void defaultConfig(kotlin.jvm.functions.Function1<? super DefaultConfigT,kotlin.Unit> action);
    method public void externalNativeBuild(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.ExternalNativeBuild,kotlin.Unit> action);
    method @Deprecated @org.gradle.api.Incubating public void flavorDimensions(java.lang.String... dimensions);
    method @Deprecated @org.gradle.api.Incubating public com.android.build.api.dsl.AaptOptions getAaptOptions();
    method @Deprecated @org.gradle.api.Incubating public com.android.build.api.dsl.AdbOptions getAdbOptions();
    method public com.android.build.api.dsl.AndroidResources getAndroidResources();
    method @org.gradle.api.Incubating public BuildFeaturesT getBuildFeatures();
    method @org.gradle.api.Incubating public String getBuildToolsVersion();
    method public org.gradle.api.NamedDomainObjectContainer<? extends BuildTypeT> getBuildTypes();
    method public com.android.build.api.dsl.CompileOptions getCompileOptions();
    method public Integer? getCompileSdk();
    method public Integer? getCompileSdkExtension();
    method public String? getCompileSdkPreview();
    method @org.gradle.api.Incubating public com.android.build.api.dsl.ComposeOptions getComposeOptions();
    method public com.android.build.api.dsl.DataBinding getDataBinding();
    method public DefaultConfigT getDefaultConfig();
    method @org.gradle.api.Incubating public java.io.File getDefaultProguardFile(String name);
    method @org.gradle.api.Incubating public java.util.Map<java.lang.String,java.lang.Object> getExperimentalProperties();
    method public com.android.build.api.dsl.ExternalNativeBuild getExternalNativeBuild();
    method @org.gradle.api.Incubating public java.util.List<java.lang.String> getFlavorDimensions();
    method public com.android.build.api.dsl.Installation getInstallation();
    method @Deprecated @org.gradle.api.Incubating public com.android.build.api.dsl.JacocoOptions getJacoco();
    method public com.android.build.api.dsl.Lint getLint();
    method @Deprecated @org.gradle.api.Incubating public com.android.build.api.dsl.LintOptions getLintOptions();
    method public String? getNamespace();
    method @org.gradle.api.Incubating public String? getNdkPath();
    method @org.gradle.api.Incubating public String? getNdkVersion();
    method @org.gradle.api.Incubating public com.android.build.api.dsl.PackagingOptions getPackagingOptions();
    method public org.gradle.api.NamedDomainObjectContainer<? extends ProductFlavorT> getProductFlavors();
    method @org.gradle.api.Incubating public String? getResourcePrefix();
    method @Deprecated @org.gradle.api.Incubating public com.android.build.api.dsl.SdkComponents getSdkComponents();
    method @org.gradle.api.Incubating public org.gradle.api.NamedDomainObjectContainer<? extends com.android.build.api.dsl.ApkSigningConfig> getSigningConfigs();
    method @org.gradle.api.Incubating public org.gradle.api.NamedDomainObjectContainer<? extends com.android.build.api.dsl.AndroidSourceSet> getSourceSets();
    method @org.gradle.api.Incubating public com.android.build.api.dsl.Splits getSplits();
    method public com.android.build.api.dsl.TestCoverage getTestCoverage();
    method @org.gradle.api.Incubating public com.android.build.api.dsl.TestOptions getTestOptions();
    method public com.android.build.api.dsl.ViewBinding getViewBinding();
    method public void installation(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.Installation,kotlin.Unit> action);
    method @Deprecated @org.gradle.api.Incubating public void jacoco(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.JacocoOptions,kotlin.Unit> action);
    method public void lint(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.Lint,kotlin.Unit> action);
    method @Deprecated @org.gradle.api.Incubating public void lintOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.LintOptions,kotlin.Unit> action);
    method @org.gradle.api.Incubating public void packagingOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.PackagingOptions,kotlin.Unit> action);
    method public void productFlavors(kotlin.jvm.functions.Function1<? super org.gradle.api.NamedDomainObjectContainer<ProductFlavorT>,kotlin.Unit> action);
    method public void release(org.gradle.api.NamedDomainObjectContainer<BuildTypeT>, kotlin.jvm.functions.Function1<? super BuildTypeT,kotlin.Unit> action);
    method @org.gradle.api.Incubating public void setBuildToolsVersion(String buildToolsVersion);
    method public void setCompileSdk(Integer? compileSdk);
    method public void setCompileSdkExtension(Integer? compileSdkExtension);
    method public void setCompileSdkPreview(String? compileSdkPreview);
    method public void setNamespace(String? namespace);
    method @org.gradle.api.Incubating public void setNdkPath(String? ndkPath);
    method @org.gradle.api.Incubating public void setNdkVersion(String? ndkVersion);
    method @org.gradle.api.Incubating public void setResourcePrefix(String? resourcePrefix);
    method @org.gradle.api.Incubating public void signingConfigs(kotlin.jvm.functions.Function1<? super org.gradle.api.NamedDomainObjectContainer<? extends com.android.build.api.dsl.ApkSigningConfig>,kotlin.Unit> action);
    method @org.gradle.api.Incubating public void sourceSets(kotlin.jvm.functions.Function1<? super org.gradle.api.NamedDomainObjectContainer<? extends com.android.build.api.dsl.AndroidSourceSet>,kotlin.Unit> action);
    method @org.gradle.api.Incubating public void splits(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.Splits,kotlin.Unit> action);
    method public void testCoverage(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.TestCoverage,kotlin.Unit> action);
    method @org.gradle.api.Incubating public void testOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.TestOptions,kotlin.Unit> action);
    method @org.gradle.api.Incubating public void useLibrary(String name);
    method @org.gradle.api.Incubating public void useLibrary(String name, boolean required);
    method public void viewBinding(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.ViewBinding,kotlin.Unit> action);
    property @Deprecated @org.gradle.api.Incubating public abstract com.android.build.api.dsl.AaptOptions aaptOptions;
    property @Deprecated @org.gradle.api.Incubating public abstract com.android.build.api.dsl.AdbOptions adbOptions;
    property public abstract com.android.build.api.dsl.AndroidResources androidResources;
    property @org.gradle.api.Incubating public abstract BuildFeaturesT buildFeatures;
    property @org.gradle.api.Incubating public abstract String buildToolsVersion;
    property public abstract org.gradle.api.NamedDomainObjectContainer<? extends BuildTypeT> buildTypes;
    property public abstract com.android.build.api.dsl.CompileOptions compileOptions;
    property public abstract Integer? compileSdk;
    property public abstract Integer? compileSdkExtension;
    property public abstract String? compileSdkPreview;
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.ComposeOptions composeOptions;
    property public abstract com.android.build.api.dsl.DataBinding dataBinding;
    property public abstract DefaultConfigT defaultConfig;
    property @org.gradle.api.Incubating public abstract java.util.Map<java.lang.String,java.lang.Object> experimentalProperties;
    property public abstract com.android.build.api.dsl.ExternalNativeBuild externalNativeBuild;
    property @org.gradle.api.Incubating public abstract java.util.List<java.lang.String> flavorDimensions;
    property public abstract com.android.build.api.dsl.Installation installation;
    property @Deprecated @org.gradle.api.Incubating public abstract com.android.build.api.dsl.JacocoOptions jacoco;
    property public abstract com.android.build.api.dsl.Lint lint;
    property @Deprecated @org.gradle.api.Incubating public abstract com.android.build.api.dsl.LintOptions lintOptions;
    property public abstract String? namespace;
    property @org.gradle.api.Incubating public abstract String? ndkPath;
    property @org.gradle.api.Incubating public abstract String? ndkVersion;
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.PackagingOptions packagingOptions;
    property public abstract org.gradle.api.NamedDomainObjectContainer<? extends ProductFlavorT> productFlavors;
    property @org.gradle.api.Incubating public abstract String? resourcePrefix;
    property @Deprecated @org.gradle.api.Incubating public abstract com.android.build.api.dsl.SdkComponents sdkComponents;
    property @org.gradle.api.Incubating public abstract org.gradle.api.NamedDomainObjectContainer<? extends com.android.build.api.dsl.ApkSigningConfig> signingConfigs;
    property @org.gradle.api.Incubating public abstract org.gradle.api.NamedDomainObjectContainer<? extends com.android.build.api.dsl.AndroidSourceSet> sourceSets;
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.Splits splits;
    property public abstract com.android.build.api.dsl.TestCoverage testCoverage;
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.TestOptions testOptions;
    property public abstract com.android.build.api.dsl.ViewBinding viewBinding;
  }

  public interface CompileOptions {
    method public String getEncoding();
    method public org.gradle.api.JavaVersion getSourceCompatibility();
    method public org.gradle.api.JavaVersion getTargetCompatibility();
    method public boolean isCoreLibraryDesugaringEnabled();
    method public void setCoreLibraryDesugaringEnabled(boolean isCoreLibraryDesugaringEnabled);
    method public void setEncoding(String encoding);
    method public void setSourceCompatibility(org.gradle.api.JavaVersion sourceCompatibility);
    method public void setTargetCompatibility(org.gradle.api.JavaVersion targetCompatibility);
    method public void sourceCompatibility(Object sourceCompatibility);
    method public void targetCompatibility(Object targetCompatibility);
    property public abstract String encoding;
    property public abstract boolean isCoreLibraryDesugaringEnabled;
    property public abstract org.gradle.api.JavaVersion sourceCompatibility;
    property public abstract org.gradle.api.JavaVersion targetCompatibility;
  }

  @org.gradle.api.Incubating public interface ComposeOptions {
    method public String? getKotlinCompilerExtensionVersion();
    method @Deprecated public String? getKotlinCompilerVersion();
    method public boolean getUseLiveLiterals();
    method public void setKotlinCompilerExtensionVersion(String? kotlinCompilerExtensionVersion);
    method @Deprecated public void setKotlinCompilerVersion(String? kotlinCompilerVersion);
    method public void setUseLiveLiterals(boolean useLiveLiterals);
    property public abstract String? kotlinCompilerExtensionVersion;
    property @Deprecated public abstract String? kotlinCompilerVersion;
    property public abstract boolean useLiveLiterals;
  }

  public interface DataBinding {
    method public boolean getAddDefaultAdapters();
    method public Boolean? getAddKtx();
    method public String? getVersion();
    method public boolean isEnabled();
    method public boolean isEnabledForTests();
    method public void setAddDefaultAdapters(boolean addDefaultAdapters);
    method public void setAddKtx(Boolean? addKtx);
    method public void setEnabled(boolean isEnabled);
    method public void setEnabledForTests(boolean isEnabledForTests);
    method public void setVersion(String? version);
    property public abstract boolean addDefaultAdapters;
    property public abstract Boolean? addKtx;
    property public abstract boolean isEnabled;
    property public abstract boolean isEnabledForTests;
    property public abstract String? version;
  }

  public interface DefaultConfig extends com.android.build.api.dsl.BaseFlavor {
  }

  public interface DensitySplit extends com.android.build.api.dsl.Split {
    method @org.gradle.api.Incubating public void compatibleScreens(java.lang.String... sizes);
    method @org.gradle.api.Incubating public java.util.Set<java.lang.String> getCompatibleScreens();
    method @org.gradle.api.Incubating public boolean isStrict();
    method @org.gradle.api.Incubating public void setStrict(boolean isStrict);
    property @org.gradle.api.Incubating public abstract java.util.Set<java.lang.String> compatibleScreens;
    property @org.gradle.api.Incubating public abstract boolean isStrict;
  }

  public interface DependenciesInfo {
    method public boolean getIncludeInApk();
    method public boolean getIncludeInBundle();
    method public void setIncludeInApk(boolean includeInApk);
    method public void setIncludeInBundle(boolean includeInBundle);
    property public abstract boolean includeInApk;
    property public abstract boolean includeInBundle;
  }

  @org.gradle.api.Incubating public interface Device extends org.gradle.api.Named {
  }

  @org.gradle.api.Incubating public interface DeviceGroup extends org.gradle.api.Named {
    method public org.gradle.api.DomainObjectSet<com.android.build.api.dsl.Device> getTargetDevices();
    property public abstract org.gradle.api.DomainObjectSet<com.android.build.api.dsl.Device> targetDevices;
  }

  @org.gradle.api.Incubating public interface DexPackagingOptions {
    method public Boolean? getUseLegacyPackaging();
    method public void setUseLegacyPackaging(Boolean? useLegacyPackaging);
    property public abstract Boolean? useLegacyPackaging;
  }

  @org.gradle.api.Incubating public interface DynamicDelivery {
    method public org.gradle.api.provider.Property<java.lang.String> getDeliveryType();
    method public org.gradle.api.provider.Property<java.lang.String> getInstantDeliveryType();
    property public abstract org.gradle.api.provider.Property<java.lang.String> deliveryType;
    property public abstract org.gradle.api.provider.Property<java.lang.String> instantDeliveryType;
  }

  public interface DynamicFeatureBaseFlavor extends com.android.build.api.dsl.BaseFlavor com.android.build.api.dsl.DynamicFeatureVariantDimension {
  }

  public interface DynamicFeatureBuildFeatures extends com.android.build.api.dsl.BuildFeatures {
    method @org.gradle.api.Incubating public Boolean? getDataBinding();
    method @org.gradle.api.Incubating public Boolean? getMlModelBinding();
    method @org.gradle.api.Incubating public void setDataBinding(Boolean? dataBinding);
    method @org.gradle.api.Incubating public void setMlModelBinding(Boolean? mlModelBinding);
    property @org.gradle.api.Incubating public abstract Boolean? dataBinding;
    property @org.gradle.api.Incubating public abstract Boolean? mlModelBinding;
  }

  public interface DynamicFeatureBuildType extends com.android.build.api.dsl.BuildType com.android.build.api.dsl.DynamicFeatureVariantDimension {
    method @org.gradle.api.Incubating public Boolean? isCrunchPngs();
    method @org.gradle.api.Incubating public void setCrunchPngs(Boolean? isCrunchPngs);
    property @org.gradle.api.Incubating public abstract Boolean? isCrunchPngs;
  }

  public interface DynamicFeatureDefaultConfig extends com.android.build.api.dsl.DynamicFeatureBaseFlavor com.android.build.api.dsl.DefaultConfig {
  }

  public interface DynamicFeatureExtension extends com.android.build.api.dsl.CommonExtension<com.android.build.api.dsl.DynamicFeatureBuildFeatures,com.android.build.api.dsl.DynamicFeatureBuildType,com.android.build.api.dsl.DynamicFeatureDefaultConfig,com.android.build.api.dsl.DynamicFeatureProductFlavor> com.android.build.api.dsl.ApkExtension com.android.build.api.dsl.TestedExtension {
  }

  public interface DynamicFeatureProductFlavor extends com.android.build.api.dsl.DynamicFeatureBaseFlavor com.android.build.api.dsl.ProductFlavor {
  }

  public interface DynamicFeatureVariantDimension extends com.android.build.api.dsl.VariantDimension {
  }

  @org.gradle.api.Incubating public interface EmulatorSnapshots {
    method public boolean getCompressSnapshots();
    method public boolean getEnableForTestFailures();
    method public int getMaxSnapshotsForTestFailures();
    method public void retainAll();
    method public void setCompressSnapshots(boolean compressSnapshots);
    method public void setEnableForTestFailures(boolean enableForTestFailures);
    method public void setMaxSnapshotsForTestFailures(int maxSnapshotsForTestFailures);
    property public abstract boolean compressSnapshots;
    property public abstract boolean enableForTestFailures;
    property public abstract int maxSnapshotsForTestFailures;
  }

  public interface ExternalNativeBuild {
    method public void cmake(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.Cmake,kotlin.Unit> action);
    method public com.android.build.api.dsl.Cmake getCmake();
    method @org.gradle.api.Incubating public java.util.Map<java.lang.String,java.lang.Object> getExperimentalProperties();
    method public com.android.build.api.dsl.NdkBuild getNdkBuild();
    method public void ndkBuild(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.NdkBuild,kotlin.Unit> action);
    property public abstract com.android.build.api.dsl.Cmake cmake;
    property @org.gradle.api.Incubating public abstract java.util.Map<java.lang.String,java.lang.Object> experimentalProperties;
    property public abstract com.android.build.api.dsl.NdkBuild ndkBuild;
  }

  @org.gradle.api.Incubating public interface ExternalNativeBuildOptions {
    method public void cmake(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.ExternalNativeCmakeOptions,kotlin.Unit> action);
    method public com.android.build.api.dsl.ExternalNativeCmakeOptions getCmake();
    method public com.android.build.api.dsl.ExternalNativeNdkBuildOptions getNdkBuild();
    method public void ndkBuild(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.ExternalNativeNdkBuildOptions,kotlin.Unit> action);
    property public abstract com.android.build.api.dsl.ExternalNativeCmakeOptions cmake;
    property public abstract com.android.build.api.dsl.ExternalNativeNdkBuildOptions ndkBuild;
  }

  @org.gradle.api.Incubating public interface ExternalNativeCmakeOptions {
    method public void abiFilters(java.lang.String... abiFilters);
    method public void arguments(java.lang.String... arguments);
    method public void cFlags(java.lang.String... cFlags);
    method public void cppFlags(java.lang.String... cppFlags);
    method public java.util.Set<java.lang.String> getAbiFilters();
    method public java.util.List<java.lang.String> getArguments();
    method public java.util.List<java.lang.String> getCFlags();
    method public java.util.List<java.lang.String> getCppFlags();
    method public java.util.Set<java.lang.String> getTargets();
    method public void targets(java.lang.String... targets);
    property public abstract java.util.Set<java.lang.String> abiFilters;
    property public abstract java.util.List<java.lang.String> arguments;
    property public abstract java.util.List<java.lang.String> cFlags;
    property public abstract java.util.List<java.lang.String> cppFlags;
    property public abstract java.util.Set<java.lang.String> targets;
  }

  @org.gradle.api.Incubating public interface ExternalNativeNdkBuildOptions {
    method public void abiFilters(java.lang.String... abiFilters);
    method public void arguments(java.lang.String... arguments);
    method public void cFlags(java.lang.String... cFlags);
    method public void cppFlags(java.lang.String... cppFlags);
    method public java.util.Set<java.lang.String> getAbiFilters();
    method public java.util.List<java.lang.String> getArguments();
    method public java.util.List<java.lang.String> getCFlags();
    method public java.util.List<java.lang.String> getCppFlags();
    method public java.util.Set<java.lang.String> getTargets();
    method public void targets(java.lang.String... targets);
    property public abstract java.util.Set<java.lang.String> abiFilters;
    property public abstract java.util.List<java.lang.String> arguments;
    property public abstract java.util.List<java.lang.String> cFlags;
    property public abstract java.util.List<java.lang.String> cppFlags;
    property public abstract java.util.Set<java.lang.String> targets;
  }

  @Deprecated @org.gradle.api.Incubating public interface FailureRetention extends com.android.build.api.dsl.EmulatorSnapshots {
    method @Deprecated public boolean getEnable();
    method @Deprecated public int getMaxSnapshots();
    method @Deprecated public void setEnable(boolean enable);
    method @Deprecated public void setMaxSnapshots(int maxSnapshots);
    property @Deprecated public abstract boolean enable;
    property @Deprecated public abstract int maxSnapshots;
  }

  @org.gradle.api.Incubating public interface HasInitWith<T> {
    method public void initWith(T that);
  }

  public interface Installation {
    method @org.gradle.api.Incubating public java.util.Collection<java.lang.String>? getInstallOptions();
    method @org.gradle.api.Incubating public int getTimeOutInMs();
    method @org.gradle.api.Incubating public void installOptions(String option);
    method @org.gradle.api.Incubating public void installOptions(java.lang.String... options);
    method @org.gradle.api.Incubating public void setInstallOptions(java.util.Collection<java.lang.String>? installOptions);
    method @org.gradle.api.Incubating public void setTimeOutInMs(int timeOutInMs);
    property @org.gradle.api.Incubating public abstract java.util.Collection<java.lang.String>? installOptions;
    property @org.gradle.api.Incubating public abstract int timeOutInMs;
  }

  @Deprecated @org.gradle.api.Incubating public interface JacocoOptions extends com.android.build.api.dsl.TestCoverage {
    method @Deprecated public String getVersion();
    method @Deprecated public void setVersion(String version);
    property @Deprecated public abstract String version;
  }

  public interface JavaCompileOptions {
    method public void annotationProcessorOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AnnotationProcessorOptions,kotlin.Unit> action);
    method public com.android.build.api.dsl.AnnotationProcessorOptions getAnnotationProcessorOptions();
    property public abstract com.android.build.api.dsl.AnnotationProcessorOptions annotationProcessorOptions;
  }

  @org.gradle.api.Incubating public interface JniLibsPackagingOptions {
    method public java.util.Set<java.lang.String> getExcludes();
    method public java.util.Set<java.lang.String> getKeepDebugSymbols();
    method public java.util.Set<java.lang.String> getPickFirsts();
    method public Boolean? getUseLegacyPackaging();
    method public void setUseLegacyPackaging(Boolean? useLegacyPackaging);
    property public abstract java.util.Set<java.lang.String> excludes;
    property public abstract java.util.Set<java.lang.String> keepDebugSymbols;
    property public abstract java.util.Set<java.lang.String> pickFirsts;
    property public abstract Boolean? useLegacyPackaging;
  }

  @org.gradle.api.Incubating public interface KeepRules {
    method @org.gradle.api.Incubating public void ignoreAllExternalDependencies(boolean ignore);
    method @org.gradle.api.Incubating public void ignoreExternalDependencies(java.lang.String... ids);
  }

  public interface LibraryBaseFlavor extends com.android.build.api.dsl.BaseFlavor com.android.build.api.dsl.LibraryVariantDimension {
    method @org.gradle.api.Incubating public Integer? getTargetSdk();
    method @org.gradle.api.Incubating public String? getTargetSdkPreview();
    method @org.gradle.api.Incubating public void setTargetSdk(Integer? targetSdk);
    method @org.gradle.api.Incubating public void setTargetSdkPreview(String? targetSdkPreview);
    method @Deprecated @org.gradle.api.Incubating public void setTargetSdkVersion(String? targetSdkVersion);
    method @Deprecated @org.gradle.api.Incubating public void targetSdkVersion(int targetSdkVersion);
    method @Deprecated @org.gradle.api.Incubating public void targetSdkVersion(String? targetSdkVersion);
    property @org.gradle.api.Incubating public abstract Integer? targetSdk;
    property @org.gradle.api.Incubating public abstract String? targetSdkPreview;
  }

  public interface LibraryBuildFeatures extends com.android.build.api.dsl.BuildFeatures {
    method @org.gradle.api.Incubating public Boolean? getAndroidResources();
    method @org.gradle.api.Incubating public Boolean? getDataBinding();
    method @org.gradle.api.Incubating public Boolean? getMlModelBinding();
    method @org.gradle.api.Incubating public Boolean? getPrefabPublishing();
    method @org.gradle.api.Incubating public void setAndroidResources(Boolean? androidResources);
    method @org.gradle.api.Incubating public void setDataBinding(Boolean? dataBinding);
    method @org.gradle.api.Incubating public void setMlModelBinding(Boolean? mlModelBinding);
    method @org.gradle.api.Incubating public void setPrefabPublishing(Boolean? prefabPublishing);
    property @org.gradle.api.Incubating public abstract Boolean? androidResources;
    property @org.gradle.api.Incubating public abstract Boolean? dataBinding;
    property @org.gradle.api.Incubating public abstract Boolean? mlModelBinding;
    property @org.gradle.api.Incubating public abstract Boolean? prefabPublishing;
  }

  public interface LibraryBuildType extends com.android.build.api.dsl.BuildType com.android.build.api.dsl.LibraryVariantDimension {
    method @org.gradle.api.Incubating public boolean isDefault();
    method @org.gradle.api.Incubating public void setDefault(boolean isDefault);
    property @org.gradle.api.Incubating public abstract boolean isDefault;
  }

  public interface LibraryDefaultConfig extends com.android.build.api.dsl.LibraryBaseFlavor com.android.build.api.dsl.DefaultConfig {
  }

  public interface LibraryExtension extends com.android.build.api.dsl.CommonExtension<com.android.build.api.dsl.LibraryBuildFeatures,com.android.build.api.dsl.LibraryBuildType,com.android.build.api.dsl.LibraryDefaultConfig,com.android.build.api.dsl.LibraryProductFlavor> com.android.build.api.dsl.TestedExtension {
    method @org.gradle.api.Incubating public java.util.Collection<java.lang.String>? getAidlPackagedList();
    method @org.gradle.api.Incubating public org.gradle.api.NamedDomainObjectContainer<com.android.build.api.dsl.PrefabPackagingOptions> getPrefab();
    method public com.android.build.api.dsl.LibraryPublishing getPublishing();
    method public void publishing(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.LibraryPublishing,kotlin.Unit> action);
    property @org.gradle.api.Incubating public abstract java.util.Collection<java.lang.String>? aidlPackagedList;
    property @org.gradle.api.Incubating public abstract org.gradle.api.NamedDomainObjectContainer<com.android.build.api.dsl.PrefabPackagingOptions> prefab;
    property public abstract com.android.build.api.dsl.LibraryPublishing publishing;
  }

  public interface LibraryProductFlavor extends com.android.build.api.dsl.LibraryBaseFlavor com.android.build.api.dsl.ProductFlavor {
    method @org.gradle.api.Incubating public boolean isDefault();
    method @org.gradle.api.Incubating public void setDefault(boolean isDefault);
    property @org.gradle.api.Incubating public abstract boolean isDefault;
  }

  public interface LibraryPublishing extends com.android.build.api.dsl.Publishing<com.android.build.api.dsl.LibrarySingleVariant> {
    method public void multipleVariants(String componentName, kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.MultipleVariants,kotlin.Unit> action);
    method public void multipleVariants(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.MultipleVariants,kotlin.Unit> action);
  }

  public interface LibrarySingleVariant extends com.android.build.api.dsl.SingleVariant {
  }

  public interface LibraryVariantDimension extends com.android.build.api.dsl.VariantDimension {
    method @org.gradle.api.Incubating public void aarMetadata(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AarMetadata,kotlin.Unit> action);
    method @org.gradle.api.Incubating public void aarMetadata(org.gradle.api.Action<com.android.build.api.dsl.AarMetadata> action);
    method @org.gradle.api.Incubating public Object consumerProguardFile(Object proguardFile);
    method @org.gradle.api.Incubating public Object consumerProguardFiles(java.lang.Object... proguardFiles);
    method @org.gradle.api.Incubating public com.android.build.api.dsl.AarMetadata getAarMetadata();
    method @org.gradle.api.Incubating public java.util.List<java.io.File> getConsumerProguardFiles();
    method @org.gradle.api.Incubating public Boolean? getMultiDexEnabled();
    method @org.gradle.api.Incubating public com.android.build.api.dsl.ApkSigningConfig? getSigningConfig();
    method @org.gradle.api.Incubating public void setMultiDexEnabled(Boolean? multiDexEnabled);
    method @org.gradle.api.Incubating public void setSigningConfig(com.android.build.api.dsl.ApkSigningConfig? signingConfig);
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.AarMetadata aarMetadata;
    property @org.gradle.api.Incubating public abstract java.util.List<java.io.File> consumerProguardFiles;
    property @org.gradle.api.Incubating public abstract Boolean? multiDexEnabled;
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.ApkSigningConfig? signingConfig;
  }

  public interface Lint {
    method @org.gradle.api.Incubating public boolean getAbortOnError();
    method @org.gradle.api.Incubating public boolean getAbsolutePaths();
    method @org.gradle.api.Incubating public java.io.File? getBaseline();
    method @org.gradle.api.Incubating public boolean getCheckAllWarnings();
    method @org.gradle.api.Incubating public boolean getCheckDependencies();
    method @org.gradle.api.Incubating public boolean getCheckGeneratedSources();
    method @org.gradle.api.Incubating public java.util.Set<java.lang.String> getCheckOnly();
    method @org.gradle.api.Incubating public boolean getCheckReleaseBuilds();
    method @org.gradle.api.Incubating public boolean getCheckTestSources();
    method @org.gradle.api.Incubating public java.util.Set<java.lang.String> getDisable();
    method @org.gradle.api.Incubating public java.util.Set<java.lang.String> getEnable();
    method @org.gradle.api.Incubating public java.util.Set<java.lang.String> getError();
    method @org.gradle.api.Incubating public boolean getExplainIssues();
    method @org.gradle.api.Incubating public java.util.Set<java.lang.String> getFatal();
    method @org.gradle.api.Incubating public java.io.File? getHtmlOutput();
    method @org.gradle.api.Incubating public boolean getHtmlReport();
    method @Deprecated @org.gradle.api.Incubating public java.util.Set<java.lang.String> getIgnore();
    method @org.gradle.api.Incubating public boolean getIgnoreTestFixturesSources();
    method @org.gradle.api.Incubating public boolean getIgnoreTestSources();
    method @org.gradle.api.Incubating public boolean getIgnoreWarnings();
    method @org.gradle.api.Incubating public java.util.Set<java.lang.String> getInformational();
    method @org.gradle.api.Incubating public java.io.File? getLintConfig();
    method @org.gradle.api.Incubating public boolean getNoLines();
    method @org.gradle.api.Incubating public boolean getQuiet();
    method @org.gradle.api.Incubating public java.io.File? getSarifOutput();
    method @org.gradle.api.Incubating public boolean getSarifReport();
    method @org.gradle.api.Incubating public boolean getShowAll();
    method @org.gradle.api.Incubating public java.io.File? getTextOutput();
    method @org.gradle.api.Incubating public boolean getTextReport();
    method @org.gradle.api.Incubating public java.util.Set<java.lang.String> getWarning();
    method @org.gradle.api.Incubating public boolean getWarningsAsErrors();
    method @org.gradle.api.Incubating public java.io.File? getXmlOutput();
    method @org.gradle.api.Incubating public boolean getXmlReport();
    method @org.gradle.api.Incubating public void setAbortOnError(boolean abortOnError);
    method @org.gradle.api.Incubating public void setAbsolutePaths(boolean absolutePaths);
    method @org.gradle.api.Incubating public void setBaseline(java.io.File? baseline);
    method @org.gradle.api.Incubating public void setCheckAllWarnings(boolean checkAllWarnings);
    method @org.gradle.api.Incubating public void setCheckDependencies(boolean checkDependencies);
    method @org.gradle.api.Incubating public void setCheckGeneratedSources(boolean checkGeneratedSources);
    method @org.gradle.api.Incubating public void setCheckReleaseBuilds(boolean checkReleaseBuilds);
    method @org.gradle.api.Incubating public void setCheckTestSources(boolean checkTestSources);
    method @org.gradle.api.Incubating public void setExplainIssues(boolean explainIssues);
    method @org.gradle.api.Incubating public void setHtmlOutput(java.io.File? htmlOutput);
    method @org.gradle.api.Incubating public void setHtmlReport(boolean htmlReport);
    method @org.gradle.api.Incubating public void setIgnoreTestFixturesSources(boolean ignoreTestFixturesSources);
    method @org.gradle.api.Incubating public void setIgnoreTestSources(boolean ignoreTestSources);
    method @org.gradle.api.Incubating public void setIgnoreWarnings(boolean ignoreWarnings);
    method @org.gradle.api.Incubating public void setLintConfig(java.io.File? lintConfig);
    method @org.gradle.api.Incubating public void setNoLines(boolean noLines);
    method @org.gradle.api.Incubating public void setQuiet(boolean quiet);
    method @org.gradle.api.Incubating public void setSarifOutput(java.io.File? sarifOutput);
    method @org.gradle.api.Incubating public void setSarifReport(boolean sarifReport);
    method @org.gradle.api.Incubating public void setShowAll(boolean showAll);
    method @org.gradle.api.Incubating public void setTextOutput(java.io.File? textOutput);
    method @org.gradle.api.Incubating public void setTextReport(boolean textReport);
    method @org.gradle.api.Incubating public void setWarningsAsErrors(boolean warningsAsErrors);
    method @org.gradle.api.Incubating public void setXmlOutput(java.io.File? xmlOutput);
    method @org.gradle.api.Incubating public void setXmlReport(boolean xmlReport);
    property @org.gradle.api.Incubating public abstract boolean abortOnError;
    property @org.gradle.api.Incubating public abstract boolean absolutePaths;
    property @org.gradle.api.Incubating public abstract java.io.File? baseline;
    property @org.gradle.api.Incubating public abstract boolean checkAllWarnings;
    property @org.gradle.api.Incubating public abstract boolean checkDependencies;
    property @org.gradle.api.Incubating public abstract boolean checkGeneratedSources;
    property @org.gradle.api.Incubating public abstract java.util.Set<java.lang.String> checkOnly;
    property @org.gradle.api.Incubating public abstract boolean checkReleaseBuilds;
    property @org.gradle.api.Incubating public abstract boolean checkTestSources;
    property @org.gradle.api.Incubating public abstract java.util.Set<java.lang.String> disable;
    property @org.gradle.api.Incubating public abstract java.util.Set<java.lang.String> enable;
    property @org.gradle.api.Incubating public abstract java.util.Set<java.lang.String> error;
    property @org.gradle.api.Incubating public abstract boolean explainIssues;
    property @org.gradle.api.Incubating public abstract java.util.Set<java.lang.String> fatal;
    property @org.gradle.api.Incubating public abstract java.io.File? htmlOutput;
    property @org.gradle.api.Incubating public abstract boolean htmlReport;
    property @Deprecated @org.gradle.api.Incubating public abstract java.util.Set<java.lang.String> ignore;
    property @org.gradle.api.Incubating public abstract boolean ignoreTestFixturesSources;
    property @org.gradle.api.Incubating public abstract boolean ignoreTestSources;
    property @org.gradle.api.Incubating public abstract boolean ignoreWarnings;
    property @org.gradle.api.Incubating public abstract java.util.Set<java.lang.String> informational;
    property @org.gradle.api.Incubating public abstract java.io.File? lintConfig;
    property @org.gradle.api.Incubating public abstract boolean noLines;
    property @org.gradle.api.Incubating public abstract boolean quiet;
    property @org.gradle.api.Incubating public abstract java.io.File? sarifOutput;
    property @org.gradle.api.Incubating public abstract boolean sarifReport;
    property @org.gradle.api.Incubating public abstract boolean showAll;
    property @org.gradle.api.Incubating public abstract java.io.File? textOutput;
    property @org.gradle.api.Incubating public abstract boolean textReport;
    property @org.gradle.api.Incubating public abstract java.util.Set<java.lang.String> warning;
    property @org.gradle.api.Incubating public abstract boolean warningsAsErrors;
    property @org.gradle.api.Incubating public abstract java.io.File? xmlOutput;
    property @org.gradle.api.Incubating public abstract boolean xmlReport;
  }

  @Deprecated @org.gradle.api.Incubating public interface LintOptions {
    method @Deprecated @org.gradle.api.Incubating public void baseline(String baseline);
    method @Deprecated @org.gradle.api.Incubating public void baseline(java.io.File baselineFile);
    method @Deprecated @org.gradle.api.Incubating public void check(String id);
    method @Deprecated @org.gradle.api.Incubating public void check(java.lang.String... ids);
    method @Deprecated @org.gradle.api.Incubating public void checkOnly(String id);
    method @Deprecated @org.gradle.api.Incubating public void checkOnly(java.lang.String... ids);
    method @Deprecated @org.gradle.api.Incubating public void disable(String id);
    method @Deprecated @org.gradle.api.Incubating public void disable(java.lang.String... ids);
    method @Deprecated @org.gradle.api.Incubating public void enable(String id);
    method @Deprecated @org.gradle.api.Incubating public void enable(java.lang.String... ids);
    method @Deprecated @org.gradle.api.Incubating public void error(String id);
    method @Deprecated @org.gradle.api.Incubating public void error(java.lang.String... ids);
    method @Deprecated @org.gradle.api.Incubating public void fatal(String id);
    method @Deprecated @org.gradle.api.Incubating public void fatal(java.lang.String... ids);
    method @Deprecated @org.gradle.api.Incubating public java.io.File? getBaselineFile();
    method @Deprecated @org.gradle.api.Incubating public java.util.Set<java.lang.String> getCheckOnly();
    method @Deprecated @org.gradle.api.Incubating public java.util.Set<java.lang.String> getDisable();
    method @Deprecated @org.gradle.api.Incubating public java.util.Set<java.lang.String> getEnable();
    method @Deprecated @org.gradle.api.Incubating public java.io.File? getHtmlOutput();
    method @Deprecated @org.gradle.api.Incubating public boolean getHtmlReport();
    method @Deprecated @org.gradle.api.Incubating public java.io.File? getLintConfig();
    method @Deprecated @org.gradle.api.Incubating public java.io.File? getSarifOutput();
    method @Deprecated @org.gradle.api.Incubating public boolean getSarifReport();
    method @Deprecated @org.gradle.api.Incubating public java.io.File? getTextOutput();
    method @Deprecated @org.gradle.api.Incubating public boolean getTextReport();
    method @Deprecated @org.gradle.api.Incubating public java.io.File? getXmlOutput();
    method @Deprecated @org.gradle.api.Incubating public boolean getXmlReport();
    method @Deprecated @org.gradle.api.Incubating public void ignore(String id);
    method @Deprecated @org.gradle.api.Incubating public void ignore(java.lang.String... ids);
    method @Deprecated @org.gradle.api.Incubating public void informational(String id);
    method @Deprecated @org.gradle.api.Incubating public void informational(java.lang.String... ids);
    method @Deprecated @org.gradle.api.Incubating public boolean isAbortOnError();
    method @Deprecated @org.gradle.api.Incubating public boolean isAbsolutePaths();
    method @Deprecated @org.gradle.api.Incubating public boolean isCheckAllWarnings();
    method @Deprecated @org.gradle.api.Incubating public boolean isCheckDependencies();
    method @Deprecated @org.gradle.api.Incubating public boolean isCheckGeneratedSources();
    method @Deprecated @org.gradle.api.Incubating public boolean isCheckReleaseBuilds();
    method @Deprecated @org.gradle.api.Incubating public boolean isCheckTestSources();
    method @Deprecated @org.gradle.api.Incubating public boolean isExplainIssues();
    method @Deprecated @org.gradle.api.Incubating public boolean isIgnoreTestSources();
    method @Deprecated @org.gradle.api.Incubating public boolean isIgnoreWarnings();
    method @Deprecated @org.gradle.api.Incubating public boolean isNoLines();
    method @Deprecated @org.gradle.api.Incubating public boolean isQuiet();
    method @Deprecated @org.gradle.api.Incubating public boolean isShowAll();
    method @Deprecated @org.gradle.api.Incubating public boolean isWarningsAsErrors();
    method @Deprecated @org.gradle.api.Incubating public void setAbortOnError(boolean isAbortOnError);
    method @Deprecated @org.gradle.api.Incubating public void setAbsolutePaths(boolean isAbsolutePaths);
    method @Deprecated @org.gradle.api.Incubating public void setBaselineFile(java.io.File? baselineFile);
    method @Deprecated @org.gradle.api.Incubating public void setCheckAllWarnings(boolean isCheckAllWarnings);
    method @Deprecated @org.gradle.api.Incubating public void setCheckDependencies(boolean isCheckDependencies);
    method @Deprecated @org.gradle.api.Incubating public void setCheckGeneratedSources(boolean isCheckGeneratedSources);
    method @Deprecated @org.gradle.api.Incubating public void setCheckReleaseBuilds(boolean isCheckReleaseBuilds);
    method @Deprecated @org.gradle.api.Incubating public void setCheckTestSources(boolean isCheckTestSources);
    method @Deprecated @org.gradle.api.Incubating public void setExplainIssues(boolean isExplainIssues);
    method @Deprecated @org.gradle.api.Incubating public void setHtmlOutput(java.io.File? htmlOutput);
    method @Deprecated @org.gradle.api.Incubating public void setHtmlReport(boolean htmlReport);
    method @Deprecated @org.gradle.api.Incubating public void setIgnoreTestSources(boolean isIgnoreTestSources);
    method @Deprecated @org.gradle.api.Incubating public void setIgnoreWarnings(boolean isIgnoreWarnings);
    method @Deprecated @org.gradle.api.Incubating public void setLintConfig(java.io.File? lintConfig);
    method @Deprecated @org.gradle.api.Incubating public void setNoLines(boolean isNoLines);
    method @Deprecated @org.gradle.api.Incubating public void setQuiet(boolean isQuiet);
    method @Deprecated @org.gradle.api.Incubating public void setSarifOutput(java.io.File? sarifOutput);
    method @Deprecated @org.gradle.api.Incubating public void setSarifReport(boolean sarifReport);
    method @Deprecated @org.gradle.api.Incubating public void setShowAll(boolean isShowAll);
    method @Deprecated @org.gradle.api.Incubating public void setTextOutput(java.io.File? textOutput);
    method @Deprecated @org.gradle.api.Incubating public void setTextReport(boolean textReport);
    method @Deprecated @org.gradle.api.Incubating public void setWarningsAsErrors(boolean isWarningsAsErrors);
    method @Deprecated @org.gradle.api.Incubating public void setXmlOutput(java.io.File? xmlOutput);
    method @Deprecated @org.gradle.api.Incubating public void setXmlReport(boolean xmlReport);
    method @Deprecated @org.gradle.api.Incubating public void textOutput(String textOutput);
    method @Deprecated @org.gradle.api.Incubating public void textOutput(java.io.File textOutput);
    method @Deprecated @org.gradle.api.Incubating public void warning(String id);
    method @Deprecated @org.gradle.api.Incubating public void warning(java.lang.String... ids);
    property @Deprecated @org.gradle.api.Incubating public abstract java.io.File? baselineFile;
    property @Deprecated @org.gradle.api.Incubating public abstract java.util.Set<java.lang.String> checkOnly;
    property @Deprecated @org.gradle.api.Incubating public abstract java.util.Set<java.lang.String> disable;
    property @Deprecated @org.gradle.api.Incubating public abstract java.util.Set<java.lang.String> enable;
    property @Deprecated @org.gradle.api.Incubating public abstract java.io.File? htmlOutput;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean htmlReport;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean isAbortOnError;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean isAbsolutePaths;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean isCheckAllWarnings;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean isCheckDependencies;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean isCheckGeneratedSources;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean isCheckReleaseBuilds;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean isCheckTestSources;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean isExplainIssues;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean isIgnoreTestSources;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean isIgnoreWarnings;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean isNoLines;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean isQuiet;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean isShowAll;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean isWarningsAsErrors;
    property @Deprecated @org.gradle.api.Incubating public abstract java.io.File? lintConfig;
    property @Deprecated @org.gradle.api.Incubating public abstract java.io.File? sarifOutput;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean sarifReport;
    property @Deprecated @org.gradle.api.Incubating public abstract java.io.File? textOutput;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean textReport;
    property @Deprecated @org.gradle.api.Incubating public abstract java.io.File? xmlOutput;
    property @Deprecated @org.gradle.api.Incubating public abstract boolean xmlReport;
  }

  @org.gradle.api.Incubating public interface ManagedDevices {
    method public org.gradle.api.ExtensiblePolymorphicDomainObjectContainer<com.android.build.api.dsl.Device> getDevices();
    method public org.gradle.api.NamedDomainObjectContainer<com.android.build.api.dsl.DeviceGroup> getGroups();
    property public abstract org.gradle.api.ExtensiblePolymorphicDomainObjectContainer<com.android.build.api.dsl.Device> devices;
    property public abstract org.gradle.api.NamedDomainObjectContainer<com.android.build.api.dsl.DeviceGroup> groups;
  }

  @org.gradle.api.Incubating public interface ManagedVirtualDevice extends com.android.build.api.dsl.Device {
    method public String getAbi();
    method public int getApiLevel();
    method public String getDevice();
    method public boolean getRequire64Bit();
    method public String getSystemImageSource();
    method public void setAbi(String abi);
    method public void setApiLevel(int apiLevel);
    method public void setDevice(String device);
    method public void setRequire64Bit(boolean require64Bit);
    method public void setSystemImageSource(String systemImageSource);
    property public abstract String abi;
    property public abstract int apiLevel;
    property public abstract String device;
    property public abstract boolean require64Bit;
    property public abstract String systemImageSource;
  }

  public interface MultipleVariants extends com.android.build.api.dsl.PublishingOptions {
    method public void allVariants();
    method public void includeBuildTypeValues(java.lang.String... buildTypes);
    method public void includeFlavorDimensionAndValues(String dimension, java.lang.String... values);
  }

  @org.gradle.api.Incubating public interface Ndk {
    method public java.util.Set<java.lang.String> getAbiFilters();
    method public String? getCFlags();
    method public String? getDebugSymbolLevel();
    method public Integer? getJobs();
    method public java.util.List<java.lang.String>? getLdLibs();
    method public String? getModuleName();
    method public String? getStl();
    method public void setCFlags(String? cFlags);
    method public void setDebugSymbolLevel(String? debugSymbolLevel);
    method public void setJobs(Integer? jobs);
    method public void setModuleName(String? moduleName);
    method public void setStl(String? stl);
    property public abstract java.util.Set<java.lang.String> abiFilters;
    property public abstract String? cFlags;
    property public abstract String? debugSymbolLevel;
    property public abstract Integer? jobs;
    property public abstract java.util.List<java.lang.String>? ldLibs;
    property public abstract String? moduleName;
    property public abstract String? stl;
  }

  public interface NdkBuild {
    method public void buildStagingDirectory(Object any);
    method public java.io.File? getBuildStagingDirectory();
    method public java.io.File? getPath();
    method public void path(Object any);
    method public void setBuildStagingDirectory(java.io.File? buildStagingDirectory);
    method public void setPath(java.io.File? path);
    property public abstract java.io.File? buildStagingDirectory;
    property public abstract java.io.File? path;
  }

  @org.gradle.api.Incubating public interface Optimization {
    method @org.gradle.api.Incubating public void keepRules(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.KeepRules,kotlin.Unit> action);
  }

  @org.gradle.api.Incubating public interface PackagingOptions {
    method public void dex(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.DexPackagingOptions,kotlin.Unit> action);
    method @Deprecated public void doNotStrip(String pattern);
    method @Deprecated public void exclude(String pattern);
    method public com.android.build.api.dsl.DexPackagingOptions getDex();
    method @Deprecated public java.util.Set<java.lang.String> getDoNotStrip();
    method @Deprecated public java.util.Set<java.lang.String> getExcludes();
    method public com.android.build.api.dsl.JniLibsPackagingOptions getJniLibs();
    method @Deprecated public java.util.Set<java.lang.String> getMerges();
    method @Deprecated public java.util.Set<java.lang.String> getPickFirsts();
    method public com.android.build.api.dsl.ResourcesPackagingOptions getResources();
    method public void jniLibs(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.JniLibsPackagingOptions,kotlin.Unit> action);
    method @Deprecated public void merge(String pattern);
    method @Deprecated public void pickFirst(String pattern);
    method public void resources(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.ResourcesPackagingOptions,kotlin.Unit> action);
    property public abstract com.android.build.api.dsl.DexPackagingOptions dex;
    property @Deprecated public abstract java.util.Set<java.lang.String> doNotStrip;
    property @Deprecated public abstract java.util.Set<java.lang.String> excludes;
    property public abstract com.android.build.api.dsl.JniLibsPackagingOptions jniLibs;
    property @Deprecated public abstract java.util.Set<java.lang.String> merges;
    property @Deprecated public abstract java.util.Set<java.lang.String> pickFirsts;
    property public abstract com.android.build.api.dsl.ResourcesPackagingOptions resources;
  }

  @org.gradle.api.Incubating public interface PostProcessing {
    method public void consumerProguardFile(Object file);
    method public void consumerProguardFiles(java.lang.Object... files);
    method @Deprecated public String getCodeShrinker();
    method public void initWith(com.android.build.api.dsl.PostProcessing that);
    method public boolean isObfuscate();
    method public boolean isOptimizeCode();
    method public boolean isRemoveUnusedCode();
    method public boolean isRemoveUnusedResources();
    method public void proguardFile(Object file);
    method public void proguardFiles(java.lang.Object... files);
    method @Deprecated public void setCodeShrinker(String codeShrinker);
    method public void setConsumerProguardFiles(java.util.List<?> consumerProguardFiles);
    method public void setObfuscate(boolean isObfuscate);
    method public void setOptimizeCode(boolean isOptimizeCode);
    method public void setProguardFiles(java.util.List<?> proguardFiles);
    method public void setRemoveUnusedCode(boolean isRemoveUnusedCode);
    method public void setRemoveUnusedResources(boolean isRemoveUnusedResources);
    method public void setTestProguardFiles(java.util.List<?> testProguardFiles);
    method public void testProguardFile(Object file);
    method public void testProguardFiles(java.lang.Object... files);
    property @Deprecated public abstract String codeShrinker;
    property public abstract boolean isObfuscate;
    property public abstract boolean isOptimizeCode;
    property public abstract boolean isRemoveUnusedCode;
    property public abstract boolean isRemoveUnusedResources;
  }

  @org.gradle.api.Incubating public interface PrefabPackagingOptions {
    method public boolean getHeaderOnly();
    method public String? getHeaders();
    method public String? getLibraryName();
    method public String getName();
    method public void setHeaderOnly(boolean headerOnly);
    method public void setHeaders(String? headers);
    method public void setLibraryName(String? libraryName);
    method public void setName(String name);
    property public abstract boolean headerOnly;
    property public abstract String? headers;
    property public abstract String? libraryName;
    property public abstract String name;
  }

  public interface ProductFlavor extends org.gradle.api.Named com.android.build.api.dsl.BaseFlavor org.gradle.api.plugins.ExtensionAware com.android.build.api.dsl.HasInitWith<com.android.build.api.dsl.BaseFlavor> {
    method public String? getDimension();
    method @org.gradle.api.Incubating public java.util.List<java.lang.String> getMatchingFallbacks();
    method public void setDimension(String? dimension);
    method @Deprecated @org.gradle.api.Incubating public Void? setDimension(String? dimension);
    method @Deprecated @org.gradle.api.Incubating public void setMatchingFallbacks(java.lang.String... fallbacks);
    method @Deprecated @org.gradle.api.Incubating public void setMatchingFallbacks(java.util.List<java.lang.String> fallbacks);
    property public abstract String? dimension;
    property @org.gradle.api.Incubating public abstract java.util.List<java.lang.String> matchingFallbacks;
  }

  public interface Publishing<SingleVariantT extends com.android.build.api.dsl.SingleVariant> {
    method public void singleVariant(String variantName);
    method public void singleVariant(String variantName, kotlin.jvm.functions.Function1<? super SingleVariantT,kotlin.Unit> action);
  }

  public interface PublishingOptions {
    method public void withJavadocJar();
    method public void withSourcesJar();
  }

  @org.gradle.api.Incubating public interface ResourcesPackagingOptions {
    method public java.util.Set<java.lang.String> getExcludes();
    method public java.util.Set<java.lang.String> getMerges();
    method public java.util.Set<java.lang.String> getPickFirsts();
    property public abstract java.util.Set<java.lang.String> excludes;
    property public abstract java.util.Set<java.lang.String> merges;
    property public abstract java.util.Set<java.lang.String> pickFirsts;
  }

  @org.gradle.api.Incubating public interface SdkComponents {
    method public org.gradle.api.provider.Provider<org.gradle.api.file.RegularFile> getAdb();
    method public org.gradle.api.provider.Provider<java.util.List<org.gradle.api.file.RegularFile>> getBootClasspath();
    method public org.gradle.api.provider.Provider<org.gradle.api.file.Directory> getNdkDirectory();
    method public org.gradle.api.provider.Provider<org.gradle.api.file.Directory> getSdkDirectory();
    property public abstract org.gradle.api.provider.Provider<org.gradle.api.file.RegularFile> adb;
    property public abstract org.gradle.api.provider.Provider<java.util.List<org.gradle.api.file.RegularFile>> bootClasspath;
    property public abstract org.gradle.api.provider.Provider<org.gradle.api.file.Directory> ndkDirectory;
    property public abstract org.gradle.api.provider.Provider<org.gradle.api.file.Directory> sdkDirectory;
  }

  @org.gradle.api.Incubating public interface Shaders {
    method public java.util.List<java.lang.String> getGlslcArgs();
    method public com.google.common.collect.ListMultimap<java.lang.String,java.lang.String> getScopedGlslcArgs();
    method public void glslcArgs(java.lang.String... options);
    method public void glslcScopedArgs(String key, java.lang.String... options);
    property public abstract java.util.List<java.lang.String> glslcArgs;
    property public abstract com.google.common.collect.ListMultimap<java.lang.String,java.lang.String> scopedGlslcArgs;
  }

  public interface SigningConfig {
    method @org.gradle.api.Incubating public String? getKeyAlias();
    method @org.gradle.api.Incubating public String? getKeyPassword();
    method @org.gradle.api.Incubating public java.io.File? getStoreFile();
    method @org.gradle.api.Incubating public String? getStorePassword();
    method @org.gradle.api.Incubating public String? getStoreType();
    method @org.gradle.api.Incubating public void initWith(com.android.build.api.dsl.SigningConfig that);
    method @org.gradle.api.Incubating public void setKeyAlias(String? keyAlias);
    method @org.gradle.api.Incubating public void setKeyPassword(String? keyPassword);
    method @org.gradle.api.Incubating public void setStoreFile(java.io.File? storeFile);
    method @org.gradle.api.Incubating public void setStorePassword(String? storePassword);
    method @org.gradle.api.Incubating public void setStoreType(String? storeType);
    property @org.gradle.api.Incubating public abstract String? keyAlias;
    property @org.gradle.api.Incubating public abstract String? keyPassword;
    property @org.gradle.api.Incubating public abstract java.io.File? storeFile;
    property @org.gradle.api.Incubating public abstract String? storePassword;
    property @org.gradle.api.Incubating public abstract String? storeType;
  }

  public interface SingleVariant extends com.android.build.api.dsl.PublishingOptions {
    method public String getVariantName();
    property public abstract String variantName;
  }

  public interface Split {
    method @org.gradle.api.Incubating public void exclude(java.lang.String... excludes);
    method @org.gradle.api.Incubating public void include(java.lang.String... includes);
    method @org.gradle.api.Incubating public boolean isEnable();
    method @org.gradle.api.Incubating public void reset();
    method @org.gradle.api.Incubating public void setEnable(boolean isEnable);
    property @org.gradle.api.Incubating public abstract boolean isEnable;
  }

  @org.gradle.api.Incubating public interface Splits {
    method public void abi(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AbiSplit,kotlin.Unit> action);
    method public void density(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.DensitySplit,kotlin.Unit> action);
    method public com.android.build.api.dsl.AbiSplit getAbi();
    method public java.util.Collection<java.lang.String> getAbiFilters();
    method public com.android.build.api.dsl.DensitySplit getDensity();
    method public java.util.Collection<java.lang.String> getDensityFilters();
    property public abstract com.android.build.api.dsl.AbiSplit abi;
    property public abstract java.util.Collection<java.lang.String> abiFilters;
    property public abstract com.android.build.api.dsl.DensitySplit density;
    property public abstract java.util.Collection<java.lang.String> densityFilters;
  }

  @org.gradle.api.Incubating public interface StoreArchive {
    method @org.gradle.api.Incubating public Boolean? getEnable();
    method @org.gradle.api.Incubating public void setEnable(Boolean? enable);
    property @org.gradle.api.Incubating public abstract Boolean? enable;
  }

  public interface TestBaseFlavor extends com.android.build.api.dsl.BaseFlavor com.android.build.api.dsl.TestVariantDimension {
    method @org.gradle.api.Incubating public Integer? getMaxSdk();
    method @org.gradle.api.Incubating public Integer? getTargetSdk();
    method @org.gradle.api.Incubating public String? getTargetSdkPreview();
    method @Deprecated @org.gradle.api.Incubating public void maxSdkVersion(int maxSdkVersion);
    method @org.gradle.api.Incubating public void setMaxSdk(Integer? maxSdk);
    method @org.gradle.api.Incubating public void setTargetSdk(Integer? targetSdk);
    method @org.gradle.api.Incubating public void setTargetSdkPreview(String? targetSdkPreview);
    method @Deprecated @org.gradle.api.Incubating public void setTargetSdkVersion(String? targetSdkVersion);
    method @Deprecated @org.gradle.api.Incubating public void targetSdkVersion(int targetSdkVersion);
    method @Deprecated @org.gradle.api.Incubating public void targetSdkVersion(String? targetSdkVersion);
    property @org.gradle.api.Incubating public abstract Integer? maxSdk;
    property @org.gradle.api.Incubating public abstract Integer? targetSdk;
    property @org.gradle.api.Incubating public abstract String? targetSdkPreview;
  }

  public interface TestBuildFeatures extends com.android.build.api.dsl.BuildFeatures {
  }

  public interface TestBuildType extends com.android.build.api.dsl.BuildType com.android.build.api.dsl.TestVariantDimension {
    method @org.gradle.api.Incubating public Boolean? isCrunchPngs();
    method @org.gradle.api.Incubating public boolean isDebuggable();
    method @org.gradle.api.Incubating public void setCrunchPngs(Boolean? isCrunchPngs);
    method @org.gradle.api.Incubating public void setDebuggable(boolean isDebuggable);
    property @org.gradle.api.Incubating public abstract Boolean? isCrunchPngs;
    property @org.gradle.api.Incubating public abstract boolean isDebuggable;
  }

  public interface TestCoverage {
    method public String getJacocoVersion();
    method public void setJacocoVersion(String jacocoVersion);
    property public abstract String jacocoVersion;
  }

  public interface TestDefaultConfig extends com.android.build.api.dsl.TestBaseFlavor com.android.build.api.dsl.DefaultConfig {
  }

  public interface TestExtension extends com.android.build.api.dsl.CommonExtension<com.android.build.api.dsl.TestBuildFeatures,com.android.build.api.dsl.TestBuildType,com.android.build.api.dsl.TestDefaultConfig,com.android.build.api.dsl.TestProductFlavor> {
    method @org.gradle.api.Incubating public String? getTargetProjectPath();
    method @org.gradle.api.Incubating public void setTargetProjectPath(String? targetProjectPath);
    property @org.gradle.api.Incubating public abstract String? targetProjectPath;
  }

  @org.gradle.api.Incubating public interface TestFixtures {
    method public boolean getAndroidResources();
    method public boolean getEnable();
    method public void setAndroidResources(boolean androidResources);
    method public void setEnable(boolean enable);
    property public abstract boolean androidResources;
    property public abstract boolean enable;
  }

  @org.gradle.api.Incubating public interface TestOptions {
    method public void emulatorSnapshots(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.EmulatorSnapshots,kotlin.Unit> action);
    method @Deprecated public void failureRetention(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.FailureRetention,kotlin.Unit> action);
    method public boolean getAnimationsDisabled();
    method public org.gradle.api.NamedDomainObjectContainer<com.android.build.api.dsl.DeviceGroup> getDeviceGroups();
    method public org.gradle.api.ExtensiblePolymorphicDomainObjectContainer<com.android.build.api.dsl.Device> getDevices();
    method public com.android.build.api.dsl.EmulatorSnapshots getEmulatorSnapshots();
    method public String getExecution();
    method @Deprecated public com.android.build.api.dsl.FailureRetention getFailureRetention();
    method public com.android.build.api.dsl.ManagedDevices getManagedDevices();
    method public String? getReportDir();
    method public String? getResultsDir();
    method public com.android.build.api.dsl.UnitTestOptions getUnitTests();
    method public void managedDevices(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.ManagedDevices,kotlin.Unit> action);
    method public void setAnimationsDisabled(boolean animationsDisabled);
    method public void setExecution(String execution);
    method public void setReportDir(String? reportDir);
    method public void setResultsDir(String? resultsDir);
    method public void unitTests(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.UnitTestOptions,kotlin.Unit> action);
    property public abstract boolean animationsDisabled;
    property public abstract org.gradle.api.NamedDomainObjectContainer<com.android.build.api.dsl.DeviceGroup> deviceGroups;
    property public abstract org.gradle.api.ExtensiblePolymorphicDomainObjectContainer<com.android.build.api.dsl.Device> devices;
    property public abstract com.android.build.api.dsl.EmulatorSnapshots emulatorSnapshots;
    property public abstract String execution;
    property @Deprecated public abstract com.android.build.api.dsl.FailureRetention failureRetention;
    property public abstract com.android.build.api.dsl.ManagedDevices managedDevices;
    property public abstract String? reportDir;
    property public abstract String? resultsDir;
    property public abstract com.android.build.api.dsl.UnitTestOptions unitTests;
  }

  public interface TestProductFlavor extends com.android.build.api.dsl.TestBaseFlavor com.android.build.api.dsl.ProductFlavor {
  }

  public interface TestVariantDimension extends com.android.build.api.dsl.VariantDimension {
    method @org.gradle.api.Incubating public Boolean? getMultiDexEnabled();
    method @org.gradle.api.Incubating public com.android.build.api.dsl.ApkSigningConfig? getSigningConfig();
    method @org.gradle.api.Incubating public void setMultiDexEnabled(Boolean? multiDexEnabled);
    method @org.gradle.api.Incubating public void setSigningConfig(com.android.build.api.dsl.ApkSigningConfig? signingConfig);
    property @org.gradle.api.Incubating public abstract Boolean? multiDexEnabled;
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.ApkSigningConfig? signingConfig;
  }

  @org.gradle.api.Incubating public interface TestedExtension {
    method public String getTestBuildType();
    method public com.android.build.api.dsl.TestFixtures getTestFixtures();
    method public String? getTestNamespace();
    method public void setTestBuildType(String testBuildType);
    method public void setTestNamespace(String? testNamespace);
    method public void testFixtures(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.TestFixtures,kotlin.Unit> action);
    property public abstract String testBuildType;
    property public abstract com.android.build.api.dsl.TestFixtures testFixtures;
    property public abstract String? testNamespace;
  }

  @org.gradle.api.Incubating public interface UnitTestOptions {
    method public void all(kotlin.jvm.functions.Function1<? super org.gradle.api.tasks.testing.Test,kotlin.Unit> configAction);
    method public boolean isIncludeAndroidResources();
    method public boolean isReturnDefaultValues();
    method public void setIncludeAndroidResources(boolean isIncludeAndroidResources);
    method public void setReturnDefaultValues(boolean isReturnDefaultValues);
    property public abstract boolean isIncludeAndroidResources;
    property public abstract boolean isReturnDefaultValues;
  }

  public interface VariantDimension {
    method @org.gradle.api.Incubating public void addManifestPlaceholders(java.util.Map<java.lang.String,?> manifestPlaceholders);
    method @org.gradle.api.Incubating public void buildConfigField(String type, String name, String value);
    method @org.gradle.api.Incubating public void externalNativeBuild(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.ExternalNativeBuildOptions,kotlin.Unit> action);
    method @org.gradle.api.Incubating public com.android.build.api.dsl.ExternalNativeBuildOptions getExternalNativeBuild();
    method public com.android.build.api.dsl.JavaCompileOptions getJavaCompileOptions();
    method @org.gradle.api.Incubating public java.util.Map<java.lang.String,java.lang.Object> getManifestPlaceholders();
    method @Deprecated @org.gradle.api.Incubating public java.io.File? getMultiDexKeepFile();
    method @org.gradle.api.Incubating public java.io.File? getMultiDexKeepProguard();
    method @org.gradle.api.Incubating public com.android.build.api.dsl.Ndk getNdk();
    method @org.gradle.api.Incubating public com.android.build.api.dsl.Optimization getOptimization();
    method @org.gradle.api.Incubating public java.util.List<java.io.File> getProguardFiles();
    method @org.gradle.api.Incubating public com.android.build.api.dsl.Shaders getShaders();
    method @org.gradle.api.Incubating public java.util.List<java.io.File> getTestProguardFiles();
    method public void javaCompileOptions(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.JavaCompileOptions,kotlin.Unit> action);
    method @org.gradle.api.Incubating public void ndk(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.Ndk,kotlin.Unit> action);
    method @org.gradle.api.Incubating public void optimization(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.Optimization,kotlin.Unit> action);
    method @org.gradle.api.Incubating public Object proguardFile(Object proguardFile);
    method @org.gradle.api.Incubating public Object proguardFiles(java.lang.Object... files);
    method @org.gradle.api.Incubating public void resValue(String type, String name, String value);
    method @Deprecated @org.gradle.api.Incubating public Void? setManifestPlaceholders(java.util.Map<java.lang.String,?> manifestPlaceholders);
    method @Deprecated @org.gradle.api.Incubating public void setMultiDexKeepFile(java.io.File? multiDexKeepFile);
    method @org.gradle.api.Incubating public void setMultiDexKeepProguard(java.io.File? multiDexKeepProguard);
    method @org.gradle.api.Incubating public Object setProguardFiles(Iterable<?> proguardFileIterable);
    method @org.gradle.api.Incubating public void shaders(kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.Shaders,kotlin.Unit> action);
    method @org.gradle.api.Incubating public Object testProguardFile(Object proguardFile);
    method @org.gradle.api.Incubating public Object testProguardFiles(java.lang.Object... proguardFiles);
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.ExternalNativeBuildOptions externalNativeBuild;
    property public abstract com.android.build.api.dsl.JavaCompileOptions javaCompileOptions;
    property @org.gradle.api.Incubating public abstract java.util.Map<java.lang.String,java.lang.Object> manifestPlaceholders;
    property @Deprecated @org.gradle.api.Incubating public abstract java.io.File? multiDexKeepFile;
    property @org.gradle.api.Incubating public abstract java.io.File? multiDexKeepProguard;
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.Ndk ndk;
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.Optimization optimization;
    property @org.gradle.api.Incubating public abstract java.util.List<java.io.File> proguardFiles;
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.Shaders shaders;
    property @org.gradle.api.Incubating public abstract java.util.List<java.io.File> testProguardFiles;
  }

  @org.gradle.api.Incubating public interface VectorDrawables {
    method public void generatedDensities(java.lang.String... densities);
    method public java.util.Set<java.lang.String>? getGeneratedDensities();
    method public Boolean? getUseSupportLibrary();
    method public void setUseSupportLibrary(Boolean? useSupportLibrary);
    property public abstract java.util.Set<java.lang.String>? generatedDensities;
    property public abstract Boolean? useSupportLibrary;
  }

  public interface ViewBinding {
    method public boolean getEnable();
    method public void setEnable(boolean enable);
    property public abstract boolean enable;
  }

}

package com.android.build.api.instrumentation {

  public interface AsmClassVisitorFactory<ParametersT extends com.android.build.api.instrumentation.InstrumentationParameters> extends java.io.Serializable {
    method public org.objectweb.asm.ClassVisitor createClassVisitor(com.android.build.api.instrumentation.ClassContext classContext, org.objectweb.asm.ClassVisitor nextClassVisitor);
    method @org.gradle.api.tasks.Nested public com.android.build.api.instrumentation.InstrumentationContext getInstrumentationContext();
    method @org.gradle.api.tasks.Nested public org.gradle.api.provider.Property<ParametersT> getParameters();
    method public boolean isInstrumentable(com.android.build.api.instrumentation.ClassData classData);
    property @org.gradle.api.tasks.Nested public abstract com.android.build.api.instrumentation.InstrumentationContext instrumentationContext;
    property @org.gradle.api.tasks.Nested public abstract org.gradle.api.provider.Property<ParametersT> parameters;
  }

  public interface ClassContext {
    method public com.android.build.api.instrumentation.ClassData getCurrentClassData();
    method public com.android.build.api.instrumentation.ClassData? loadClassData(String className);
    property public abstract com.android.build.api.instrumentation.ClassData currentClassData;
  }

  public interface ClassData {
    method public java.util.List<java.lang.String> getClassAnnotations();
    method public String getClassName();
    method public java.util.List<java.lang.String> getInterfaces();
    method public java.util.List<java.lang.String> getSuperClasses();
    property public abstract java.util.List<java.lang.String> classAnnotations;
    property public abstract String className;
    property public abstract java.util.List<java.lang.String> interfaces;
    property public abstract java.util.List<java.lang.String> superClasses;
  }

  public enum FramesComputationMode {
    enum_constant public static final com.android.build.api.instrumentation.FramesComputationMode COMPUTE_FRAMES_FOR_ALL_CLASSES;
    enum_constant public static final com.android.build.api.instrumentation.FramesComputationMode COMPUTE_FRAMES_FOR_INSTRUMENTED_CLASSES;
    enum_constant public static final com.android.build.api.instrumentation.FramesComputationMode COMPUTE_FRAMES_FOR_INSTRUMENTED_METHODS;
    enum_constant public static final com.android.build.api.instrumentation.FramesComputationMode COPY_FRAMES;
  }

  public interface InstrumentationContext extends java.io.Serializable {
    method @org.gradle.api.tasks.Input public org.gradle.api.provider.Property<java.lang.Integer> getApiVersion();
    property @org.gradle.api.tasks.Input public abstract org.gradle.api.provider.Property<java.lang.Integer> apiVersion;
  }

  public interface InstrumentationParameters extends java.io.Serializable {
  }

  public static final class InstrumentationParameters.None implements com.android.build.api.instrumentation.InstrumentationParameters {
    ctor public InstrumentationParameters.None();
  }

  public enum InstrumentationScope {
    enum_constant public static final com.android.build.api.instrumentation.InstrumentationScope ALL;
    enum_constant public static final com.android.build.api.instrumentation.InstrumentationScope PROJECT;
  }

}

package com.android.build.api.transform {

  @Deprecated public interface Context {
    method @Deprecated public org.gradle.api.logging.LoggingManager! getLogging();
    method @Deprecated public String! getPath();
    method @Deprecated public String! getProjectName();
    method @Deprecated public java.io.File! getTemporaryDir();
    method @Deprecated public String getVariantName();
    method @Deprecated public org.gradle.workers.WorkerExecutor getWorkerExecutor();
  }

  @Deprecated public interface DirectoryInput extends com.android.build.api.transform.QualifiedContent {
    method @Deprecated public java.util.Map<java.io.File!,com.android.build.api.transform.Status!> getChangedFiles();
  }

  @Deprecated public enum Format {
    enum_constant @Deprecated public static final com.android.build.api.transform.Format DIRECTORY;
    enum_constant @Deprecated public static final com.android.build.api.transform.Format JAR;
  }

  @Deprecated public interface JarInput extends com.android.build.api.transform.QualifiedContent {
    method @Deprecated public com.android.build.api.transform.Status getStatus();
  }

  @Deprecated public interface QualifiedContent {
    method @Deprecated public java.util.Set<com.android.build.api.transform.QualifiedContent.ContentType!> getContentTypes();
    method @Deprecated public java.io.File getFile();
    method @Deprecated public String getName();
    method @Deprecated public java.util.Set<? super com.android.build.api.transform.QualifiedContent.Scope> getScopes();
  }

  @Deprecated public static interface QualifiedContent.ContentType {
    method @Deprecated public int getValue();
    method @Deprecated public String! name();
  }

  @Deprecated public enum QualifiedContent.DefaultContentType implements com.android.build.api.transform.QualifiedContent.ContentType {
    method @Deprecated public int getValue();
    enum_constant @Deprecated public static final com.android.build.api.transform.QualifiedContent.DefaultContentType CLASSES;
    enum_constant @Deprecated public static final com.android.build.api.transform.QualifiedContent.DefaultContentType RESOURCES;
  }

  @Deprecated public enum QualifiedContent.Scope implements com.android.build.api.transform.QualifiedContent.ScopeType {
    method @Deprecated public int getValue();
    enum_constant @Deprecated public static final com.android.build.api.transform.QualifiedContent.Scope EXTERNAL_LIBRARIES;
    enum_constant @Deprecated public static final com.android.build.api.transform.QualifiedContent.Scope PROJECT;
    enum_constant @Deprecated public static final com.android.build.api.transform.QualifiedContent.Scope PROJECT_LOCAL_DEPS;
    enum_constant @Deprecated public static final com.android.build.api.transform.QualifiedContent.Scope PROVIDED_ONLY;
    enum_constant @Deprecated public static final com.android.build.api.transform.QualifiedContent.Scope SUB_PROJECTS;
    enum_constant @Deprecated public static final com.android.build.api.transform.QualifiedContent.Scope SUB_PROJECTS_LOCAL_DEPS;
    enum_constant @Deprecated public static final com.android.build.api.transform.QualifiedContent.Scope TESTED_CODE;
  }

  @Deprecated public static interface QualifiedContent.ScopeType {
    method @Deprecated public int getValue();
    method @Deprecated public String! name();
  }

  @Deprecated public class SecondaryFile {
    ctor @Deprecated public SecondaryFile(java.io.File, boolean);
    method @Deprecated public java.io.File! getFile();
    method @Deprecated public org.gradle.api.file.FileCollection! getFileCollection(org.gradle.api.Project);
    method @Deprecated public org.gradle.api.file.FileCollection? getFileCollection();
    method @Deprecated public static com.android.build.api.transform.SecondaryFile! incremental(java.io.File);
    method @Deprecated public static com.android.build.api.transform.SecondaryFile! incremental(org.gradle.api.file.FileCollection);
    method @Deprecated public static com.android.build.api.transform.SecondaryFile! incremental(java.util.function.Supplier<org.gradle.api.file.FileCollection!>);
    method @Deprecated public static com.android.build.api.transform.SecondaryFile! nonIncremental(java.io.File);
    method @Deprecated public static com.android.build.api.transform.SecondaryFile! nonIncremental(org.gradle.api.file.FileCollection);
    method @Deprecated public static com.android.build.api.transform.SecondaryFile! nonIncremental(java.util.function.Supplier<org.gradle.api.file.FileCollection!>);
    method @Deprecated public boolean supportsIncrementalBuild();
  }

  @Deprecated public interface SecondaryInput {
    method @Deprecated public com.android.build.api.transform.SecondaryFile! getSecondaryInput();
    method @Deprecated public com.android.build.api.transform.Status! getStatus();
  }

  @Deprecated public enum Status {
    enum_constant @Deprecated public static final com.android.build.api.transform.Status ADDED;
    enum_constant @Deprecated public static final com.android.build.api.transform.Status CHANGED;
    enum_constant @Deprecated public static final com.android.build.api.transform.Status NOTCHANGED;
    enum_constant @Deprecated public static final com.android.build.api.transform.Status REMOVED;
  }

  @Deprecated public abstract class Transform {
    ctor @Deprecated public Transform();
    method @Deprecated @org.gradle.api.Incubating public boolean applyToVariant(com.android.build.api.variant.VariantInfo);
    method @Deprecated public abstract java.util.Set<com.android.build.api.transform.QualifiedContent.ContentType!> getInputTypes();
    method @Deprecated public abstract String getName();
    method @Deprecated public java.util.Set<com.android.build.api.transform.QualifiedContent.ContentType!> getOutputTypes();
    method @Deprecated public java.util.Map<java.lang.String!,java.lang.Object!> getParameterInputs();
    method @Deprecated public java.util.Set<? super com.android.build.api.transform.QualifiedContent.Scope> getReferencedScopes();
    method @Deprecated public abstract java.util.Set<? super com.android.build.api.transform.QualifiedContent.Scope> getScopes();
    method @Deprecated public java.util.Collection<java.io.File!> getSecondaryDirectoryOutputs();
    method @Deprecated public java.util.Collection<java.io.File!> getSecondaryFileInputs();
    method @Deprecated public java.util.Collection<java.io.File!> getSecondaryFileOutputs();
    method @Deprecated public java.util.Collection<com.android.build.api.transform.SecondaryFile!> getSecondaryFiles();
    method @Deprecated public boolean isCacheable();
    method @Deprecated public abstract boolean isIncremental();
    method @Deprecated public void setOutputDirectory(org.gradle.api.provider.Property<org.gradle.api.file.Directory!>);
    method @Deprecated public void setOutputFile(org.gradle.api.provider.Property<org.gradle.api.file.RegularFile!>);
    method @Deprecated public void transform(com.android.build.api.transform.Context, java.util.Collection<com.android.build.api.transform.TransformInput!>, java.util.Collection<com.android.build.api.transform.TransformInput!>, com.android.build.api.transform.TransformOutputProvider?, boolean) throws java.io.IOException, java.lang.InterruptedException, com.android.build.api.transform.TransformException;
    method @Deprecated public void transform(com.android.build.api.transform.TransformInvocation) throws java.io.IOException, java.lang.InterruptedException, com.android.build.api.transform.TransformException;
  }

  @Deprecated public class TransformException extends java.lang.Exception {
    ctor @Deprecated public TransformException(Throwable!);
    ctor @Deprecated public TransformException(String!);
    ctor @Deprecated public TransformException(String!, Throwable!);
  }

  @Deprecated public interface TransformInput {
    method @Deprecated public java.util.Collection<com.android.build.api.transform.DirectoryInput!> getDirectoryInputs();
    method @Deprecated public java.util.Collection<com.android.build.api.transform.JarInput!> getJarInputs();
  }

  @Deprecated public interface TransformInvocation {
    method @Deprecated public com.android.build.api.transform.Context getContext();
    method @Deprecated public java.util.Collection<com.android.build.api.transform.TransformInput!> getInputs();
    method @Deprecated public com.android.build.api.transform.TransformOutputProvider? getOutputProvider();
    method @Deprecated public java.util.Collection<com.android.build.api.transform.TransformInput!> getReferencedInputs();
    method @Deprecated public java.util.Collection<com.android.build.api.transform.SecondaryInput!> getSecondaryInputs();
    method @Deprecated public boolean isIncremental();
  }

  @Deprecated public interface TransformOutputProvider {
    method @Deprecated public void deleteAll() throws java.io.IOException;
    method @Deprecated public java.io.File getContentLocation(String, java.util.Set<com.android.build.api.transform.QualifiedContent.ContentType!>, java.util.Set<? super com.android.build.api.transform.QualifiedContent.Scope>, com.android.build.api.transform.Format);
  }

}

package com.android.build.api.variant {

  public interface AarMetadata {
    method @org.gradle.api.Incubating public org.gradle.api.provider.Property<java.lang.String> getMinAgpVersion();
    method public org.gradle.api.provider.Property<java.lang.Integer> getMinCompileSdk();
    property @org.gradle.api.Incubating public abstract org.gradle.api.provider.Property<java.lang.String> minAgpVersion;
    property public abstract org.gradle.api.provider.Property<java.lang.Integer> minCompileSdk;
  }

  @org.gradle.api.Incubating public interface AbstractSourceDirectories extends org.gradle.api.Named {
    method public <TASK extends org.gradle.api.Task> void add(org.gradle.api.tasks.TaskProvider<TASK> taskProvider, kotlin.jvm.functions.Function1<? super TASK,? extends org.gradle.api.provider.Provider<org.gradle.api.file.Directory>> wiredWith);
    method public void addSrcDir(String srcDir);
  }

  public interface AndroidComponentsExtension<DslExtensionT extends com.android.build.api.dsl.CommonExtension<?, ?, ?, ?>, VariantBuilderT extends com.android.build.api.variant.VariantBuilder, VariantT extends com.android.build.api.variant.Variant> extends com.android.build.api.variant.DslLifecycle<DslExtensionT> {
    method public void beforeVariants(optional com.android.build.api.variant.VariantSelector selector, kotlin.jvm.functions.Function1<? super VariantBuilderT,kotlin.Unit> callback);
    method public void beforeVariants(optional com.android.build.api.variant.VariantSelector selector, org.gradle.api.Action<VariantBuilderT> callback);
    method @Deprecated public void finalizeDSl(org.gradle.api.Action<DslExtensionT> callback);
    method public com.android.build.api.AndroidPluginVersion getPluginVersion();
    method @org.gradle.api.Incubating public com.android.build.api.dsl.SdkComponents getSdkComponents();
    method public void onVariants(optional com.android.build.api.variant.VariantSelector selector, kotlin.jvm.functions.Function1<? super VariantT,kotlin.Unit> callback);
    method public void onVariants(optional com.android.build.api.variant.VariantSelector selector, org.gradle.api.Action<VariantT> callback);
    method @org.gradle.api.Incubating public void registerExtension(com.android.build.api.variant.DslExtension dslExtension, kotlin.jvm.functions.Function1<? super com.android.build.api.variant.VariantExtensionConfig<VariantT>,? extends com.android.build.api.variant.VariantExtension> configurator);
    method @org.gradle.api.Incubating public void registerSourceType(String name);
    method public com.android.build.api.variant.VariantSelector selector();
    property public abstract com.android.build.api.AndroidPluginVersion pluginVersion;
    property @org.gradle.api.Incubating public abstract com.android.build.api.dsl.SdkComponents sdkComponents;
  }

  public interface AndroidResources {
    method public org.gradle.api.provider.ListProperty<java.lang.String> getAaptAdditionalParameters();
    method public org.gradle.api.provider.ListProperty<java.lang.String> getIgnoreAssetsPatterns();
    method @org.gradle.api.Incubating public org.gradle.api.provider.ListProperty<java.lang.String> getNoCompress();
    property public abstract org.gradle.api.provider.ListProperty<java.lang.String> aaptAdditionalParameters;
    property public abstract org.gradle.api.provider.ListProperty<java.lang.String> ignoreAssetsPatterns;
    property @org.gradle.api.Incubating public abstract org.gradle.api.provider.ListProperty<java.lang.String> noCompress;
  }

  public interface AndroidTest extends com.android.build.api.variant.GeneratesTestApk com.android.build.api.variant.HasAndroidResources com.android.build.api.variant.TestComponent {
    method public org.gradle.api.provider.Property<java.lang.String> getApplicationId();
    method public org.gradle.api.provider.MapProperty<java.lang.String,? extends com.android.build.api.variant.BuildConfigField<? extends java.io.Serializable>> getBuildConfigFields();
    method public org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> getManifestPlaceholders();
    method public org.gradle.api.provider.Provider<java.lang.String> getNamespace();
    method public org.gradle.api.provider.ListProperty<org.gradle.api.file.RegularFile> getProguardFiles();
    method public com.android.build.api.variant.SigningConfig? getSigningConfig();
    property public abstract org.gradle.api.provider.Property<java.lang.String> applicationId;
    property public abstract org.gradle.api.provider.MapProperty<java.lang.String,? extends com.android.build.api.variant.BuildConfigField<? extends java.io.Serializable>> buildConfigFields;
    property public abstract org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> manifestPlaceholders;
    property public abstract org.gradle.api.provider.Provider<java.lang.String> namespace;
    property public abstract org.gradle.api.provider.ListProperty<org.gradle.api.file.RegularFile> proguardFiles;
    property public abstract com.android.build.api.variant.SigningConfig? signingConfig;
  }

  public interface AndroidVersion {
    method @org.gradle.api.tasks.Input public int getApiLevel();
    method @org.gradle.api.tasks.Input @org.gradle.api.tasks.Optional public String? getCodename();
    property @org.gradle.api.tasks.Input public abstract int apiLevel;
    property @org.gradle.api.tasks.Input @org.gradle.api.tasks.Optional public abstract String? codename;
  }

  @org.gradle.api.Incubating public interface AnnotationProcessor {
    method public java.util.List<org.gradle.process.CommandLineArgumentProvider> getArgumentProviders();
    method public org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> getArguments();
    method public org.gradle.api.provider.ListProperty<java.lang.String> getClassNames();
    property public abstract java.util.List<org.gradle.process.CommandLineArgumentProvider> argumentProviders;
    property public abstract org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> arguments;
    property public abstract org.gradle.api.provider.ListProperty<java.lang.String> classNames;
  }

  public interface ApkPackaging extends com.android.build.api.variant.Packaging {
    method public com.android.build.api.variant.DexPackagingOptions getDex();
    method public com.android.build.api.variant.JniLibsApkPackaging getJniLibs();
    property public abstract com.android.build.api.variant.DexPackagingOptions dex;
    property public abstract com.android.build.api.variant.JniLibsApkPackaging jniLibs;
  }

  public interface ApplicationAndroidComponentsExtension extends com.android.build.api.variant.AndroidComponentsExtension<com.android.build.api.dsl.ApplicationExtension,com.android.build.api.variant.ApplicationVariantBuilder,com.android.build.api.variant.ApplicationVariant> {
  }

  public interface ApplicationVariant extends com.android.build.api.variant.GeneratesApk com.android.build.api.variant.HasAndroidTest com.android.build.api.variant.HasTestFixtures com.android.build.api.variant.Variant {
    method public org.gradle.api.provider.Property<java.lang.String> getApplicationId();
    method @org.gradle.api.Incubating public com.android.build.api.variant.BundleConfig getBundleConfig();
    method public com.android.build.api.variant.DependenciesInfo getDependenciesInfo();
    method public java.util.List<com.android.build.api.variant.VariantOutput> getOutputs();
    method public com.android.build.api.variant.SigningConfig getSigningConfig();
    property public abstract org.gradle.api.provider.Property<java.lang.String> applicationId;
    property @org.gradle.api.Incubating public abstract com.android.build.api.variant.BundleConfig bundleConfig;
    property public abstract com.android.build.api.variant.DependenciesInfo dependenciesInfo;
    property public abstract java.util.List<com.android.build.api.variant.VariantOutput> outputs;
    property public abstract com.android.build.api.variant.SigningConfig signingConfig;
  }

  public interface ApplicationVariantBuilder extends com.android.build.api.variant.VariantBuilder com.android.build.api.variant.HasAndroidTestBuilder com.android.build.api.variant.HasTestFixturesBuilder {
    method public boolean getDebuggable();
    method public com.android.build.api.variant.DependenciesInfoBuilder getDependenciesInfo();
    property public abstract boolean debuggable;
    property public abstract com.android.build.api.variant.DependenciesInfoBuilder dependenciesInfo;
  }

  public final class BuildConfigField<T extends java.io.Serializable> implements java.io.Serializable {
    ctor public BuildConfigField(String type, T value, String? comment);
    method public String? getComment();
    method public String getType();
    method public T getValue();
    property public final String? comment;
    property public final String type;
    property public final T value;
  }

  public interface BuiltArtifact extends com.android.build.api.variant.VariantOutputConfiguration {
    method public String getOutputFile();
    method public Integer? getVersionCode();
    method public String? getVersionName();
    property public abstract String outputFile;
    property public abstract Integer? versionCode;
    property public abstract String? versionName;
  }

  public interface BuiltArtifacts {
    method public String getApplicationId();
    method public com.android.build.api.artifact.Artifact<?> getArtifactType();
    method public java.util.Collection<com.android.build.api.variant.BuiltArtifact> getElements();
    method public String getVariantName();
    method public void save(org.gradle.api.file.Directory out);
    property public abstract String applicationId;
    property public abstract com.android.build.api.artifact.Artifact<?> artifactType;
    property public abstract java.util.Collection<com.android.build.api.variant.BuiltArtifact> elements;
    property public abstract String variantName;
    field public static final com.android.build.api.variant.BuiltArtifacts.Companion Companion;
    field public static final int METADATA_FILE_VERSION = 3; // 0x3
  }

  public static final class BuiltArtifacts.Companion {
    field public static final int METADATA_FILE_VERSION = 3; // 0x3
  }

  public static interface BuiltArtifacts.TransformParams extends org.gradle.workers.WorkParameters java.io.Serializable {
    method public java.io.File getOutput();
    property public abstract java.io.File output;
  }

  public interface BuiltArtifactsLoader {
    method public com.android.build.api.variant.BuiltArtifacts? load(org.gradle.api.file.Directory folder);
    method public com.android.build.api.variant.BuiltArtifacts? load(org.gradle.api.file.FileCollection fileCollection);
  }

  @org.gradle.api.Incubating public interface BundleConfig {
    method public void addMetadataFile(String metadataDirectory, org.gradle.api.provider.Provider<org.gradle.api.file.RegularFile> file);
    method public com.android.build.api.variant.CodeTransparency getCodeTransparency();
    property public abstract com.android.build.api.variant.CodeTransparency codeTransparency;
  }

  @org.gradle.api.Incubating public interface CodeTransparency {
    method @org.gradle.api.Incubating public void setSigningConfig(com.android.build.api.dsl.SigningConfig signingConfig);
  }

  public interface Component extends com.android.build.api.variant.ComponentIdentity {
    method @org.gradle.api.Incubating public void configurations(kotlin.jvm.functions.Function1<? super org.gradle.api.artifacts.Configuration,kotlin.Unit> action);
    method @org.gradle.api.Incubating public org.gradle.api.artifacts.Configuration getAnnotationProcessorConfiguration();
    method public com.android.build.api.artifact.Artifacts getArtifacts();
    method @org.gradle.api.Incubating public org.gradle.api.file.FileCollection getCompileClasspath();
    method @org.gradle.api.Incubating public org.gradle.api.artifacts.Configuration getCompileConfiguration();
    method @org.gradle.api.Incubating public com.android.build.api.variant.Instrumentation getInstrumentation();
    method @org.gradle.api.Incubating public com.android.build.api.variant.JavaCompilation getJavaCompilation();
    method @org.gradle.api.Incubating public org.gradle.api.artifacts.Configuration getRuntimeConfiguration();
    method @org.gradle.api.Incubating public com.android.build.api.variant.Sources getSources();
    method @Deprecated public void setAsmFramesComputationMode(com.android.build.api.instrumentation.FramesComputationMode mode);
    method @Deprecated public <ParamT extends com.android.build.api.instrumentation.InstrumentationParameters> void transformClassesWith(Class<? extends com.android.build.api.instrumentation.AsmClassVisitorFactory<ParamT>> classVisitorFactoryImplClass, com.android.build.api.instrumentation.InstrumentationScope scope, kotlin.jvm.functions.Function1<? super ParamT,kotlin.Unit> instrumentationParamsConfig);
    property @org.gradle.api.Incubating public abstract org.gradle.api.artifacts.Configuration annotationProcessorConfiguration;
    property public abstract com.android.build.api.artifact.Artifacts artifacts;
    property @org.gradle.api.Incubating public abstract org.gradle.api.file.FileCollection compileClasspath;
    property @org.gradle.api.Incubating public abstract org.gradle.api.artifacts.Configuration compileConfiguration;
    property @org.gradle.api.Incubating public abstract com.android.build.api.variant.Instrumentation instrumentation;
    property @org.gradle.api.Incubating public abstract com.android.build.api.variant.JavaCompilation javaCompilation;
    property @org.gradle.api.Incubating public abstract org.gradle.api.artifacts.Configuration runtimeConfiguration;
    property @org.gradle.api.Incubating public abstract com.android.build.api.variant.Sources sources;
  }

  public interface ComponentBuilder extends com.android.build.api.variant.ComponentIdentity {
    method public boolean getEnable();
    method @Deprecated public boolean getEnabled();
    method public void setEnable(boolean enable);
    method @Deprecated public void setEnabled(boolean enabled);
    property public abstract boolean enable;
    property @Deprecated public abstract boolean enabled;
  }

  public interface ComponentIdentity {
    method public String? getBuildType();
    method public String? getFlavorName();
    method public String getName();
    method public java.util.List<kotlin.Pair<java.lang.String,java.lang.String>> getProductFlavors();
    property public abstract String? buildType;
    property public abstract String? flavorName;
    property public abstract String name;
    property public abstract java.util.List<kotlin.Pair<java.lang.String,java.lang.String>> productFlavors;
  }

  public interface DependenciesInfo {
    method public boolean getIncludedInApk();
    method public boolean getIncludedInBundle();
    property public abstract boolean includedInApk;
    property public abstract boolean includedInBundle;
  }

  public interface DependenciesInfoBuilder {
    method public boolean getIncludedInApk();
    method public boolean getIncludedInBundle();
    method public void setIncludedInApk(boolean includedInApk);
    method public void setIncludedInBundle(boolean includedInBundle);
    property public abstract boolean includedInApk;
    property public abstract boolean includedInBundle;
  }

  public interface DexPackagingOptions {
    method public org.gradle.api.provider.Property<java.lang.Boolean> getUseLegacyPackaging();
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> useLegacyPackaging;
  }

  @org.gradle.api.Incubating public final class DslExtension {
    method public Class<?>? getBuildTypeExtensionType();
    method public String getDslName();
    method public Class<?>? getProductFlavorExtensionType();
    method public Class<?>? getProjectExtensionType();
    property public final Class<?>? buildTypeExtensionType;
    property public final String dslName;
    property public final Class<?>? productFlavorExtensionType;
    property public final Class<?>? projectExtensionType;
  }

  @org.gradle.api.Incubating public static final class DslExtension.Builder {
    ctor public DslExtension.Builder(String dslName);
    method public com.android.build.api.variant.DslExtension build();
    method public com.android.build.api.variant.DslExtension.Builder extendBuildTypeWith(Class<?> typeExtension);
    method public com.android.build.api.variant.DslExtension.Builder extendProductFlavorWith(Class<?> typeExtension);
    method public com.android.build.api.variant.DslExtension.Builder extendProjectWith(Class<?> typeExtension);
  }

  @org.gradle.api.Incubating public interface DslLifecycle<T> {
    method public void finalizeDsl(kotlin.jvm.functions.Function1<? super T,kotlin.Unit> callback);
    method public void finalizeDsl(org.gradle.api.Action<T> callback);
  }

  public interface DynamicFeatureAndroidComponentsExtension extends com.android.build.api.variant.AndroidComponentsExtension<com.android.build.api.dsl.DynamicFeatureExtension,com.android.build.api.variant.DynamicFeatureVariantBuilder,com.android.build.api.variant.DynamicFeatureVariant> {
  }

  public interface DynamicFeatureVariant extends com.android.build.api.variant.Variant com.android.build.api.variant.GeneratesApk com.android.build.api.variant.HasAndroidTest com.android.build.api.variant.HasTestFixtures {
  }

  public interface DynamicFeatureVariantBuilder extends com.android.build.api.variant.VariantBuilder com.android.build.api.variant.HasAndroidTestBuilder com.android.build.api.variant.HasTestFixturesBuilder {
  }

  public interface ExternalNativeBuild {
    method public org.gradle.api.provider.SetProperty<java.lang.String> getAbiFilters();
    method public org.gradle.api.provider.ListProperty<java.lang.String> getArguments();
    method public org.gradle.api.provider.ListProperty<java.lang.String> getCFlags();
    method public org.gradle.api.provider.ListProperty<java.lang.String> getCppFlags();
    method public org.gradle.api.provider.SetProperty<java.lang.String> getTargets();
    property public abstract org.gradle.api.provider.SetProperty<java.lang.String> abiFilters;
    property public abstract org.gradle.api.provider.ListProperty<java.lang.String> arguments;
    property public abstract org.gradle.api.provider.ListProperty<java.lang.String> cFlags;
    property public abstract org.gradle.api.provider.ListProperty<java.lang.String> cppFlags;
    property public abstract org.gradle.api.provider.SetProperty<java.lang.String> targets;
  }

  public interface ExternalNdkBuild extends com.android.build.api.variant.ExternalNativeBuild {
  }

  public interface FilterConfiguration {
    method public com.android.build.api.variant.FilterConfiguration.FilterType getFilterType();
    method public String getIdentifier();
    property public abstract com.android.build.api.variant.FilterConfiguration.FilterType filterType;
    property public abstract String identifier;
  }

  public enum FilterConfiguration.FilterType {
    enum_constant public static final com.android.build.api.variant.FilterConfiguration.FilterType ABI;
    enum_constant public static final com.android.build.api.variant.FilterConfiguration.FilterType DENSITY;
    enum_constant public static final com.android.build.api.variant.FilterConfiguration.FilterType LANGUAGE;
  }

  public interface GeneratesAar {
    method public com.android.build.api.variant.AarMetadata getAarMetadata();
    property public abstract com.android.build.api.variant.AarMetadata aarMetadata;
  }

  public interface GeneratesApk {
    method public com.android.build.api.variant.AndroidResources getAndroidResources();
    method public org.gradle.api.provider.Provider<java.lang.String> getApplicationId();
    method public com.android.build.api.variant.ApkPackaging getPackaging();
    method public com.android.build.api.variant.Renderscript? getRenderscript();
    property public abstract com.android.build.api.variant.AndroidResources androidResources;
    property public abstract org.gradle.api.provider.Provider<java.lang.String> applicationId;
    property public abstract com.android.build.api.variant.ApkPackaging packaging;
    property public abstract com.android.build.api.variant.Renderscript? renderscript;
  }

  public interface GeneratesTestApk extends com.android.build.api.variant.GeneratesApk {
    method public org.gradle.api.provider.Property<java.lang.Boolean> getFunctionalTest();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getHandleProfiling();
    method public org.gradle.api.provider.Property<java.lang.String> getInstrumentationRunner();
    method public org.gradle.api.provider.Property<java.lang.String> getTestLabel();
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> functionalTest;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> handleProfiling;
    property public abstract org.gradle.api.provider.Property<java.lang.String> instrumentationRunner;
    property public abstract org.gradle.api.provider.Property<java.lang.String> testLabel;
  }

  public interface HasAndroidResources {
    method public org.gradle.api.provider.Property<java.lang.Boolean> getPseudoLocalesEnabled();
    method public org.gradle.api.provider.MapProperty<com.android.build.api.variant.ResValue.Key,com.android.build.api.variant.ResValue> getResValues();
    method public com.android.build.api.variant.ResValue.Key makeResValueKey(String type, String name);
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> pseudoLocalesEnabled;
    property public abstract org.gradle.api.provider.MapProperty<com.android.build.api.variant.ResValue.Key,com.android.build.api.variant.ResValue> resValues;
  }

  public interface HasAndroidTest {
    method public com.android.build.api.variant.AndroidTest? getAndroidTest();
    property public abstract com.android.build.api.variant.AndroidTest? androidTest;
  }

  public interface HasAndroidTestBuilder {
    method @Deprecated public boolean getAndroidTestEnabled();
    method public boolean getEnableAndroidTest();
    method @Deprecated public void setAndroidTestEnabled(boolean androidTestEnabled);
    method public void setEnableAndroidTest(boolean enableAndroidTest);
    property @Deprecated public abstract boolean androidTestEnabled;
    property public abstract boolean enableAndroidTest;
  }

  @org.gradle.api.Incubating public interface HasTestFixtures {
    method public com.android.build.api.variant.TestFixtures? getTestFixtures();
    property public abstract com.android.build.api.variant.TestFixtures? testFixtures;
  }

  @org.gradle.api.Incubating public interface HasTestFixturesBuilder {
    method public boolean getEnableTestFixtures();
    method public void setEnableTestFixtures(boolean enableTestFixtures);
    property public abstract boolean enableTestFixtures;
  }

  @org.gradle.api.Incubating public interface Instrumentation {
    method public org.gradle.api.provider.SetProperty<java.lang.String> getExcludes();
    method public void setAsmFramesComputationMode(com.android.build.api.instrumentation.FramesComputationMode mode);
    method public <ParamT extends com.android.build.api.instrumentation.InstrumentationParameters> void transformClassesWith(Class<? extends com.android.build.api.instrumentation.AsmClassVisitorFactory<ParamT>> classVisitorFactoryImplClass, com.android.build.api.instrumentation.InstrumentationScope scope, kotlin.jvm.functions.Function1<? super ParamT,kotlin.Unit> instrumentationParamsConfig);
    property public abstract org.gradle.api.provider.SetProperty<java.lang.String> excludes;
  }

  @org.gradle.api.Incubating public interface JavaCompilation {
    method public com.android.build.api.variant.AnnotationProcessor getAnnotationProcessor();
    property public abstract com.android.build.api.variant.AnnotationProcessor annotationProcessor;
  }

  public interface JniLibsApkPackaging extends com.android.build.api.variant.JniLibsPackaging {
    method public org.gradle.api.provider.Provider<java.lang.Boolean> getUseLegacyPackaging();
    method public org.gradle.api.provider.Provider<java.lang.Boolean> getUseLegacyPackagingFromBundle();
    property public abstract org.gradle.api.provider.Provider<java.lang.Boolean> useLegacyPackaging;
    property public abstract org.gradle.api.provider.Provider<java.lang.Boolean> useLegacyPackagingFromBundle;
  }

  public interface JniLibsPackaging {
    method public org.gradle.api.provider.SetProperty<java.lang.String> getExcludes();
    method public org.gradle.api.provider.SetProperty<java.lang.String> getKeepDebugSymbols();
    method public org.gradle.api.provider.SetProperty<java.lang.String> getPickFirsts();
    property public abstract org.gradle.api.provider.SetProperty<java.lang.String> excludes;
    property public abstract org.gradle.api.provider.SetProperty<java.lang.String> keepDebugSymbols;
    property public abstract org.gradle.api.provider.SetProperty<java.lang.String> pickFirsts;
  }

  public interface LibraryAndroidComponentsExtension extends com.android.build.api.variant.AndroidComponentsExtension<com.android.build.api.dsl.LibraryExtension,com.android.build.api.variant.LibraryVariantBuilder,com.android.build.api.variant.LibraryVariant> {
  }

  public interface LibraryVariant extends com.android.build.api.variant.Variant com.android.build.api.variant.GeneratesAar com.android.build.api.variant.HasAndroidTest com.android.build.api.variant.HasTestFixtures {
    method public com.android.build.api.variant.Renderscript? getRenderscript();
    property public abstract com.android.build.api.variant.Renderscript? renderscript;
  }

  public interface LibraryVariantBuilder extends com.android.build.api.variant.VariantBuilder com.android.build.api.variant.HasAndroidTestBuilder com.android.build.api.variant.HasTestFixturesBuilder {
  }

  @org.gradle.api.Incubating public interface LintLifecycleExtension extends com.android.build.api.variant.DslLifecycle<com.android.build.api.dsl.Lint> {
  }

  public interface Packaging {
    method public com.android.build.api.variant.JniLibsPackaging getJniLibs();
    method public com.android.build.api.variant.ResourcesPackaging getResources();
    property public abstract com.android.build.api.variant.JniLibsPackaging jniLibs;
    property public abstract com.android.build.api.variant.ResourcesPackaging resources;
  }

  public interface Renderscript {
    method public org.gradle.api.provider.Property<java.lang.Boolean> getNdkModeEnabled();
    method public org.gradle.api.provider.Property<java.lang.Integer> getOptimLevel();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getSupportModeBlasEnabled();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getSupportModeEnabled();
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> ndkModeEnabled;
    property public abstract org.gradle.api.provider.Property<java.lang.Integer> optimLevel;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> supportModeBlasEnabled;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> supportModeEnabled;
  }

  public final class ResValue implements java.io.Serializable {
    ctor public ResValue(String value, optional String? comment);
    method public String? getComment();
    method public String getValue();
    property public final String? comment;
    property public final String value;
  }

  public static interface ResValue.Key extends java.io.Serializable {
    method public String getName();
    method public String getType();
    property public abstract String name;
    property public abstract String type;
  }

  public interface ResourcesPackaging {
    method public org.gradle.api.provider.SetProperty<java.lang.String> getExcludes();
    method public org.gradle.api.provider.SetProperty<java.lang.String> getMerges();
    method public org.gradle.api.provider.SetProperty<java.lang.String> getPickFirsts();
    property public abstract org.gradle.api.provider.SetProperty<java.lang.String> excludes;
    property public abstract org.gradle.api.provider.SetProperty<java.lang.String> merges;
    property public abstract org.gradle.api.provider.SetProperty<java.lang.String> pickFirsts;
  }

  public interface SigningConfig {
    method public org.gradle.api.provider.Property<java.lang.Boolean> getEnableV1Signing();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getEnableV2Signing();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getEnableV3Signing();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getEnableV4Signing();
    method @org.gradle.api.Incubating public void setConfig(com.android.build.api.dsl.SigningConfig signingConfig);
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> enableV1Signing;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> enableV2Signing;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> enableV3Signing;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> enableV4Signing;
  }

  @org.gradle.api.Incubating public interface SourceAndOverlayDirectories extends com.android.build.api.variant.AbstractSourceDirectories {
    method public org.gradle.api.provider.Provider<java.util.List<java.util.Collection<org.gradle.api.file.Directory>>> getAll();
    property public abstract org.gradle.api.provider.Provider<java.util.List<java.util.Collection<org.gradle.api.file.Directory>>> all;
  }

  @org.gradle.api.Incubating public interface SourceDirectories extends com.android.build.api.variant.AbstractSourceDirectories {
    method public org.gradle.api.provider.Provider<java.util.List<org.gradle.api.file.Directory>> getAll();
    property public abstract org.gradle.api.provider.Provider<java.util.List<org.gradle.api.file.Directory>> all;
  }

  @org.gradle.api.Incubating public interface Sources {
    method public com.android.build.api.variant.SourceDirectories? getAidl();
    method public com.android.build.api.variant.SourceAndOverlayDirectories getAssets();
    method public com.android.build.api.variant.SourceDirectories getByName(String name);
    method public com.android.build.api.variant.SourceDirectories getJava();
    method public com.android.build.api.variant.SourceAndOverlayDirectories getJniLibs();
    method public com.android.build.api.variant.SourceDirectories getKotlin();
    method public com.android.build.api.variant.SourceAndOverlayDirectories getMlModels();
    method @Deprecated public com.android.build.api.variant.SourceDirectories? getRenderscript();
    method public com.android.build.api.variant.SourceAndOverlayDirectories getRes();
    method public com.android.build.api.variant.SourceAndOverlayDirectories? getShaders();
    property public abstract com.android.build.api.variant.SourceDirectories? aidl;
    property public abstract com.android.build.api.variant.SourceAndOverlayDirectories assets;
    property public abstract com.android.build.api.variant.SourceDirectories java;
    property public abstract com.android.build.api.variant.SourceAndOverlayDirectories jniLibs;
    property public abstract com.android.build.api.variant.SourceDirectories kotlin;
    property public abstract com.android.build.api.variant.SourceAndOverlayDirectories mlModels;
    property @Deprecated public abstract com.android.build.api.variant.SourceDirectories? renderscript;
    property public abstract com.android.build.api.variant.SourceAndOverlayDirectories res;
    property public abstract com.android.build.api.variant.SourceAndOverlayDirectories? shaders;
  }

  public interface TestAndroidComponentsExtension extends com.android.build.api.variant.AndroidComponentsExtension<com.android.build.api.dsl.TestExtension,com.android.build.api.variant.TestVariantBuilder,com.android.build.api.variant.TestVariant> {
  }

  public interface TestComponent extends com.android.build.api.variant.Component {
  }

  @org.gradle.api.Incubating public interface TestFixtures extends com.android.build.api.variant.GeneratesAar com.android.build.api.variant.Component com.android.build.api.variant.HasAndroidResources {
    method public org.gradle.api.provider.Provider<java.lang.String> getNamespace();
    property public abstract org.gradle.api.provider.Provider<java.lang.String> namespace;
  }

  public interface TestVariant extends com.android.build.api.variant.GeneratesTestApk com.android.build.api.variant.Variant {
    method public org.gradle.api.provider.Property<java.lang.String> getApplicationId();
    method public org.gradle.api.provider.Provider<java.lang.String> getTestedApplicationId();
    property public abstract org.gradle.api.provider.Property<java.lang.String> applicationId;
    property public abstract org.gradle.api.provider.Provider<java.lang.String> testedApplicationId;
  }

  public interface TestVariantBuilder extends com.android.build.api.variant.VariantBuilder {
  }

  public interface UnitTest extends com.android.build.api.variant.TestComponent {
  }

  public interface Variant extends com.android.build.api.variant.Component com.android.build.api.variant.HasAndroidResources {
    method public org.gradle.api.provider.MapProperty<java.lang.String,com.android.build.api.variant.BuildConfigField<? extends java.io.Serializable>> getBuildConfigFields();
    method @org.gradle.api.Incubating public org.gradle.api.provider.MapProperty<java.lang.String,java.lang.Object> getExperimentalProperties();
    method public <T> T? getExtension(Class<T> type);
    method public com.android.build.api.variant.ExternalNativeBuild? getExternalNativeBuild();
    method public org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> getManifestPlaceholders();
    method public Integer? getMaxSdkVersion();
    method public com.android.build.api.variant.AndroidVersion getMinSdkVersion();
    method public org.gradle.api.provider.Provider<java.lang.String> getNamespace();
    method @org.gradle.api.Incubating public java.util.List<com.android.build.api.variant.Component> getNestedComponents();
    method public com.android.build.api.variant.Packaging getPackaging();
    method public org.gradle.api.provider.ListProperty<org.gradle.api.file.RegularFile> getProguardFiles();
    method public com.android.build.api.variant.AndroidVersion getTargetSdkVersion();
    method public com.android.build.api.component.UnitTest? getUnitTest();
    property public abstract org.gradle.api.provider.MapProperty<java.lang.String,com.android.build.api.variant.BuildConfigField<? extends java.io.Serializable>> buildConfigFields;
    property @org.gradle.api.Incubating public abstract org.gradle.api.provider.MapProperty<java.lang.String,java.lang.Object> experimentalProperties;
    property public abstract com.android.build.api.variant.ExternalNativeBuild? externalNativeBuild;
    property public abstract org.gradle.api.provider.MapProperty<java.lang.String,java.lang.String> manifestPlaceholders;
    property public abstract Integer? maxSdkVersion;
    property public abstract com.android.build.api.variant.AndroidVersion minSdkVersion;
    property public abstract org.gradle.api.provider.Provider<java.lang.String> namespace;
    property @org.gradle.api.Incubating public abstract java.util.List<com.android.build.api.variant.Component> nestedComponents;
    property public abstract com.android.build.api.variant.Packaging packaging;
    property public abstract org.gradle.api.provider.ListProperty<org.gradle.api.file.RegularFile> proguardFiles;
    property public abstract com.android.build.api.variant.AndroidVersion targetSdkVersion;
    property public abstract com.android.build.api.component.UnitTest? unitTest;
  }

  public interface VariantBuilder extends com.android.build.api.variant.ComponentBuilder {
    method public boolean getEnableUnitTest();
    method public Integer? getMaxSdk();
    method public Integer? getMinSdk();
    method public String? getMinSdkPreview();
    method public int getRenderscriptTargetApi();
    method public Integer? getTargetSdk();
    method public String? getTargetSdkPreview();
    method @Deprecated public boolean getUnitTestEnabled();
    method public <T> void registerExtension(Class<? extends T> type, T instance);
    method public void setEnableUnitTest(boolean enableUnitTest);
    method public void setMaxSdk(Integer? maxSdk);
    method public void setMinSdk(Integer? minSdk);
    method public void setMinSdkPreview(String? minSdkPreview);
    method public void setRenderscriptTargetApi(int renderscriptTargetApi);
    method public void setTargetSdk(Integer? targetSdk);
    method public void setTargetSdkPreview(String? targetSdkPreview);
    method @Deprecated public void setUnitTestEnabled(boolean unitTestEnabled);
    property public abstract boolean enableUnitTest;
    property public abstract Integer? maxSdk;
    property public abstract Integer? minSdk;
    property public abstract String? minSdkPreview;
    property public abstract int renderscriptTargetApi;
    property public abstract Integer? targetSdk;
    property public abstract String? targetSdkPreview;
    property @Deprecated public abstract boolean unitTestEnabled;
  }

  public interface VariantExtension {
  }

  @org.gradle.api.Incubating public interface VariantExtensionConfig<VariantT extends com.android.build.api.variant.Variant> {
    method public <T> T! buildTypeExtension(Class<T> extensionType);
    method public VariantT getVariant();
    method public <T> java.util.List<T> productFlavorsExtensions(Class<T> extensionType);
    method public <T> T! projectExtension(Class<T> extensionType);
    property public abstract VariantT variant;
  }

  @Deprecated public interface VariantFilter {
    method @Deprecated public com.android.builder.model.BuildType getBuildType();
    method @Deprecated public com.android.builder.model.ProductFlavor getDefaultConfig();
    method @Deprecated public java.util.List<com.android.builder.model.ProductFlavor> getFlavors();
    method @Deprecated public boolean getIgnore();
    method @Deprecated public String getName();
    method @Deprecated public void setIgnore(boolean ignore);
    property public abstract com.android.builder.model.BuildType buildType;
    property public abstract com.android.builder.model.ProductFlavor defaultConfig;
    property public abstract java.util.List<com.android.builder.model.ProductFlavor> flavors;
    property public abstract boolean ignore;
    property public abstract String name;
  }

  @Deprecated public interface VariantInfo {
    method @Deprecated public String getBuildTypeName();
    method @Deprecated public com.google.common.collect.ImmutableList<java.lang.String!> getFlavorNames();
    method @Deprecated public String getFullVariantName();
    method @Deprecated public boolean isDebuggable();
    method @Deprecated public boolean isTest();
  }

  public interface VariantOutput extends com.android.build.api.variant.VariantOutputConfiguration {
    method @Deprecated public org.gradle.api.provider.Property<java.lang.Boolean> getEnable();
    method public org.gradle.api.provider.Property<java.lang.Boolean> getEnabled();
    method public org.gradle.api.provider.Property<java.lang.Integer> getVersionCode();
    method public org.gradle.api.provider.Property<java.lang.String> getVersionName();
    property @Deprecated public abstract org.gradle.api.provider.Property<java.lang.Boolean> enable;
    property public abstract org.gradle.api.provider.Property<java.lang.Boolean> enabled;
    property public abstract org.gradle.api.provider.Property<java.lang.Integer> versionCode;
    property public abstract org.gradle.api.provider.Property<java.lang.String> versionName;
  }

  public interface VariantOutputConfiguration {
    method public java.util.Collection<com.android.build.api.variant.FilterConfiguration> getFilters();
    method public com.android.build.api.variant.VariantOutputConfiguration.OutputType getOutputType();
    property public abstract java.util.Collection<com.android.build.api.variant.FilterConfiguration> filters;
    property public abstract com.android.build.api.variant.VariantOutputConfiguration.OutputType outputType;
  }

  public enum VariantOutputConfiguration.OutputType {
    enum_constant public static final com.android.build.api.variant.VariantOutputConfiguration.OutputType ONE_OF_MANY;
    enum_constant public static final com.android.build.api.variant.VariantOutputConfiguration.OutputType SINGLE;
    enum_constant public static final com.android.build.api.variant.VariantOutputConfiguration.OutputType UNIVERSAL;
  }

  public interface VariantSelector {
    method public com.android.build.api.variant.VariantSelector all();
    method public com.android.build.api.variant.VariantSelector withBuildType(String buildType);
    method public com.android.build.api.variant.VariantSelector withFlavor(kotlin.Pair<java.lang.String,java.lang.String> flavorToDimension);
    method public com.android.build.api.variant.VariantSelector withName(java.util.regex.Pattern pattern);
    method public com.android.build.api.variant.VariantSelector withName(String name);
  }

}

package com.android.build.gradle {

  public final class AssetPackBundlePlugin implements org.gradle.api.Plugin<org.gradle.api.Project> {
    ctor public AssetPackBundlePlugin();
    method public void apply(org.gradle.api.Project project);
  }

  public final class AssetPackBundlePluginKt {
  }

  public final class AssetPackPlugin implements org.gradle.api.Plugin<org.gradle.api.Project> {
    ctor public AssetPackPlugin();
    method public void apply(org.gradle.api.Project project);
  }

  public final class AssetPackPluginKt {
  }

}

package com.android.build.gradle.api {

  public final class AndroidBasePlugin implements org.gradle.api.Plugin<org.gradle.api.Project> {
    ctor public AndroidBasePlugin();
    method public void apply(org.gradle.api.Project project);
  }

}

