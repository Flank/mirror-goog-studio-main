Deprecated Android Gradle Plugin API.
-------------------------------------------------------------------------
ATTENTION REVIEWER: If this needs to be changed, please make sure changes
are announced on go/as-release-notes.
-------------------------------------------------------------------------
Deprecated from AGP UNKNOWN_VERSION
  * com.android.build.api.dsl.AaptOptions implements com.android.build.api.dsl.AndroidResources
  * com.android.build.api.dsl.AdbOptions implements com.android.build.api.dsl.Installation
  * com.android.build.api.dsl.AndroidSourceSet.getJni: com.android.build.api.dsl.AndroidSourceDirectorySet ()
  * com.android.build.api.dsl.AndroidSourceSet.jni: void (kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AndroidSourceDirectorySet, kotlin.Unit>)
  * com.android.build.api.dsl.ApkSigningConfig.isV1SigningEnabled: boolean ()
  * com.android.build.api.dsl.ApkSigningConfig.isV2SigningEnabled: boolean ()
  * com.android.build.api.dsl.ApkSigningConfig.setV1SigningEnabled: void (boolean)
  * com.android.build.api.dsl.ApkSigningConfig.setV2SigningEnabled: void (boolean)
  * com.android.build.api.dsl.ApplicationBaseFlavor.maxSdkVersion: void (int)
  * com.android.build.api.dsl.ApplicationBaseFlavor.setTargetSdkVersion: void (java.lang.String)
  * com.android.build.api.dsl.ApplicationBaseFlavor.targetSdkVersion: void (int)
  * com.android.build.api.dsl.ApplicationBaseFlavor.targetSdkVersion: void (java.lang.String)
  * com.android.build.api.dsl.BaseFlavor.minSdkVersion: void (int)
  * com.android.build.api.dsl.BaseFlavor.minSdkVersion: void (java.lang.String)
  * com.android.build.api.dsl.BaseFlavor.resConfig: void (java.lang.String)
  * com.android.build.api.dsl.BaseFlavor.resConfigs: void (java.lang.String[])
  * com.android.build.api.dsl.BaseFlavor.resConfigs: void (java.util.Collection<java.lang.String>)
  * com.android.build.api.dsl.BaseFlavor.setMinSdkVersion: void (int)
  * com.android.build.api.dsl.BaseFlavor.setMinSdkVersion: void (java.lang.String)
  * com.android.build.api.dsl.BaseFlavor.setTestFunctionalTest: java.lang.Object (boolean)
  * com.android.build.api.dsl.BaseFlavor.setTestHandleProfiling: java.lang.Object (boolean)
  * com.android.build.api.dsl.BaseFlavor.setTestInstrumentationRunnerArguments: java.lang.Object (java.util.Map<java.lang.String, java.lang.String>)
  * com.android.build.api.dsl.BaseFlavor.testInstrumentationRunnerArgument: void (java.lang.String, java.lang.String)
  * com.android.build.api.dsl.BaseFlavor.testInstrumentationRunnerArguments: void (java.util.Map<java.lang.String, java.lang.String>)
  * com.android.build.api.dsl.BuildType.isZipAlignEnabled: boolean ()
  * com.android.build.api.dsl.BuildType.setMatchingFallbacks: void (java.lang.String[])
  * com.android.build.api.dsl.BuildType.setMatchingFallbacks: void (java.util.List<java.lang.String>)
  * com.android.build.api.dsl.BuildType.setZipAlignEnabled: void (boolean)
  * com.android.build.api.dsl.CommonExtension.aaptOptions: void (kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AaptOptions, kotlin.Unit>)
  * com.android.build.api.dsl.CommonExtension.adbOptions: void (kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.AdbOptions, kotlin.Unit>)
  * com.android.build.api.dsl.CommonExtension.buildToolsVersion: void (java.lang.String)
  * com.android.build.api.dsl.CommonExtension.compileSdkVersion: void (int)
  * com.android.build.api.dsl.CommonExtension.compileSdkVersion: void (java.lang.String)
  * com.android.build.api.dsl.CommonExtension.flavorDimensions: void (java.lang.String[])
  * com.android.build.api.dsl.CommonExtension.getAaptOptions: com.android.build.api.dsl.AaptOptions ()
  * com.android.build.api.dsl.CommonExtension.getAdbOptions: com.android.build.api.dsl.AdbOptions ()
  * com.android.build.api.dsl.CommonExtension.getJacoco: com.android.build.api.dsl.JacocoOptions ()
  * com.android.build.api.dsl.CommonExtension.getLintOptions: com.android.build.api.dsl.LintOptions ()
  * com.android.build.api.dsl.CommonExtension.getSdkComponents: com.android.build.api.dsl.SdkComponents ()
  * com.android.build.api.dsl.CommonExtension.jacoco: void (kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.JacocoOptions, kotlin.Unit>)
  * com.android.build.api.dsl.CommonExtension.lintOptions: void (kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.LintOptions, kotlin.Unit>)
  * com.android.build.api.dsl.ComposeOptions.getKotlinCompilerVersion: java.lang.String ()
  * com.android.build.api.dsl.ComposeOptions.setKotlinCompilerVersion: void (java.lang.String)
  * com.android.build.api.dsl.FailureRetention implements com.android.build.api.dsl.EmulatorSnapshots
  * com.android.build.api.dsl.FailureRetention.getEnable: boolean ()
  * com.android.build.api.dsl.FailureRetention.getMaxSnapshots: int ()
  * com.android.build.api.dsl.FailureRetention.setEnable: void (boolean)
  * com.android.build.api.dsl.FailureRetention.setMaxSnapshots: void (int)
  * com.android.build.api.dsl.JacocoOptions implements com.android.build.api.dsl.TestCoverage
  * com.android.build.api.dsl.JacocoOptions.getVersion: java.lang.String ()
  * com.android.build.api.dsl.JacocoOptions.setVersion: void (java.lang.String)
  * com.android.build.api.dsl.LibraryBaseFlavor.setTargetSdkVersion: void (java.lang.String)
  * com.android.build.api.dsl.LibraryBaseFlavor.targetSdkVersion: void (int)
  * com.android.build.api.dsl.LibraryBaseFlavor.targetSdkVersion: void (java.lang.String)
  * com.android.build.api.dsl.Lint.getIgnore: java.util.Set<java.lang.String> ()
  * com.android.build.api.dsl.LintOptions
  * com.android.build.api.dsl.LintOptions.baseline: void (java.io.File)
  * com.android.build.api.dsl.LintOptions.baseline: void (java.lang.String)
  * com.android.build.api.dsl.LintOptions.check: void (java.lang.String)
  * com.android.build.api.dsl.LintOptions.check: void (java.lang.String[])
  * com.android.build.api.dsl.LintOptions.checkOnly: void (java.lang.String)
  * com.android.build.api.dsl.LintOptions.checkOnly: void (java.lang.String[])
  * com.android.build.api.dsl.LintOptions.disable: void (java.lang.String)
  * com.android.build.api.dsl.LintOptions.disable: void (java.lang.String[])
  * com.android.build.api.dsl.LintOptions.enable: void (java.lang.String)
  * com.android.build.api.dsl.LintOptions.enable: void (java.lang.String[])
  * com.android.build.api.dsl.LintOptions.error: void (java.lang.String)
  * com.android.build.api.dsl.LintOptions.error: void (java.lang.String[])
  * com.android.build.api.dsl.LintOptions.fatal: void (java.lang.String)
  * com.android.build.api.dsl.LintOptions.fatal: void (java.lang.String[])
  * com.android.build.api.dsl.LintOptions.getBaselineFile: java.io.File ()
  * com.android.build.api.dsl.LintOptions.getCheckOnly: java.util.Set<java.lang.String> ()
  * com.android.build.api.dsl.LintOptions.getDisable: java.util.Set<java.lang.String> ()
  * com.android.build.api.dsl.LintOptions.getEnable: java.util.Set<java.lang.String> ()
  * com.android.build.api.dsl.LintOptions.getHtmlOutput: java.io.File ()
  * com.android.build.api.dsl.LintOptions.getHtmlReport: boolean ()
  * com.android.build.api.dsl.LintOptions.getLintConfig: java.io.File ()
  * com.android.build.api.dsl.LintOptions.getSarifOutput: java.io.File ()
  * com.android.build.api.dsl.LintOptions.getSarifReport: boolean ()
  * com.android.build.api.dsl.LintOptions.getTextOutput: java.io.File ()
  * com.android.build.api.dsl.LintOptions.getTextReport: boolean ()
  * com.android.build.api.dsl.LintOptions.getXmlOutput: java.io.File ()
  * com.android.build.api.dsl.LintOptions.getXmlReport: boolean ()
  * com.android.build.api.dsl.LintOptions.ignore: void (java.lang.String)
  * com.android.build.api.dsl.LintOptions.ignore: void (java.lang.String[])
  * com.android.build.api.dsl.LintOptions.informational: void (java.lang.String)
  * com.android.build.api.dsl.LintOptions.informational: void (java.lang.String[])
  * com.android.build.api.dsl.LintOptions.isAbortOnError: boolean ()
  * com.android.build.api.dsl.LintOptions.isAbsolutePaths: boolean ()
  * com.android.build.api.dsl.LintOptions.isCheckAllWarnings: boolean ()
  * com.android.build.api.dsl.LintOptions.isCheckDependencies: boolean ()
  * com.android.build.api.dsl.LintOptions.isCheckGeneratedSources: boolean ()
  * com.android.build.api.dsl.LintOptions.isCheckReleaseBuilds: boolean ()
  * com.android.build.api.dsl.LintOptions.isCheckTestSources: boolean ()
  * com.android.build.api.dsl.LintOptions.isExplainIssues: boolean ()
  * com.android.build.api.dsl.LintOptions.isIgnoreTestSources: boolean ()
  * com.android.build.api.dsl.LintOptions.isIgnoreWarnings: boolean ()
  * com.android.build.api.dsl.LintOptions.isNoLines: boolean ()
  * com.android.build.api.dsl.LintOptions.isQuiet: boolean ()
  * com.android.build.api.dsl.LintOptions.isShowAll: boolean ()
  * com.android.build.api.dsl.LintOptions.isWarningsAsErrors: boolean ()
  * com.android.build.api.dsl.LintOptions.setAbortOnError: void (boolean)
  * com.android.build.api.dsl.LintOptions.setAbsolutePaths: void (boolean)
  * com.android.build.api.dsl.LintOptions.setBaselineFile: void (java.io.File)
  * com.android.build.api.dsl.LintOptions.setCheckAllWarnings: void (boolean)
  * com.android.build.api.dsl.LintOptions.setCheckDependencies: void (boolean)
  * com.android.build.api.dsl.LintOptions.setCheckGeneratedSources: void (boolean)
  * com.android.build.api.dsl.LintOptions.setCheckReleaseBuilds: void (boolean)
  * com.android.build.api.dsl.LintOptions.setCheckTestSources: void (boolean)
  * com.android.build.api.dsl.LintOptions.setExplainIssues: void (boolean)
  * com.android.build.api.dsl.LintOptions.setHtmlOutput: void (java.io.File)
  * com.android.build.api.dsl.LintOptions.setHtmlReport: void (boolean)
  * com.android.build.api.dsl.LintOptions.setIgnoreTestSources: void (boolean)
  * com.android.build.api.dsl.LintOptions.setIgnoreWarnings: void (boolean)
  * com.android.build.api.dsl.LintOptions.setLintConfig: void (java.io.File)
  * com.android.build.api.dsl.LintOptions.setNoLines: void (boolean)
  * com.android.build.api.dsl.LintOptions.setQuiet: void (boolean)
  * com.android.build.api.dsl.LintOptions.setSarifOutput: void (java.io.File)
  * com.android.build.api.dsl.LintOptions.setSarifReport: void (boolean)
  * com.android.build.api.dsl.LintOptions.setShowAll: void (boolean)
  * com.android.build.api.dsl.LintOptions.setTextOutput: void (java.io.File)
  * com.android.build.api.dsl.LintOptions.setTextReport: void (boolean)
  * com.android.build.api.dsl.LintOptions.setWarningsAsErrors: void (boolean)
  * com.android.build.api.dsl.LintOptions.setXmlOutput: void (java.io.File)
  * com.android.build.api.dsl.LintOptions.setXmlReport: void (boolean)
  * com.android.build.api.dsl.LintOptions.textOutput: void (java.io.File)
  * com.android.build.api.dsl.LintOptions.textOutput: void (java.lang.String)
  * com.android.build.api.dsl.LintOptions.warning: void (java.lang.String)
  * com.android.build.api.dsl.LintOptions.warning: void (java.lang.String[])
  * com.android.build.api.dsl.PackagingOptions.doNotStrip: void (java.lang.String)
  * com.android.build.api.dsl.PackagingOptions.exclude: void (java.lang.String)
  * com.android.build.api.dsl.PackagingOptions.getDoNotStrip: java.util.Set<java.lang.String> ()
  * com.android.build.api.dsl.PackagingOptions.getExcludes: java.util.Set<java.lang.String> ()
  * com.android.build.api.dsl.PackagingOptions.getMerges: java.util.Set<java.lang.String> ()
  * com.android.build.api.dsl.PackagingOptions.getPickFirsts: java.util.Set<java.lang.String> ()
  * com.android.build.api.dsl.PackagingOptions.merge: void (java.lang.String)
  * com.android.build.api.dsl.PackagingOptions.pickFirst: void (java.lang.String)
  * com.android.build.api.dsl.PostProcessing.getCodeShrinker: java.lang.String ()
  * com.android.build.api.dsl.PostProcessing.setCodeShrinker: void (java.lang.String)
  * com.android.build.api.dsl.ProductFlavor.setDimension: java.lang.Void (java.lang.String)
  * com.android.build.api.dsl.ProductFlavor.setMatchingFallbacks: void (java.lang.String[])
  * com.android.build.api.dsl.ProductFlavor.setMatchingFallbacks: void (java.util.List<java.lang.String>)
  * com.android.build.api.dsl.TestBaseFlavor.maxSdkVersion: void (int)
  * com.android.build.api.dsl.TestBaseFlavor.setTargetSdkVersion: void (java.lang.String)
  * com.android.build.api.dsl.TestBaseFlavor.targetSdkVersion: void (int)
  * com.android.build.api.dsl.TestBaseFlavor.targetSdkVersion: void (java.lang.String)
  * com.android.build.api.dsl.TestOptions.failureRetention: void (kotlin.jvm.functions.Function1<? super com.android.build.api.dsl.FailureRetention, kotlin.Unit>)
  * com.android.build.api.dsl.TestOptions.getFailureRetention: com.android.build.api.dsl.FailureRetention ()
  * com.android.build.api.dsl.VariantDimension.getMultiDexKeepFile: java.io.File ()
  * com.android.build.api.dsl.VariantDimension.setManifestPlaceholders: java.lang.Void (java.util.Map<java.lang.String, ?>)
  * com.android.build.api.dsl.VariantDimension.setMultiDexKeepFile: void (java.io.File)
  * com.android.build.api.transform.Context
  * com.android.build.api.transform.Context.getLogging: org.gradle.api.logging.LoggingManager ()
  * com.android.build.api.transform.Context.getPath: java.lang.String ()
  * com.android.build.api.transform.Context.getProjectName: java.lang.String ()
  * com.android.build.api.transform.Context.getTemporaryDir: java.io.File ()
  * com.android.build.api.transform.Context.getVariantName: java.lang.String ()
  * com.android.build.api.transform.Context.getWorkerExecutor: org.gradle.workers.WorkerExecutor ()
  * com.android.build.api.transform.DirectoryInput implements com.android.build.api.transform.QualifiedContent
  * com.android.build.api.transform.DirectoryInput.getChangedFiles: java.util.Map<java.io.File, com.android.build.api.transform.Status> ()
  * com.android.build.api.transform.Format extends java.lang.Enum
  * com.android.build.api.transform.Format.valueOf: com.android.build.api.transform.Format (java.lang.String)
  * com.android.build.api.transform.Format.values: com.android.build.api.transform.Format[] ()
  * com.android.build.api.transform.JarInput implements com.android.build.api.transform.QualifiedContent
  * com.android.build.api.transform.JarInput.getStatus: com.android.build.api.transform.Status ()
  * com.android.build.api.transform.QualifiedContent
  * com.android.build.api.transform.QualifiedContent.getContentTypes: java.util.Set<com.android.build.api.transform.QualifiedContent$ContentType> ()
  * com.android.build.api.transform.QualifiedContent.getFile: java.io.File ()
  * com.android.build.api.transform.QualifiedContent.getName: java.lang.String ()
  * com.android.build.api.transform.QualifiedContent.getScopes: java.util.Set<? super com.android.build.api.transform.QualifiedContent$Scope> ()
  * com.android.build.api.transform.SecondaryFile
  * com.android.build.api.transform.SecondaryFile.<init>: com.android.build.api.transform.SecondaryFile (java.io.File, boolean)
  * com.android.build.api.transform.SecondaryFile.getFile: java.io.File ()
  * com.android.build.api.transform.SecondaryFile.getFileCollection: org.gradle.api.file.FileCollection ()
  * com.android.build.api.transform.SecondaryFile.getFileCollection: org.gradle.api.file.FileCollection (org.gradle.api.Project)
  * com.android.build.api.transform.SecondaryFile.incremental: com.android.build.api.transform.SecondaryFile (java.io.File)
  * com.android.build.api.transform.SecondaryFile.incremental: com.android.build.api.transform.SecondaryFile (java.util.function.Supplier<org.gradle.api.file.FileCollection>)
  * com.android.build.api.transform.SecondaryFile.incremental: com.android.build.api.transform.SecondaryFile (org.gradle.api.file.FileCollection)
  * com.android.build.api.transform.SecondaryFile.nonIncremental: com.android.build.api.transform.SecondaryFile (java.io.File)
  * com.android.build.api.transform.SecondaryFile.nonIncremental: com.android.build.api.transform.SecondaryFile (java.util.function.Supplier<org.gradle.api.file.FileCollection>)
  * com.android.build.api.transform.SecondaryFile.nonIncremental: com.android.build.api.transform.SecondaryFile (org.gradle.api.file.FileCollection)
  * com.android.build.api.transform.SecondaryFile.supportsIncrementalBuild: boolean ()
  * com.android.build.api.transform.SecondaryInput
  * com.android.build.api.transform.SecondaryInput.getSecondaryInput: com.android.build.api.transform.SecondaryFile ()
  * com.android.build.api.transform.SecondaryInput.getStatus: com.android.build.api.transform.Status ()
  * com.android.build.api.transform.Status extends java.lang.Enum
  * com.android.build.api.transform.Status.valueOf: com.android.build.api.transform.Status (java.lang.String)
  * com.android.build.api.transform.Status.values: com.android.build.api.transform.Status[] ()
  * com.android.build.api.transform.Transform
  * com.android.build.api.transform.Transform.<init>: com.android.build.api.transform.Transform ()
  * com.android.build.api.transform.Transform.applyToVariant: boolean (com.android.build.api.variant.VariantInfo)
  * com.android.build.api.transform.Transform.getInputTypes: java.util.Set<com.android.build.api.transform.QualifiedContent$ContentType> ()
  * com.android.build.api.transform.Transform.getName: java.lang.String ()
  * com.android.build.api.transform.Transform.getOutputTypes: java.util.Set<com.android.build.api.transform.QualifiedContent$ContentType> ()
  * com.android.build.api.transform.Transform.getParameterInputs: java.util.Map<java.lang.String, java.lang.Object> ()
  * com.android.build.api.transform.Transform.getReferencedScopes: java.util.Set<? super com.android.build.api.transform.QualifiedContent$Scope> ()
  * com.android.build.api.transform.Transform.getScopes: java.util.Set<? super com.android.build.api.transform.QualifiedContent$Scope> ()
  * com.android.build.api.transform.Transform.getSecondaryDirectoryOutputs: java.util.Collection<java.io.File> ()
  * com.android.build.api.transform.Transform.getSecondaryFileInputs: java.util.Collection<java.io.File> ()
  * com.android.build.api.transform.Transform.getSecondaryFileOutputs: java.util.Collection<java.io.File> ()
  * com.android.build.api.transform.Transform.getSecondaryFiles: java.util.Collection<com.android.build.api.transform.SecondaryFile> ()
  * com.android.build.api.transform.Transform.isCacheable: boolean ()
  * com.android.build.api.transform.Transform.isIncremental: boolean ()
  * com.android.build.api.transform.Transform.setOutputDirectory: void (org.gradle.api.provider.Property<org.gradle.api.file.Directory>)
  * com.android.build.api.transform.Transform.setOutputFile: void (org.gradle.api.provider.Property<org.gradle.api.file.RegularFile>)
  * com.android.build.api.transform.Transform.transform: void (com.android.build.api.transform.Context, java.util.Collection<com.android.build.api.transform.TransformInput>, java.util.Collection<com.android.build.api.transform.TransformInput>, com.android.build.api.transform.TransformOutputProvider, boolean) throws java.io.IOException, com.android.build.api.transform.TransformException, java.lang.InterruptedException
  * com.android.build.api.transform.Transform.transform: void (com.android.build.api.transform.TransformInvocation) throws com.android.build.api.transform.TransformException, java.lang.InterruptedException, java.io.IOException
  * com.android.build.api.transform.TransformException extends java.lang.Exception
  * com.android.build.api.transform.TransformException.<init>: com.android.build.api.transform.TransformException (java.lang.String)
  * com.android.build.api.transform.TransformException.<init>: com.android.build.api.transform.TransformException (java.lang.String, java.lang.Throwable)
  * com.android.build.api.transform.TransformException.<init>: com.android.build.api.transform.TransformException (java.lang.Throwable)
  * com.android.build.api.transform.TransformInput
  * com.android.build.api.transform.TransformInput.getDirectoryInputs: java.util.Collection<com.android.build.api.transform.DirectoryInput> ()
  * com.android.build.api.transform.TransformInput.getJarInputs: java.util.Collection<com.android.build.api.transform.JarInput> ()
  * com.android.build.api.transform.TransformInvocation
  * com.android.build.api.transform.TransformInvocation.getContext: com.android.build.api.transform.Context ()
  * com.android.build.api.transform.TransformInvocation.getInputs: java.util.Collection<com.android.build.api.transform.TransformInput> ()
  * com.android.build.api.transform.TransformInvocation.getOutputProvider: com.android.build.api.transform.TransformOutputProvider ()
  * com.android.build.api.transform.TransformInvocation.getReferencedInputs: java.util.Collection<com.android.build.api.transform.TransformInput> ()
  * com.android.build.api.transform.TransformInvocation.getSecondaryInputs: java.util.Collection<com.android.build.api.transform.SecondaryInput> ()
  * com.android.build.api.transform.TransformInvocation.isIncremental: boolean ()
  * com.android.build.api.transform.TransformOutputProvider
  * com.android.build.api.transform.TransformOutputProvider.deleteAll: void () throws java.io.IOException
  * com.android.build.api.transform.TransformOutputProvider.getContentLocation: java.io.File (java.lang.String, java.util.Set<com.android.build.api.transform.QualifiedContent$ContentType>, java.util.Set<? super com.android.build.api.transform.QualifiedContent$Scope>, com.android.build.api.transform.Format)
  * com.android.build.api.variant.AndroidComponentsExtension.finalizeDSl: void (org.gradle.api.Action<DslExtensionT>)
  * com.android.build.api.variant.ComponentBuilder.getEnabled: boolean ()
  * com.android.build.api.variant.ComponentBuilder.setEnabled: void (boolean)
  * com.android.build.api.variant.HasAndroidTestBuilder.getAndroidTestEnabled: boolean ()
  * com.android.build.api.variant.HasAndroidTestBuilder.setAndroidTestEnabled: void (boolean)
  * com.android.build.api.variant.VariantBuilder.getUnitTestEnabled: boolean ()
  * com.android.build.api.variant.VariantInfo
  * com.android.build.api.variant.VariantInfo.getBuildTypeName: java.lang.String ()
  * com.android.build.api.variant.VariantInfo.getFlavorNames: com.google.common.collect.ImmutableList<java.lang.String> ()
  * com.android.build.api.variant.VariantInfo.getFullVariantName: java.lang.String ()
  * com.android.build.api.variant.VariantInfo.isDebuggable: boolean ()
  * com.android.build.api.variant.VariantInfo.isTest: boolean ()
  * com.android.build.api.variant.VariantOutput.getEnable: org.gradle.api.provider.Property<java.lang.Boolean> ()
Deprecated from AGP 7.2.0
  * com.android.build.api.variant.Component.setAsmFramesComputationMode: void (com.android.build.api.instrumentation.FramesComputationMode)
  * com.android.build.api.variant.Component.transformClassesWith: void (java.lang.Class<? extends com.android.build.api.instrumentation.AsmClassVisitorFactory<ParamT>>, com.android.build.api.instrumentation.InstrumentationScope, kotlin.jvm.functions.Function1<? super ParamT, kotlin.Unit>)
