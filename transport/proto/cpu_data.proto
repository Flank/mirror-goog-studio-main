/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package profiler.proto;
option java_package = "com.android.tools.profiler.proto";
option java_outer_classname = "Cpu";

// CPU usage data of an app process and the entire system at a given point.
//
// CPU usage data is most valuable when app data is combined with system data,
// e.g., showing the CPU usage percentage number. One data consumer (e.g., an
// Android Studio instance) would request an app's data, and another consumer
// (e.g., another Android Studio instance) would request another app's. Both of
// them need system data. Therefore, we put system data together with every
// piece of app specific data.
//
// The absolute values of fields in this message are not very interesting.
// The difference of two instances is more useful. It can show the system-
// wide CPU utilization percentage and an app's CPU utilization percentage.
// The values of the fields may overflow their type, but the usefulness stays
// the same.
message CpuUsageData {
  // Timestamp(ns) when the data sample was collected.
  //
  // TODO: in the new pipeline, timestamp is stored in the common Event proto.
  // Remove this field when old pipeline is deprecated.
  int64 end_timestamp = 1;
  // Amount of time that this process has been using CPU, measured in
  // milliseconds.
  int64 app_cpu_time_in_millisec = 2;
  // Amount of time that the entire system (including applications) has been
  // using CPU, measured in milliseconds.
  int64 system_cpu_time_in_millisec = 3;
  // Amount of time since the system start, measured in milliseconds.
  int64 elapsed_time_in_millisec = 4;
  // System usage per core.
  repeated CpuCoreUsageData cores = 5;
}

message CpuCoreUsageData {
  // Index of the CPU core.
  int32 core = 1;
  // Amount of time that the entire system (including applications) has been
  // using this CPU core, measured in milliseconds.
  int64 system_cpu_time_in_millisec = 2;
  // Amount of time since the system start, measured in milliseconds.
  int64 elapsed_time_in_millisec = 3;
  // Current CPU frequency in kHz. Used for energy usage estimation.
  int32 frequency_in_khz = 4;
}

// Represents a single event when a thread changes its state.
message CpuThreadData {
  enum State {
    UNSPECIFIED = 0;
    RUNNING = 1;
    SLEEPING = 2;
    WAITING = 3;
    ZOMBIE = 4;
    STOPPED = 5;
    TRACING = 6;
    PAGING = 7;
    DEAD = 8;
    WAKEKILL = 9;
    WAKING = 10;
    PARKED = 11;
  }

  // Thread ID as returned from the Android OS. Unique within a process.
  int32 tid = 1;

  // Thread name as returned from the Android OS.
  string name = 2;

  // The current thread state in this activity.
  State state = 3;
}

enum CpuTraceType {
  UNSPECIFIED_TYPE = 0;
  ART = 1;
  SIMPLEPERF = 2;
  ATRACE = 3;
}

enum CpuTraceMode {
  UNSPECIFIED_MODE = 0;
  SAMPLED = 1;
  INSTRUMENTED = 2;
}

enum TraceInitiationType {
  UNSPECIFIED_INITIATION = 0;
  INITIATED_BY_UI = 1;  // specifically means non-startup UI operations.
  INITIATED_BY_API = 2;
  INITIATED_BY_STARTUP = 3;
}

// A CpuTraceInfo contains the information regarding a trace
// and should be returned if its time overlaps with the request time range.
message CpuTraceInfo {
  int64 trace_id = 1;
  CpuTraceType trace_type = 2;
  CpuTraceMode trace_mode = 3;
  TraceInitiationType initiation_type = 4;
  int64 from_timestamp = 5;  // inclusive
  int64 to_timestamp = 6;    // inclusive
  // Path to the binary file containing the trace content.
  string trace_file_path = 7;
  // These thread ids are those having data captured by the designated trace.
  // TODO this is currently updated by Studio back into the database after
  // a capture has been parsed. This information is used strictly to highlight
  // the items in the Thread view that has captured data.
  // In the new pipeline, we don't support that type of workflow yet (aka
  // updating existing data). Potential option would be to have this as a
  // separate data kind, or remove this feature (just highlight all threads
  // within the capture) or implement it differently (caching on Studio-side).
  repeated int32 tids = 8;
}

message StartCpuTrace {
  // Agent is responsible for providing these additional info for API-
  // initiated tracing.
  message ApiStartTracingMetaData {
    int64 start_timestamp = 1;
  }
  CpuTraceConfiguration configuration = 1;
  // Set only if configuration's initiation_type is |INITIATED_BY_API|.
  ApiStartTracingMetaData api_start_metadata = 2;
}

message StopCpuTrace {
  // Agent is responsible for providing these additional info for API-
  // initiated tracing.
  message ApiStopTracingMetaData {
    int64 stop_timestamp = 1;
    // The raw bytes of the trace. The daemon is responsible for storing
    // this in the generic cache that can be referenced via the trace's id.
    string trace_content = 2;
  }
  CpuTraceConfiguration configuration = 1;
    // Set only if configuration's initiation_type is |INITIATED_BY_API|.
  ApiStopTracingMetaData api_stop_metadata = 2;
}

message CpuTraceConfiguration {
  message UserOptions {
    // Name of the configuration. For Studio-side display only.
    string name = 1;

    CpuTraceMode trace_mode = 2;

    CpuTraceType trace_type = 3;

    // Whether to disable live allocation tracking during tracing.
    // This is primarily used to reduce app performance overhead from live
    // allocation tracking. For Studio-side only.
    bool disable_live_allocation = 4;

    // When using ATrace/Perfetto, the size of the buffer that holds tracing data.
    int32 buffer_size_in_mb = 5;

    // When using sampling, the sampling interval in microseconds.
    int32 sampling_interval_us = 6;
  }

  UserOptions user_options = 1;

  // The name of the app to be traced. Most if not all trace modes supports the
  // app_name as the input instead pid. In the case of startup profiling, we don't
  // know the pid anyway, so we use the app's name for all scenarios instead.
  string app_name = 2;

  TraceInitiationType initiation_type = 3;

  // ABI CPU architecture of the simpleperf/perfetto binary to use. This
  // should match the arch of the process and should be one the
  // values defined by SdkConstants.CPU_ARCH_*, e.g. 'arm', 'arm64', 'x86'.
  string abi_cpu_arch = 4;
}

// Data for the CpuCoreConfig command.
message CpuCoreConfigData {
  repeated CpuCoreConfig core_configs = 1;
}

// CPU per-core physical configuration data.
message CpuCoreConfig {
  int32 core = 1;
  int32 min_frequency_in_khz = 2;
  int32 max_frequency_in_khz = 3;
}