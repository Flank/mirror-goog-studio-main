/*
 * Copyright (C) 2019 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";

package app_inspection;
option java_package = "com.android.tools.app.inspection";
option java_outer_classname = "AppInspection";

// A command originates from the host and should *always* get a response.
// (If no response comes, it means the device likely crashed or ANR'd)
// A command may additionally generate zero or more events.
message AppInspectionCommand {
  // Uniquely identifies the inspector that sent this event.
  // Used by studio to route to appropriate event handler.
  // This id is defined by inspector's owner. (e.g â€œandroidx.workmanager")
  string inspector_id = 1;
  // DO NOT USE.
  // A unique id associated with this command. To be set by inspection service
  // when sending command to inspector.
  uint32 command_id = 2;
  oneof union {
    CreateInspectorCommand create_inspector_command = 3;
    DisposeInspectorCommand dispose_inspector_command = 4;
    RawCommand raw_inspector_command = 5;
  }
}

// A command to create an inspector and register it as a listener
// for incoming commands.
message CreateInspectorCommand {
  // On device path to the jar that has a dexed code of the given inspector.
  string dex_path = 1;
}

// A command to dispose the inspector.
// Service layer won't keep reference to an inspector anymore.
// All events from and commands to it will be ignored
// This command will be propagated to inspector instance as well, so it should react accordingly.
// For example, if an inspector was listening for db changes, it should unregister
// itself.
message DisposeInspectorCommand {}

// Opaque command to an inspector.
message RawCommand {
  bytes content = 1;
}

// A response is sent from the device to answer a command.
message AppInspectionResponse {
  uint32 command_id = 1;
  oneof union {
    ServiceResponse service_response = 2;
    RawResponse raw_response = 3;
  }
}

// An event is initiated from device, informing the UI it should probably update.
message AppInspectionEvent {
  // Uniquely identifies the inspector that sent this event.
  // Used by studio to route to appropriate event handler.
  string inspector_id = 1;
  oneof union {
    RawEvent raw_event = 2;
    CrashEvent crash_event = 3;
  }
}

// Response sent in reply for all of the "...InspectorCommand" commands.
message ServiceResponse {
  enum Status {
    SUCCESS = 0;
    ERROR = 1;
  }
  // SUCCESS if originating command successed.
  Status status = 1;
  // Additional info if command failed.
  string error_message = 2;
}

// Opaque response from an inspector.
message RawResponse {
  bytes content = 1;
}

// Opaque event from an inspector.
message RawEvent {
  // An opaque serialized event, inspectors themselves define serialization format
  bytes content = 1;
}

// Sent when inspector encounters an unrecoverable error.
message CrashEvent {
  // a string message about the crash
  string error_message = 1;
}
