/*
 * Copyright 2020 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto3";
package backgroundtask.inspection;
option java_package = "backgroundtask.inspection";
option java_outer_classname = "BackgroundTaskInspectorProtocol";
option optimize_for = LITE_RUNTIME;

// ======= MESSAGES =======

message Command {
    oneof specialized {
        TrackBackgroundTaskCommand track_background_task = 1;
    }
}

message TrackBackgroundTaskCommand {}

message Response {
    oneof specialized {
        TrackBackgroundTaskResponse track_background_task = 1;
    }
}

message TrackBackgroundTaskResponse {}

message Event {
    int64 timestamp = 1;
    oneof specialized {
        BackgroundTaskEvent background_task_event = 2;
        DebugEvent debug = 3;
    }
}

message BackgroundTaskEvent {
    int64 task_id = 1;
    oneof specialized {
        AlarmSet alarm_set = 2;
        AlarmFired alarm_fired = 3;
        AlarmCancelled alarm_cancelled = 4;
    }
}

// ======= ALARM EVENT =======

message AlarmSet {
  enum Type {
    UNDEFINED_ALARM_TYPE = 0;
    RTC = 1;
    RTC_WAKEUP = 2;
    ELAPSED_REALTIME = 3;
    ELAPSED_REALTIME_WAKEUP = 4;
  }

  // Type of alarm.
  Type type = 1;
  // Time in milliseconds that the alarm should go off, using the appropriate
  // clock (depending on the alarm type). Used by all AlarmManager.set*()
  // methods.
  int64 trigger_ms = 2;
  // The length of the requested delivery window, in milliseconds. The alarm
  // will be delivered no later than this many milliseconds after trigger_ms.
  // Used by AlarmManager.setWindow().
  int64 window_ms = 3;
  // Interval in milliseconds between subsequent repeats of the alarm. Used by
  // AlarmManager.setRepeating() and AlarmManager.setInexactRepeating().
  int64 interval_ms = 4;
  // The alarm action can either be a PendingIntent or an AlarmListener.
  oneof set_action {
    // Metadata of the action to perform when the alarm goes off.
    PendingIntent operation = 5;
    // Metadata of the alarm listener whose onAlarm() method will be called when
    // the alarm goes off.
    AlarmListener listener = 6;
  }
}

message AlarmCancelled {}

message AlarmFired {}

message PendingIntent {
  // The package name of the PendingIntent, or empty if there is none
  // associated with it.
  string creator_package = 1;
  // The uid of the PendingIntent, or -1 if there is none associated with it.
  int32 creator_uid = 2;
}

message AlarmListener {
  // String describing the alarm listener, used for logging and battery-use
  // attribution.
  string tag = 1;
}

// ======= DEBUG EVENT =======

message DebugEvent {
    string message = 1;
}
