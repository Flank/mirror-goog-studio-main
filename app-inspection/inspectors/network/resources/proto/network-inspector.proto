syntax = "proto3";
package studio.network.inspection;
option java_package = "studio.network.inspection";
option java_outer_classname = "NetworkInspectorProtocol";

message Event {
    // Timestamp of the event in nanoseconds.
    int64 timestamp = 1;
    oneof union {
        HttpConnectionEvent http_connection_event = 11;
        SpeedEvent speed_event = 12;
    }
}

// Message representing a network event from the inspector.
message HttpConnectionEvent {
    message RequestStarted {
        string url = 1;
        string trace = 2;
        // Header fields associated with this request. See also:
        // https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Request_fields.
        string fields = 3;
        string method = 4;
    }

    message RequestCompleted {
    }

    message ResponseStarted {
        // Header fields associated with this response. See also:
        // https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Response_fields.
        string fields = 1;
    }

    message ResponseIntercepted {
        bool status_code = 1;
        bool header_added = 2;
        bool header_replaced = 3;
        bool body_replaced = 4;
        bool body_modified = 5;
    }

    message ResponseCompleted {
    }

    // Sent when an http connection is closed or an error occurred.
    message Closed {
        // Indicates whether the http connection was completed or aborted.
        bool completed = 1;
    }

    // The payload associated with an http request or response.
    // A connection can have up to two payloads, one for request and one for response.
    message Payload {
        bytes payload = 1;
    }

    message ThreadData {
        // ID of the thread obtained from Java, which is different from the thread ID
        // obtained in a JNI context.
        int64 thread_id = 1;
        // Name of the thread as obtained by Thread#getName()
        string thread_name = 2;
    }

    int64 connection_id = 1;

    oneof union {
        RequestStarted http_request_started = 11;
        RequestCompleted http_request_completed = 12;
        ResponseStarted http_response_started = 13;
        ResponseIntercepted http_response_intercepted = 14;
        ResponseCompleted http_response_completed = 15;
        Closed http_closed = 16;
        Payload request_payload = 17;
        Payload response_payload = 18;
        ThreadData http_thread = 19;
    }
}

// The network transmission and receiving speed experienced by the app.
message SpeedEvent {
    int64 tx_speed = 1; // transmission speed in bytes / s
    int64 rx_speed = 2; // receive speed in bytes / s
}

message Command {
    oneof union {
        // Signals the start of inspection. This has the side effect of
        // causing the inspector to apply bytecode transformation in order
        // to add hooks into Http code.
        StartInspectionCommand start_inspection_command = 1;
        InterceptCommand intercept_command = 2;
    }
}

message StartInspectionCommand {
}

message InterceptCommand {
    oneof union {
        InterceptRuleAdded intercept_rule_added = 1;
        InterceptRuleUpdated intercept_rule_updated = 2;
        InterceptRuleRemoved intercept_rule_removed = 3;
        ReorderInterceptRules reorder_intercept_rules = 4;
    }
}

message ReorderInterceptRules {
    repeated int32 rule_id = 1;
}

// The InterceptRuleAdded command adds a new rule at the end of an ordered processing sequence.
message InterceptRuleAdded {
    int32 rule_id = 1;
    InterceptRule rule = 2;
}

message InterceptRuleUpdated {
    int32 rule_id = 1;
    InterceptRule rule = 2;
}

message InterceptRuleRemoved {
    int32 rule_id = 1;
}

// The InterceptRule matches the request with its url criteria before
// applying its transformations to the response.
message InterceptRule {
    InterceptCriteria criteria = 1;
    repeated Transformation transformation = 2;
}

// The MatchingText matches the text with its plain content, wild cards or regex.
// Empty text matches all.
message MatchingText {
    enum Type {
        UNDEFINED = 0;
        PLAIN = 1;
        REGEX = 2;
    }
    Type type = 1;
    string text = 2;
}

message InterceptCriteria {
    string protocol = 1;
    string host = 2;
    string port = 3;
    string path = 4;
    string query = 5;
    string method = 6;
}

message Transformation {
    oneof union {
        StatusCodeReplaced status_code_replaced = 1;
        HeaderAdded header_added = 2;
        HeaderReplaced header_replaced = 3;
        BodyReplaced body_replaced = 4;
        BodyModified body_modified = 5;
    }

    // Replace status code that match the text or regex.
    message StatusCodeReplaced {
        MatchingText target_code = 1;
        string new_code = 2;
    }

    // Add a header with name and value.
    message HeaderAdded {
        string name = 1;
        string value = 2;
    }

    // Replace all headers that match the text or regex.
    message HeaderReplaced {
        MatchingText target_name = 1;
        MatchingText target_value = 2;
        optional string new_name = 3;
        optional string new_value = 4;
    }

    // Replace the response body.
    message BodyReplaced {
        bytes body = 1;
    }

    // Replace segments of response body that match the target.
    message BodyModified {
        MatchingText target_text = 1;
        string new_text = 2;
    }
}

message Response {
    oneof union {
        // Response to StartInspectionCommand.
        StartInspectionResponse start_inspection_response = 1;
        InterceptResponse intercept_response = 2;
    }
}

message StartInspectionResponse {
    // This timestamp in nanoseconds represents the baseline for the clock the app
    // is running on. This helps Studio in rendering the inspector timeline.
    int64 timestamp = 1;
}

message InterceptResponse {
}
